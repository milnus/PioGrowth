[{"name":"server.R","content":"server <- function(input, output, session) {\n  read_data <- read_data_server(\"read_data\")\n\n  filter_data <- filter_reactors_server(\"filter_reactors\", read_data)\n\n  plot_raw_server(\"raw_data_plot\", read_data, filter_data)\n\n  calibrated_data <- calibration_server(\"calibration_process\", filter_data)\n\n  batch_analysis_server(\n    \"batch_analysis\",\n    calibrated_od_data_list = calibrated_data,\n    raw_od_data_list = filter_data\n  )\n\n  turbidostat_analysis_server(\n    \"turbidostat_analysis\",\n    calibrated_od_data_list = calibrated_data,\n    raw_od_data_list = filter_data\n  )\n}\n","type":"text"},{"name":"ui.R","content":"# Custom theme\npiogrowth_theme <- bs_theme(\n  version = 5,\n  bootswatch = \"flatly\",\n  fg = \"black\", # Colour of text in ForeGround\n  bg = \"#FFFFFF\", # Colour of the background\n  primary = \"#d0fbde\",\n  secondary = \"lightgrey\", # Colour of buttons mainly\n  \"navbar-bg\" = \"#0c8835\",\n)\n\n# nav_ops <- bslib::nav_op (bg = \"#0c8835\")\n\nui <- page_navbar(\n  # NAVIGATION BAR\n  theme = piogrowth_theme,\n  # nav_options = nav_ops,\n  title = \"PioGrowth\",\n  nav_panel(\n    # HOME PANEL\n    title = \"Home\",\n    layout_column_wrap(\n      width = \"500px\",\n      card(\n        card_header(\n          class = \"bg-primary\",\n          \"Welcome!\"\n        ),\n        card_body(\n          height = \"250px\",\n          h4(\"Intro\"),\n          p(\n            \"This is a simple multi-page Shiny application showcasing modules and modern UI design.\"\n          ),\n          p(\"Navigate using the menu above to explore different sections.\")\n        ),\n      ),\n      card(\n        card_header(\n          class = \"bg-primary\",\n          \"Read PioReactor od_readings csv\"\n        ),\n        read_data_ui(\"read_data\")\n      ),\n      card(\n        height = \"800px\",\n        card_header(\n          class = \"bg-primary text\",\n          \"Raw data plotted\"\n        ),\n        plot_raw_data_ui(\"raw_data_plot\")\n      ),\n      card(\n        filter_reactors_ui(\"filter_reactors\"),\n      ),\n      card(\n        card_header(\n          class = \"bg-primary text\",\n          \"Features\"\n        ),\n        card_body(\n          tags$ul(\n            class = \"list-group list-group-flush\",\n            tags$li(class = \"list-group-item\", \"Modern UI with bslib\"),\n            tags$li(class = \"list-group-item\", \"Test text\"),\n            tags$li(class = \"list-group-item\", \"Test text 2\")\n          )\n        )\n      )\n    )\n  ),\n  nav_panel(\n    # COUNTER PANEL\n    title = \"Counter\",\n    layout_column_wrap(\n      width = \"400px\",\n      read_data_ui(\"counter1\"),\n      calibration_ui(\"calibration_process\")\n    )\n  ),\n  nav_panel(\n    # BATCH GROWTH PANEL\n    title = \"Batch growth analysis\",\n    layout_column_wrap(\n      width = \"400px\",\n      batch_analysis_ui(\"batch_analysis\")\n    )\n  ),\n  nav_panel(\n    # TURBIDOSTAT GROWTH PANEL\n    title = \"Turbidostat growth analysis\",\n    layout_column_wrap(\n      width = \"400px\",\n      turbidostat_analysis_ui(\"turbidostat_analysis\")\n    )\n  ),\n  nav_panel(\n    # ABOUT PANEL\n    title = \"About\",\n    card(\n      card_header(\n        class = \"bg-primary text-light\",\n        \"About This App\"\n      ),\n      card_body(\n        h4(\"Technical Details\"),\n        p(\"This application demonstrates several modern Shiny features:\"),\n        accordion(\n          accordion_panel(\n            \"UI Components\",\n            tags$ul(\n              tags$li(\"Modern navigation with page_navbar\"),\n              tags$li(\"Responsive card layouts\"),\n              tags$li(\"Bootstrap icons integration\"),\n              tags$li(\"Custom theme using bslib\")\n            )\n          ),\n          accordion_panel(\n            \"Architecture\",\n            tags$ul(\n              tags$li(\"Modular code organization\"),\n              tags$li(\"Separated UI and server logic\"),\n              tags$li(\"Reusable components\")\n            )\n          )\n        )\n      )\n    )\n  )\n)\n","type":"text"},{"name":"DESCRIPTION","content":"Package: PioGrowth\nTitle: PioGrowth\nVersion: 0.0.1\nAuthors@R: person(\"Magnus\", \"G. Jespersen\", email = \"binfie.magnusgj@gmail.com\", role = c(\"aut\", \"cre\"))\nDescription: Repository for ShinyLive based app for analysis of Optical Density mesurements produced mainly with a [PioReactor](https://pioreactor.com/)\nLicense: MIT\nEncoding: UTF-8\nImports:\n    shiny,\n    ggplot2,\n    stringr,\n    gridExtra,\n    bslib\nSuggests:\n    vdiffr,\n    testthat (>= 3.0.0)\nConfig/testthat/edition: 3\n","type":"text"},{"name":"LICENSE","content":"MIT License\n\nCopyright (c) 2025 Magnus G. Jespersen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","type":"text"},{"name":"R/calibration_plot.R","content":"#### Plot linear regressions for calibration ####\ncalibration_plot <- function(\n  od_calibration_readings,\n  fixed_intercept,\n  add_zero_point\n) {\n  message(\"[calibration_plot] - STARING\")\n  message(paste(\"[calibration_plot] - fixed_intercept:\", fixed_intercept))\n  message(paste(\"[calibration_plot] - add_zero_point:\", add_zero_point))\n\n  if (length(add_zero_point) == 0) {\n    add_zero_point <- FALSE\n  }\n\n  linear_regress_plots <- lapply(od_calibration_readings, function(x) {\n    # Set the intercept and slope of the model\n    if (fixed_intercept) {\n      slope_coefficient <- summary(x$calibration_model)$coefficients[1]\n      intercept_coefficient <- 0\n    } else {\n      slope_coefficient <- summary(x$calibration_model)$coefficients[2]\n      intercept_coefficient <- summary(x$calibration_model)$coefficients[1]\n    }\n\n    if (add_zero_point & !fixed_intercept) {\n      col_vec <- c(rep(\"black\", nrow(x$calibtation_data) - 1), \"red\")\n    } else {\n      col_vec <- rep(\"black\", nrow(x$calibtation_data))\n    }\n\n    # Plot\n    ggplot(x$calibtation_data, aes(pio_od, manual_od)) +\n      geom_point(col = col_vec) +\n      geom_abline(\n        slope = slope_coefficient,\n        intercept = intercept_coefficient,\n        linetype = 'dashed',\n        colour = 'red'\n      ) +\n      geom_text(\n        data = data.frame(),\n        aes(\n          label = paste0('slope=', round(slope_coefficient, 2)),\n          x = -Inf,\n          y = Inf\n        ),\n        hjust = 0,\n        vjust = 1\n      ) +\n      geom_text(\n        data = data.frame(),\n        aes(\n          label = paste0(\n            'R^2=',\n            round(summary(x$calibration_model)$r.squared, 3)\n          ),\n          x = -Inf,\n          y = Inf\n        ),\n        hjust = 0,\n        vjust = 2.5\n      ) +\n      ggtitle(x$calibtation_data$reactor[1]) +\n      scale_y_continuous(limits = c(-0.1, NA)) +\n      scale_x_continuous(limits = c(-0.1, NA))\n  })\n\n  do.call(gridExtra::grid.arrange, c(linear_regress_plots))\n}\n","type":"text"},{"name":"R/correct_neg_data_median.R","content":"correct_neg_data_median <- function(od_data, outlier_df) {\n  # Hanndle NA reading and add the outlier masking/removal\n  # Set window to take median\n  k_range <- 31\n  k <- k_range %/% 2\n\n  od_columns <- 2:ncol(od_data)\n\n  od_data_neg_corrected <- od_data\n\n  for (col_i in od_columns) {\n    # Mask outliers\n    od_data_neg_corrected[outlier_df[, col_i], col_i] <- NA\n    # Get indexes of negative measurments\n    neg_indexes <- which(od_data[, col_i] < 0)\n    neg_indexes <- neg_indexes[!is.na(neg_indexes)]\n\n    if (length(neg_indexes)) {\n      od_data_neg_corrected[, col_i][neg_indexes] <-\n        sapply(neg_indexes, function(i) {\n          lower_bound <- i - k\n          upper_bound <- i + k\n\n          lower_bound <- ifelse(lower_bound > 0, lower_bound, 1)\n          upper_bound <- ifelse(\n            upper_bound > nrow(od_data),\n            nrow(od_data),\n            upper_bound\n          )\n\n          # Find the values in the range k\n          k_values <- od_data[, col_i][lower_bound:upper_bound]\n          # Find number of positive measurements in k values\n          n_pos <- sum(k_values > 0, na.rm = TRUE)\n\n          # if range is less than the specified expand until k positive values are reached\n          while (n_pos < k_range) {\n            k <- k + 1\n\n            lower_bound <- i - k\n            upper_bound <- i + k\n\n            lower_bound <- ifelse(lower_bound > 0, lower_bound, 1)\n            upper_bound <- ifelse(\n              upper_bound > nrow(od_data),\n              nrow(od_data),\n              upper_bound\n            )\n\n            k_values <- od_data[, col_i][lower_bound:upper_bound]\n\n            n_pos <- sum(k_values > 0, na.rm = TRUE)\n          }\n\n          # reset k\n          k <- k_range %/% 2\n\n          # Calculate the median\n          median_k_value <- median(k_values[k_values > 0], na.rm = TRUE)\n\n          return(median_k_value)\n        })\n    }\n  }\n  return(od_data_neg_corrected)\n}\n","type":"text"},{"name":"R/count_consecutive_negatives.R","content":"count_consecutive_negatives <- function(vec, hours) {\n  # Define the function to count consecutive negative values with only one allowed positive number in a sequence\n  n <- length(vec)\n  output <- integer(n)\n\n  i <- 1\n  while (i <= n) {\n    if (vec[i] < 0) {\n      count <- 0\n      j <- i\n      positive_count <- 0\n\n      while (\n        j <= n &&\n          (vec[j] < 0 ||\n            (vec[j] > 0 &&\n              positive_count < 1 &&\n              j < n &&\n              vec[j - 1] < 0 &&\n              vec[j + 1] < 0))\n      ) {\n        if (\n          vec[j] < 0 ||\n            (vec[j] > 0 && vec[j - 1] < 0 && vec[j + 1] < 0)\n        ) {\n          count <- count + 1\n          if (vec[j] > 0) {\n            positive_count <- positive_count + 1\n          }\n        }\n        j <- j + 1\n      }\n\n      # Fill the output for the sequence\n      for (k in i:(j - 1)) {\n        output[k] <- count\n      }\n\n      i <- j\n    } else {\n      i <- i + 1\n    }\n  }\n\n  return(data.frame(hours, output))\n}\n","type":"text"},{"name":"R/create_data_source_choices.R","content":"create_data_source_choices <- function(raw_data, calibrated_data) {\n  # Initialize choices vector\n  choices <- c()\n\n  # Add choices based on available data\n  if (!is.null(calibrated_data)) {\n    choices <- c(choices, \"calibrated\" = \"calibrated\")\n  }\n  if (!is.null(raw_data)) {\n    choices <- c(choices, \"raw\" = \"raw\")\n  }\n  # Not yet implemented in the app\n  # if (!is.null(raw_data) && !is.null(calibrated_data)) {\n  #   choices <- c(choices, \"compare\" = \"compare\")\n  # }\n\n  return(choices)\n}\n","type":"text"},{"name":"R/end_of_initial_exp_growth.R","content":"end_of_initial_exp_growth <- function(od_values) {\n\t# Function to identify the initial exponential growth\n\tdrop <- FALSE\n\ti <- 5 # worked well 5\n\tincrease_factor <- 5\n\tforward_window <- 5\n\tmax_od_observed <- max(od_values[1:i])\n\twhile (!(drop)) {\n\t\tif (\n\t\t\tall(\n\t\t\t\tod_values[i:(i + forward_window)] < max_od_observed * 0.8 &\n\t\t\t\t\tmax_od_observed > od_values[1] * increase_factor\n\t\t\t)\n\t\t) {\n\t\t\tdrop <- TRUE\n\t\t} else {\n\t\t\tif (od_values[i] > max_od_observed) {\n\t\t\t\tmax_od_observed <- od_values[i]\n\t\t\t}\n\t\t\ti <- i + 1\n\t\t}\n\t\tif (i > length(od_values)) {\n\t\t\tincrease_factor <- increase_factor - 1\n\t\t\ti <- 5\n\t\t\tif (increase_factor < 0) {\n\t\t\t\twarning(\n\t\t\t\t\t\"increase_factor in end_of_initial_exp_growth reached zero\"\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn(i)\n}\n","type":"text"},{"name":"R/filter_manual_ods.R","content":"filter_manual_ods <- function(manual_od_readings, od_data_list) {\n  # Check if no reactors are selected for filtering\n  if (length(od_data_list[[\"filtering_state\"]][[\"reactors_selected\"]]) == 0) {\n    return(manual_od_readings)\n  }\n  # Identify the rows of reactors of interest\n  regex_str <- paste0(\n    od_data_list[[\"filtering_state\"]][[\"reactors_selected\"]],\n    collapse = \"|\"\n  )\n  rows_oi <- grep(regex_str, manual_od_readings$name, ignore.case = TRUE)\n\n  if (od_data_list[[\"filtering_state\"]][[\"filtering_strategy\"]] == \"Keep\") {\n    manual_od_readings_filtered <- manual_od_readings[rows_oi, ]\n  } else {\n    manual_od_readings_filtered <- manual_od_readings[-rows_oi, ]\n  }\n\n  if (nrow(manual_od_readings_filtered) == 0) {\n    message(\"[filter_reactors()] - All manual readings filtered out\")\n    return()\n  } else {\n    return(manual_od_readings_filtered)\n  }\n}\n","type":"text"},{"name":"R/filter_reactors.R","content":"#### Filter out pioreactors based on user feedback ####\n\nfilter_reactors <- function(\n  pioreactor_data,\n  pios_of_interest = c(),\n  filt_strat\n) {\n  # Check if filtering is required\n  if (!is.null(pios_of_interest)) {\n    ## Construct regex string and search for reactor columns\n    regex_str <- paste0(pios_of_interest, collapse = \"|\")\n    columns_oi <- grep(\n      regex_str,\n      colnames(pioreactor_data[[\"pioreactor_OD_data_wide\"]]),\n      ignore.case = TRUE\n    )\n\n    ## Keep reactors selected by user else remove:\n    if (filt_strat == \"Keep\") {\n      pioreactor_data[c(\"pioreactor_OD_data_wide\", \"raw_time\")] <- lapply(\n        pioreactor_data[c(\"pioreactor_OD_data_wide\", \"raw_time\")],\n        function(x) x[, c(1, columns_oi)]\n      )\n    } else {\n      pioreactor_data[c(\"pioreactor_OD_data_wide\", \"raw_time\")] <- lapply(\n        pioreactor_data[c(\"pioreactor_OD_data_wide\", \"raw_time\")],\n        function(x) x[, c(-columns_oi)]\n      )\n    }\n  }\n\n  ## Check if any reactors are left after filtering\n  if (is.vector(pioreactor_data[[\"pioreactor_OD_data_wide\"]])) {\n    message(\"[filter_reactors()] - All reactors filtered out\")\n    return()\n  }\n\n  return(pioreactor_data)\n}\n","type":"text"},{"name":"R/fine_spline_smoothing.R","content":"fine_spline_smoothing <- function(hours, od_values, outliers) {\n  # Function to find a highly free spline that smooths the growth curve.\n  non_na <- !is.na(od_values)\n  hours_filt <- hours[non_na & !outliers]\n  od_values_filt <- od_values[non_na & !outliers]\n\n  spline_model <- lm(od_values_filt ~ ns(hours_filt, df = 300))\n\n  spline_od <- predict(spline_model, hours_filt)\n\n  return(spline_od)\n}\n","type":"text"},{"name":"R/first_last_od_plot.R","content":"# Function to calculate innerquantile mean (IQM)\niqm <- function(x) {\n  y <- mean(x[\n    x >= quantile(x, 0.25) &\n      x <= quantile(x, 0.75)\n  ])\n}\n\nfirst_last_od_plot <- function(complete_calibration_data, x_pio_ods) {\n  # Isolate the first and last od readings from reactors\n  first_last_x_df <- complete_calibration_data$first_last_x_df\n\n  # If no readings are given then return empty plot, else construct plot\n  if (is.null(first_last_x_df)) {\n    return(ggplot())\n  } else {\n    x_nudge <- 0.1\n\n    p <- ggplot(first_last_x_df, aes(name, od_reading)) +\n      geom_point(position = position_nudge(x = x_nudge)) +\n      facet_grid(. ~ position)\n\n    # Check if inner quartile mean or mean should be plotted\n    if (x_pio_ods < 5) {\n      p <- p +\n        stat_summary(\n          geom = \"point\",\n          fun = \"mean\",\n          colour = \"red\",\n          shape = 16,\n          position = position_nudge(x = -x_nudge)\n        )\n    } else {\n      p <- p +\n        stat_summary(\n          geom = \"point\",\n          fun = iqm,\n          colour = \"red\",\n          shape = 16,\n          position = position_nudge(x = -x_nudge)\n        )\n    }\n\n    return(p)\n  }\n}\n","type":"text"},{"name":"R/format_calibrated_od_data.R","content":"format_calibrated_od_data <- function(raw_data, calibrated_data) {\n  ### Copy the raw datafra,e and substitute the calibrated data at approproate time points\n  raw_data[[\"calibrated_data\"]] <- raw_data[[\"filtered_data\"]][[\n    \"pioreactor_OD_data_wide\"\n  ]]\n\n  # For each calibrated reactor substitute in calibrated OD values\n  for (name in names(calibrated_data)) {\n    raw_data_col_oi <- grep(name, names(raw_data[[\"calibrated_data\"]]))\n\n    hours_to_substitute <- raw_data[[\"calibrated_data\"]][\"hours\"] %in%\n      calibrated_data[[name]][\"hours\"]\n\n    raw_data[[\"calibrated_data\"]][\n      hours_to_substitute,\n      raw_data_col_oi\n    ] <- calibrated_data[[name]][\"Calibrated_OD\"]\n  }\n\n  return(raw_data)\n}\n","type":"text"},{"name":"R/format_filter_return.R","content":"format_filter_return <- function(\n  raw_data,\n  filtered_data,\n  reactor_selection,\n  filt_strat\n) {\n  return_list <- list(\n    \"raw_data\" = raw_data[[\"pioreactor_OD_data_wide\"]],\n    \"filtered_data\" = filtered_data[[\"pioreactor_OD_data_wide\"]],\n    \"file_path\" = raw_data[[\"file_path\"]],\n    \"filtering_state\" = list(\n      \"reactors_selected\" = reactor_selection,\n      \"filtering_strategy\" = filt_strat\n    )\n  )\n\n  return(return_list)\n}\n","type":"text"},{"name":"R/high_mu_range_slider.R","content":"# Function to allow user to add tangent of max growth rate\nhigh_mu_range_slider <- function(ns, spline_smoothing) {\n\tsliderInput(\n\t\tinputId = ns(\"high_mu_percentage\"),\n\t\tlabel = \"Define percentage of\\nµmax considered as high\",\n\t\tmin = 1,\n\t\tmax = 100,\n\t\tvalue = 90,\n\t\tstep = 1,\n\t\tticks = F,\n\t\tpost = \"%\",\n\t)\n}\n","type":"text"},{"name":"R/iqr_outlier_detection.R","content":"iqr_outlier_detection <- function(od_data) {\n  # Set the width of the window to search and find center of the window\n  k <- 31 # 21 also worked\n\n  # Check that K is odd, so that it has a center point.\n  if (k %% 2 == 0) {\n    message(\"k cannot be even!\")\n    return()\n  }\n\n  # Find the columns that contain od data\n  od_columns <- 2:ncol(od_data)\n\n  outlier_df <- od_data\n  for (column_i in od_columns) {\n    outlier_df[, column_i] <- FALSE\n\n    # condence column for NA's\n    data_oi <- od_data[, c(1, column_i)]\n    data_oi <- data_oi[!is.na(data_oi[, 2]), ]\n\n    # add roll to find median and IQR\n    median_roll <- zoo::rollapply(\n      data_oi[, 2],\n      align = \"center\",\n      fill = NA,\n      width = k,\n      FUN = median,\n      partial = T\n    )\n    iqr_roll <- zoo::rollapply(\n      data_oi[, 2],\n      align = \"center\",\n      fill = NA,\n      width = k,\n      FUN = IQR,\n      partial = T\n    )\n\n    for (row_i in 1:(nrow(data_oi))) {\n      # Remove points 2.5 Inner Quartile Ranges above or below median\n      if (\n        data_oi[row_i, 2] > median_roll[row_i] + iqr_roll[row_i] * 1.5 | # 2.5 worked well- this was the previous\n          data_oi[row_i, 2] < median_roll[row_i] - iqr_roll[row_i] * 1.5\n      ) {\n        outlier_df[outlier_df[, 1] == data_oi[row_i, 1], column_i] <- TRUE\n      }\n    }\n  }\n  return(outlier_df)\n}\n","type":"text"},{"name":"R/no_pio_ods_check.R","content":"no_pio_ods_check <- function(\n  calibration_table,\n  od_data_list,\n  x_measurements_oi\n) {\n  ##TODO - Make so that this function can be used if only some reactors have calibration measurements from pio and manual\n  message(\"[no_pio_ods_check] - STARTING\")\n\n  # Create a return list with first and last ten for later plotting.\n  first_last_x_list <- list()\n\n  # Isolate the raw pio od readings\n  raw_pio_od <- od_data_list[[\"filtered_data\"]][[\"pioreactor_OD_data_wide\"]]\n\n  # Check if no PioReactor ODs were given\n  if (all(is.na(calibration_table[, \"pio_od\"]))) {\n    for (name in unique(calibration_table[, \"name\"])) {\n      message(paste(\"[no_pio_ods_check]   -   \", name))\n\n      # grep out the column\n      od_column_oi <- grep(paste0(\"od_reading.\", name), colnames(raw_pio_od))\n\n      if (length(od_column_oi) == 0) {\n        shiny::showNotification(\n          ui = paste(\n            \"No reactor found in dataset named:\",\n            name,\n            \"\\nWill skip calibration and processing of this reactor\"\n          ),\n          duration = NULL,\n          type = \"error\"\n        )\n        # stop(errorCondition(message =\n        #     paste(\"No reactor found in dataset named:\", name),\n        #     class = \"Input_error\"))\n      }\n\n      od_readings_oi <- raw_pio_od[, od_column_oi]\n\n      # Remove NAs\n      od_readings_oi <- od_readings_oi[!is.na(od_readings_oi)]\n\n      # Identify first and last X measurements\n      first_od_oi <- od_readings_oi[1:x_measurements_oi]\n      last_od_oi <- od_readings_oi[\n        (length(od_readings_oi) - x_measurements_oi + 1):length(od_readings_oi)\n      ]\n\n      # Save the top and last X measurements in return list\n      first_last_x_list[[name]] <- data.frame(\n        \"position\" = rep(c(\"First\", \"Last\"), each = x_measurements_oi),\n        \"od_reading\" = c(first_od_oi, last_od_oi),\n        \"name\" = name\n      )\n\n      # Calculate the average (median or IQR mean) and insert the manual OD.\n      first_od_value <- NA\n      last_od_value <- NA\n\n      # Set type of mean used depending on number of samples to use from PrioReactor\n      mean_type <- ifelse(x_measurements_oi < 5, \"Mean\", \"Innerquantile mean\")\n\n      if (mean_type == \"Mean\") {\n        first_od_value <- mean(first_od_oi)\n        last_od_value <- mean(last_od_oi)\n      } else {\n        if (mean_type == \"Innerquantile mean\") {\n          first_od_value <- mean(first_od_oi[\n            first_od_oi >= quantile(first_od_oi, 0.25) &\n              first_od_oi <= quantile(first_od_oi, 0.75)\n          ])\n          last_od_value <- mean(last_od_oi[\n            last_od_oi >= quantile(last_od_oi, 0.25) &\n              last_od_oi <= quantile(last_od_oi, 0.75)\n          ])\n        }\n      }\n      reading_order <- order(calibration_table[\n        calibration_table[, \"name\"] == name,\n        \"manual_od\"\n      ])\n      calibration_table[calibration_table[, \"name\"] == name, \"pio_od\"][\n        reading_order\n      ] <- c(first_od_value, last_od_value)\n    }\n  }\n\n  # Create a dataframe that contains the first and last X measurements for each reactor\n  first_last_x_df <- do.call(\"rbind.data.frame\", first_last_x_list)\n\n  return(list(\n    \"calibration_table\" = calibration_table,\n    \"first_last_x_df\" = first_last_x_df\n  ))\n}\n","type":"text"},{"name":"R/origin_point_box.R","content":"#### Function to allow user to select addition of a point through (0,0) ####\norigin_point_box <- function(ns) {\n  checkboxInput(\n    inputId = ns(\"origin_point\"),\n    label = \"Add (0,0) point to regression\",\n    value = FALSE\n  )\n}\n","type":"text"},{"name":"R/peak_detection_spline_workflow.R","content":"peak_detection_spline_workflow <- function(od_data, outliers) {\n\tprint(\"[peak_detection_spline_workflow] - START\")\n\n\t#   od_columns <- 2:ncol(wide_pioreactor_od_frame)\n\t#   wide_pioreactor_od_frame <- spline_outlier_detection(\n\t#     wide_pioreactor_od_frame,\n\t#     od_columns\n\t#   )\n\t#   wide_pioreactor_od_frame <- iqr_outlier_masking(\n\t#     wide_pioreactor_od_frame,\n\t#     od_columns\n\t#   )\n\n\t## Initialise dataframe to hold consecutive negative od values\n\tconsec_neg_df <- data.frame(\n\t\tmatrix(\n\t\t\tdata = FALSE,\n\t\t\tncol = ncol(od_data),\n\t\t\tnrow = nrow(od_data)\n\t\t)\n\t)\n\t# Insert time column\n\tconsec_neg_df[, 1] <- od_data[, 1]\n\t# Give colnames\n\tcolnames(consec_neg_df) <- colnames(od_data)\n\n\t# For each reactor, identify maximums and minimums in OD data, and add a column to hold this information\n\tfor (i in seq_along(od_data[, -1]) + 1) {\n\t\t# reactor_name <- unlist(strsplit(\n\t\t# \tnames(wide_pioreactor_od_frame)[i],\n\t\t# \t\"\\\\.\"\n\t\t# ))[\n\t\t# \t2\n\t\t# ]\n\t\t# print(paste(\"reactor_name:\", reactor_name))\n\n\t\t# od_values <- wide_pioreactor_od_frame[\n\t\t# \t!wide_pioreactor_od_frame[i + length(od_columns)],\n\t\t# \ti\n\t\t# ]\n\t\tod_values <- od_data[, i]\n\n\t\t# time_stamps <- wide_pioreactor_od_frame[\n\t\t# \t!wide_pioreactor_od_frame[i + length(od_columns)],\n\t\t# \t1\n\t\t# ]\n\t\ttime_stamps <- od_data[, 1]\n\t\t# Mask outlisers with NA\n\t\tod_values[outliers[, i]] <- NA\n\n\t\t# Remove NA values\n\t\ttime_stamps <- time_stamps[!is.na(od_values)]\n\t\tod_values <- od_values[!is.na(od_values)]\n\n\t\t# Find a fine grained spline that can be used to identify consecutive negative values\n\t\tspline_smooted_od <- fine_spline_smoothing(\n\t\t\thours = od_data[, 1],\n\t\t\tod_values = od_data[, i],\n\t\t\toutliers = outliers[, i]\n\t\t)\n\n\t\tconsecutive_neg_timestamps <- time_stamps[!is.na(spline_smooted_od)]\n\t\tspline_smooted_od <- spline_smooted_od[!is.na(spline_smooted_od)]\n\n\t\t## Remove consecutive decreasing OD readings (using the rolling mean)\n\t\tdist_to_prev_od <- c(\n\t\t\t0,\n\t\t\tspline_smooted_od[2:length(spline_smooted_od)] -\n\t\t\t\tspline_smooted_od[1:(length(spline_smooted_od) - 1)]\n\t\t)\n\t\tcumcount_decrease_od <- count_consecutive_negatives(\n\t\t\tdist_to_prev_od,\n\t\t\tconsecutive_neg_timestamps\n\t\t)\n\n\t\t# Binarise consecutive OD readings and add to wide_od_frame\n\t\t# consecutive_neg_od_column_name <- paste0(\n\t\t# \treactor_name,\n\t\t# \t\"con_neg_od\",\n\t\t# \tcollapse = \"_\"\n\t\t# )\n\n\t\t# wide_pioreactor_od_frame[, consecutive_neg_od_column_name] <- FALSE\n\t\tconsec_neg_df[\n\t\t\tconsec_neg_df$hours %in% cumcount_decrease_od$hours,\n\t\t\ti\n\t\t] <- cumcount_decrease_od$output > 4 # four was the previous\n\n\t\t# Copy the peak detect frame to insert the rolling od\n\t\tod_data_rolling_copy <- od_data[, c(1, i)]\n\n\t\t# Set outliers and consecutive negative difference measurements to NA\n\t\tod_data_rolling_copy[outliers[, i] | consec_neg_df[, i], 2] <- NA\n\n\t\t# Filter outliers from spline values and time stamps\n\t\tspline_smooted_od <- spline_smooted_od[\n\t\t\tconsecutive_neg_timestamps %in%\n\t\t\t\tod_data_rolling_copy$hours[\n\t\t\t\t\t!(is.na(od_data_rolling_copy[, 2]))\n\t\t\t\t]\n\t\t]\n\t\ttime_stamps <- consecutive_neg_timestamps[\n\t\t\tconsecutive_neg_timestamps %in%\n\t\t\t\tod_data_rolling_copy$hours[\n\t\t\t\t\t!(is.na(od_data_rolling_copy[, 2]))\n\t\t\t\t]\n\t\t]\n\n\t\tindex_for_exp_growth_end <- end_of_initial_exp_growth(\n\t\t\tod_values = spline_smooted_od\n\t\t)\n\t\tdense_od_range <- density_estimate_function(\n\t\t\tod_values = spline_smooted_od,\n\t\t\tindex_for_exp_growth_end = index_for_exp_growth_end\n\t\t)\n\t\ttime_delta <- time_density_estimate(\n\t\t\ttime_stamps[!is.na(spline_smooted_od)],\n\t\t\tspline_smooted_od[!is.na(spline_smooted_od)]\n\t\t)\n\n\t\tdelta <- dense_od_range * 0.6\n\t\tprint(paste(\"delta:\", delta))\n\n\t\tspline_detected_segments <- find_increasing_segments_reset_base(\n\t\t\tmeasurements = spline_smooted_od,\n\t\t\ttime_stamps = time_stamps,\n\t\t\tdelta = delta,\n\t\t\ttime_delta = time_delta,\n\t\t\tmin_segment_length = 40,\n\t\t\tindex_for_exp_growth_end\n\t\t)\n\n\t\tsegments_column_name <- paste0(reactor_name, \"segments\", collapse = \"_\")\n\t\twide_pioreactor_od_frame[, segments_column_name] <- NA\n\n\t\twide_pioreactor_od_frame[\n\t\t\twide_pioreactor_od_frame$hours %in%\n\t\t\t\tspline_detected_segments$time_stamps,\n\t\t\tsegments_column_name\n\t\t] <- spline_detected_segments$merged_segments\n\t}\n\n\t# Sort output frame\n\twide_pioreactor_od_frame <- wide_pioreactor_od_frame[, c(\n\t\t1,\n\t\tod_columns,\n\t\tgrep(\"outliers\", colnames(wide_pioreactor_od_frame)),\n\t\tgrep(\"segments\", colnames(wide_pioreactor_od_frame)),\n\t\tgrep(\"con_neg_od\", colnames(wide_pioreactor_od_frame))\n\t)]\n\tprint(\"[peak_detection_spline_workflow] - DONE\")\n\treturn(wide_pioreactor_od_frame)\n}\n","type":"text"},{"name":"R/plot_dataframe_raw.R","content":"# Plotting each raw od curve\nplot_dataframe_raw <- function(dataframe, name, filter_vector, filt_strat) {\n  if (is.null(dataframe)) {\n    return()\n  }\n\n  # Isolate reactor name for plot title\n  plot_title <- unlist(strsplit(name, \"\\\\.\"))[2]\n\n  # Check if plot is filtered\n  if (any(grepl(plot_title, filter_vector, ignore.case = TRUE))) {\n    if (filt_strat == \"Keep\") {\n      background_col <- \"green\"\n    } else {\n      background_col <- \"red\"\n    }\n  } else {\n    background_col <- \"lightgrey\"\n  }\n\n  dataframe <- dataframe[!is.na(dataframe[, 2]), ]\n\n  p <- ggplot(\n    dataframe,\n    aes(x = timestamp, y = od_reading, colour = od_reading < 0)\n  ) +\n    geom_point(alpha = 0.75) +\n    ggtitle(plot_title) +\n    theme(\n      axis.title = element_blank(),\n      panel.background = element_rect(\n        fill = background_col,\n        color = background_col\n      )\n    ) +\n    scale_color_manual(values = c(\"black\", \"red\")) +\n    theme(legend.position = \"none\")\n\n  return(p)\n}\n","type":"text"},{"name":"R/plot_growth_data.R","content":"plot_growth_data <- function(od_data_list, remove_points) {\n  fitted_growth_data_return <- od_data_list[[\"spline_data\"]]\n  # if ((min(summarised_data$time_point) - max(summarised_data$time_point)) > 24){\n  #   break_step <- 2\n  # } else {\n  #   break_step <- 1\n  # }\n\n  # Initiate plot\n  # p <- ggplot(summarised_data$spline_data) #summarised_data$growth_data) +\n  p <- ggplot(fitted_growth_data_return)\n\n  # Add points if user want these\n  message(paste(\"remove_points:\", remove_points))\n  if (remove_points != TRUE) {\n    p <- p +\n      geom_point(\n        mapping = aes(Time, OD_values),\n        size = 0.5,\n        alpha = 0.2,\n        shape = 16\n      )\n  }\n\n  #### Add in max growth rate estimates ####\n  # Find max growth rates\n  max_growth_rate_list <- sapply(\n    unique(fitted_growth_data_return$Reactor),\n    function(x) {\n      reactor_data <- fitted_growth_data_return[\n        fitted_growth_data_return$Reactor == x,\n        c(\"Time\", \"Spline_growth_rate\", \"OD_values\", \"Reactor\", \"Spline_OD\")\n      ]\n\n      max_reactor_data <- reactor_data[\n        which.max(reactor_data$Spline_growth_rate),\n      ]\n\n      return(max_reactor_data)\n    },\n    simplify = FALSE\n  )\n\n  max_growth_rate_df <- do.call(\"rbind.data.frame\", max_growth_rate_list)\n  # Find x and y placement for text\n  y_text_pos <- max(fitted_growth_data_return$Spline_OD) * 0.85\n  x_test_pos <- max(fitted_growth_data_return$Time) * 0.2\n\n  p <- p +\n    geom_text(\n      inherit.aes = FALSE,\n      data = max_growth_rate_df,\n      mapping = aes(\n        x = x_test_pos,\n        y = y_text_pos,\n        label = paste0(\n          \"µ max = \",\n          round(Spline_growth_rate, 2),\n          \"\\n\",\n          \"at time \",\n          round(Time, 1)\n        )\n      ),\n      # \"at time \", round(Time), 2)),\n      size = 3\n    )\n\n  # Add the remaining layers of the plot\n  p <- p +\n    scale_y_continuous(limits = c(0, NA)) +\n    scale_x_continuous(limits = c(0, NA)) +\n    geom_line(\n      mapping = aes(Time, Spline_OD, colour = Spline_growth_rate),\n      lwd = 1\n    ) +\n    scale_color_gradient(name = \"Growth\\nrate\", low = \"blue\", high = \"orange\") +\n    facet_wrap(. ~ Reactor) +\n    theme_light() +\n    theme(\n      strip.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      ),\n      strip.text = element_text(colour = \"black\")\n    ) +\n    labs(y = expression(\"OD\"[600]), x = \"Time\")\n\n  return(p)\n}\n","type":"text"},{"name":"R/plot_growth_rate_data.R","content":"plot_growth_rate_data <- function(\n\tfitted_growth_data_return,\n\tsummarised_growth_data,\n\tshow_mu_max_interval = T\n) {\n\t# Isolate spline data\n\tfitted_growth_data_return <- fitted_growth_data_return[[\"spline_data\"]]\n\n\t# Initiate plot\n\tp <- ggplot(fitted_growth_data_return)\n\n\t# Add the remaining layers of the plot\n\tp <- p +\n\t\tscale_y_continuous(limits = c(0, NA)) +\n\t\tscale_x_continuous(limits = c(0, NA)) +\n\t\tgeom_hline(yintercept = 0, colour = \"black\", linewidth = 0.5) +\n\t\tgeom_line(\n\t\t\tmapping = aes(\n\t\t\t\tTime,\n\t\t\t\tSpline_growth_rate,\n\t\t\t\tcolour = Spline_growth_rate\n\t\t\t),\n\t\t\tlwd = 1\n\t\t) +\n\t\tscale_color_gradient(\n\t\t\tname = \"Growth\\nrate\",\n\t\t\tlow = \"blue\",\n\t\t\thigh = \"orange\"\n\t\t) +\n\t\tfacet_wrap(. ~ Reactor) +\n\t\ttheme_light() +\n\t\ttheme(\n\t\t\tstrip.background = element_rect(\n\t\t\t\tfill = \"transparent\",\n\t\t\t\tcolour = \"transparent\"\n\t\t\t),\n\t\t\tstrip.text = element_text(colour = \"black\")\n\t\t) +\n\t\tlabs(y = \"µ\", x = \"Time\")\n\n\tif (show_mu_max_interval) {\n\t\tcolnames(summarised_growth_data)[ncol(\n\t\t\tsummarised_growth_data\n\t\t)] <- \"max_time\"\n\t\tp <- p +\n\t\t\tgeom_segment(\n\t\t\t\tinherit.aes = F,\n\t\t\t\tdata = summarised_growth_data,\n\t\t\t\taes(\n\t\t\t\t\tx = High_mu_min_time,\n\t\t\t\t\txend = High_mu_max_time,\n\t\t\t\t\ty = mu * .01,\n\t\t\t\t\tyend = mu * .01\n\t\t\t\t),\n\t\t\t\tcol = \"red\",\n\t\t\t\tlwd = 0.75\n\t\t\t) +\n\t\t\tgeom_label(\n\t\t\t\tinherit.aes = F,\n\t\t\t\tdata = summarised_growth_data,\n\t\t\t\taes(\n\t\t\t\t\tx = (High_mu_max_time + High_mu_min_time) / 2,\n\t\t\t\t\ty = 0,\n\t\t\t\t\tlabel = round(max_time, 2)\n\t\t\t\t),\n\t\t\t\thjust = 0.5,\n\t\t\t\tvjust = 1\n\t\t\t)\n\t}\n\n\t# TODO - Add line indicating time spent in 90% of max growth - Could give a slider for this\n\n\treturn(p)\n}\n","type":"text"},{"name":"R/plot_raw_data.R","content":"# Function for plotting all raw od readings from reactors\nplot_raw_data <- function(raw_data, filter_vector, filt_strat) {\n  # Check if input data in not given\n  if (is.null(raw_data)) {\n    return()\n  }\n\n  ## Isolate data to be plotted\n  raw_data <- raw_data[[\"pioreactor_OD_data_wide\"]]\n\n  ## Construct list with dataframe for each reactor\n  df_list <- sapply(\n    2:ncol(raw_data),\n    function(x) {\n      data.frame(\n        \"timestamp\" = raw_data[, 1],\n        \"od_reading\" = raw_data[, x]\n      )\n    },\n    simplify = FALSE\n  )\n\n  ## Name the indexes of the list after rectors\n  names(df_list) <- colnames(raw_data)[2:ncol(raw_data)]\n\n  ## Plot OD over time for each reactor and save in a list of plots\n  ind_plots <- sapply(\n    seq_along(df_list),\n    function(i) {\n      plot_dataframe_raw(\n        dataframe = df_list[[i]],\n        name = names(df_list)[i],\n        filter_vector = filter_vector,\n        filt_strat = filt_strat\n      )\n    },\n    simplify = FALSE\n  )\n\n  ## Arrange the list of plots into a grid\n  do.call(gridExtra::grid.arrange, c(ind_plots))\n}\n","type":"text"},{"name":"R/predict_calibrated_ods.R","content":"#### Function to use calibration models to predict calibrated od values ####\npredict_calibrated_ods <- function(calibration_models, od_data_list) {\n  reactor_names <- names(calibration_models)\n\n  raw_data <- od_data_list[[\"filtered_data\"]][[\"pioreactor_OD_data_wide\"]]\n\n  calibrated_od_list <- list()\n\n  for (name in reactor_names) {\n    reactor_col_oi <- grep(name, names(raw_data))\n    raw_data_isolate <- raw_data[, c(1, reactor_col_oi)]\n\n    colnames(raw_data_isolate)[2] <- 'pio_od'\n    model <- calibration_models[[name]]$calibration_model\n\n    calibrated_od_list[[name]] <- data.frame(\n      \"hours\" = raw_data_isolate[, 1],\n      \"Calibrated_OD\" = predict(model, raw_data_isolate),\n      \"raw_time\" = od_data_list[[\"filtered_data\"]][[\"raw_time\"]][,\n        reactor_col_oi\n      ]\n    )\n  }\n\n  return(calibrated_od_list)\n}\n","type":"text"},{"name":"R/raw_pio_od_data_to_wide_frame.R","content":"raw_pio_od_data_to_wide_frame <- function(od_readings_csv) {\n  ## Check if od_readings_csv is null - i.e. not given\n  if (is.null(od_readings_csv)) {\n    return()\n  }\n\n  ## Read in OD data\n  pioreactor_OD_data <- data.table::fread(od_readings_csv)\n\n  ## Convert time to hours\n  pioreactor_OD_data$timestamp <- as.POSIXct(pioreactor_OD_data$timestamp)\n  pioreactor_OD_data$hours <- difftime(\n    pioreactor_OD_data$timestamp,\n    min(pioreactor_OD_data$timestamp),\n    units = \"hours\"\n  )\n\n  ## Reshape the data into a wide format\n  columns_oi <- c(\n    \"hours\",\n    \"pioreactor_unit\",\n    \"od_reading\",\n    \"timestamp_localtime\"\n  )\n  growth_data_oi <- pioreactor_OD_data[, columns_oi]\n\n  pioreactor_OD_data_wide <- as.data.frame(reshape(\n    data = growth_data_oi,\n    idvar = \"hours\",\n    timevar = \"pioreactor_unit\",\n    direction = \"wide\"\n  ))\n\n  ## Order reactor columns\n  reactor_column_names <- colnames(pioreactor_OD_data_wide)[\n    2:ncol(pioreactor_OD_data_wide)\n  ]\n  column_order <- match(reactor_column_names, sort(reactor_column_names))\n  pioreactor_OD_data_wide <- pioreactor_OD_data_wide[, c(1, column_order + 1)]\n  pioreactor_OD_data_wide <- pioreactor_OD_data_wide[, sort(colnames(\n    pioreactor_OD_data_wide\n  ))]\n\n  ## Isolate OD from raw_time columns\n  od_max_col <- (ncol(pioreactor_OD_data_wide) - 1) / 2 + 1\n  min_raw_time_col <- od_max_col + 1\n  max_raw_time_col <- ncol(pioreactor_OD_data_wide)\n\n  raw_data_list <- list(\n    \"pioreactor_OD_data_wide\" = pioreactor_OD_data_wide[, c(1, 2:od_max_col)],\n    \"raw_time\" = pioreactor_OD_data_wide[, c(\n      1,\n      min_raw_time_col:max_raw_time_col\n    )],\n    \"file_path\" = od_readings_csv\n  )\n\n  return(raw_data_list)\n}\n","type":"text"},{"name":"R/read_dosing_automation_events_data.R","content":"read_dosing_automation_events_data <- function(\n\tod_readings_csv,\n\tdosing_automation_events_csv\n) {\n\t## dosing_automation_events file contains only what may be a summary of the dilution event of the Pio reactor\n\t## dosing_events file contain all additions and removals of media events.\n\n\t## Read the first lines of the od file to find the first time a/all reactors to align the dosing events\n\tod_data <- data.table::fread(od_readings_csv, nrows = 20)\n\n\t# od_data <- od_data[!duplicated(od_data$pioreactor_unit),]\n\n\t## Read the dosing events file\n\tdosing_event_data <- data.table::fread(\n\t\tdosing_automation_events_csv,\n\t\theader = TRUE\n\t)\n\n\t## Check if the dosing_event_data has rows\n\tif (nrow(dosing_event_data) == 0) {\n\t\tmessage(\n\t\t\t\"[read_dosing_automation_events_data] - No dosing automation events data found.\"\n\t\t)\n\t\treturn(NULL)\n\t}\n\n\t## Calculate hours for events\n\tdosing_event_data$hours <- difftime(\n\t\tdosing_event_data$timestamp_localtime,\n\t\tmin(od_data$timestamp_localtime),\n\t\tunits = 'hours'\n\t)\n\n\t## Round ours to 3 decimal places\n\tdosing_event_data$hours <- round(dosing_event_data$hours, 3)\n\n\t## Isolate DilutionEvent\n\tdosing_event_data <- dosing_event_data[\n\t\tgrepl(\"DilutionEvent\", dosing_event_data$event_name),\n\t]\n\n\t## Return NULL if no DilutionEvent found\n\tif (nrow(dosing_event_data) == 0) {\n\t\tmessage(\n\t\t\t\"[read_dosing_automation_events_data] - No DilutionEvent found in dosing automation events data.\"\n\t\t)\n\t\treturn(NULL)\n\t}\n\n\treturn(dosing_event_data[, c(\"pioreactor_unit\", \"hours\")])\n}\n","type":"text"},{"name":"R/read_manual_ods.R","content":"#### Function to read in ####\nread_manual_ods <- function(manual_reading_csv) {\n  message(\"[read_manual_ods] - STARTING\")\n  if (is.null(manual_reading_csv)) {\n    return(NULL)\n  }\n  # Read the manual OD reads\n  calibration_table <- read.table(manual_reading_csv, sep = \",\", header = TRUE)\n\n  # Match columns\n  pio_od_col_num <- grep(\"pio\", colnames(calibration_table), ignore.case = TRUE)\n  manual_od_col_num <- grep(\n    \"manual\",\n    colnames(calibration_table),\n    ignore.case = TRUE\n  )\n  reactor_name_col_num <- grep(\n    \"name|reactor\",\n    colnames(calibration_table),\n    ignore.case = TRUE\n  )\n\n  if (length(pio_od_col_num) == 0) {\n    pio_od_col_num <- 3\n    calibration_table[, 3] <- NA\n    colnames(calibration_table)[3] <- \"pio\"\n  }\n\n  # Check if all required columns are matched\n  if (\n    any(\n      length(pio_od_col_num) > 1,\n      length(manual_od_col_num) > 1,\n      length(reactor_name_col_num) > 1\n    )\n  ) {\n    stop(errorCondition(\n      message = \"More than one column was identified as either pioreactor name (contains: reactor), manual OD readings (contains: manual), or pio reactor OD reading: (contains: pio)\",\n      class = \"Input_error\"\n    ))\n  }\n  if (any(length(manual_od_col_num) == 0, length(reactor_name_col_num) == 0)) {\n    stop(errorCondition(\n      message = \"One or more of the following had no match to a column: pioreactor name (contains: reactor), manual OD readings (contains: manual), or pio reactor OD reading: (contains: pio)\",\n      class = \"Input_error\"\n    ))\n  }\n\n  # reorder and name columns\n  calibration_table <- calibration_table[, c(\n    reactor_name_col_num,\n    pio_od_col_num,\n    manual_od_col_num\n  )]\n\n  colnames(calibration_table) <- c(\"name\", \"pio_od\", \"manual_od\")\n\n  return(calibration_table)\n}\n","type":"text"},{"name":"R/smoothing_slider.R","content":"# Function to allow user to add tangent of max growth rate\nsmoothing_slider <- function(ns, spline_smoothing) {\n\tsliderInput(\n\t\tinputId = ns(\"spline_smoothing\"),\n\t\tlabel = \"Smoothing of the spline fitted to OD values\",\n\t\tmin = 0.00,\n\t\tmax = 1.00,\n\t\tvalue = 1.00,\n\t\tstep = 0.05,\n\t\tticks = FALSE,\n\t)\n}\n","type":"text"},{"name":"R/spline_growth_integration.R","content":"# Function to take batch growth and extract growth parameters.\n# A smooth spline and its derivative is used to extract growth parameters\n\nspline_growth_integration <- function(\n  od_data_list,\n  bootstaps = 0,\n  spline_smoothing = 1.0\n) {\n  # TODO - Implement that boot strapping is a possibility\n\n  #### Initialise lists ####\n  growth_data_list <- list()\n\n  od_columns <- 2:ncol(od_data_list[[\"negative_corrected\"]])\n\n  #### Loop through each reactor to find growth parameters####\n  # for (description in names(growth_data)){\n  for (col_i in od_columns) {\n    reactor_name <- gsub(\n      \"od_reading\\\\.\",\n      \"\",\n      colnames(od_data_list[[\"negative_corrected\"]])[col_i]\n    )\n\n    message(paste(\"Processing Reactor:\", reactor_name))\n\n    #### Format data for spline analysis ####\n    # Extract relevant data\n    growth_data_list[[reactor_name]] <- data.frame(\n      \"Time\" = od_data_list[[\"negative_corrected\"]][, 1],\n      \"OD_values\" = od_data_list[[\"negative_corrected\"]][, col_i],\n      \"Reactor\" = reactor_name\n    )\n\n    # Mask removed outliers\n    growth_data_list[[reactor_name]] <- growth_data_list[[reactor_name]][\n      !od_data_list[[\"outliers\"]][, col_i],\n    ]\n\n    # Remove NA values\n    growth_data_list[[reactor_name]] <- growth_data_list[[reactor_name]][\n      !is.na(growth_data_list[[reactor_name]]$OD_values),\n    ]\n\n    # Transform OD values to log (taking ln(y/y0))\n    growth_data_list[[reactor_name]]$OD_values_log <- log(\n      growth_data_list[[reactor_name]]$OD_values /\n        growth_data_list[[reactor_name]]$OD_values[1]\n    ) +\n      0.01\n\n    #### Do spline analysis ####\n    # Construct spline smoothing function\n    smoothed_spline_function <- smooth.spline(\n      growth_data_list[[reactor_name]]$Time,\n      growth_data_list[[reactor_name]]$OD_values_log,\n      cv = NA, # Skips cross validation and speeds things up\n      spar = spline_smoothing\n    )\n\n    #### Get growth curve metrics ####\n    # Get the growth parameters for spline - 0th derivative\n    growth_data_list[[reactor_name]]$Spline_OD <- predict(\n      smoothed_spline_function,\n      deriv = 0\n    )$y\n    # Get the growth parameters for spline - 1st derivative\n    growth_data_list[[reactor_name]]$Spline_growth_rate <- predict(\n      smoothed_spline_function,\n      deriv = 1\n    )$y\n\n    growth_data_list[[reactor_name]]$Spline_OD_log <- growth_data_list[[\n      reactor_name\n    ]]$Spline_OD\n    # Convert spline from log(y/y0) to regular OD\n    growth_data_list[[reactor_name]]$Spline_OD <- exp(\n      growth_data_list[[reactor_name]]$Spline_OD_log\n    ) *\n      growth_data_list[[reactor_name]]$OD_values[1]\n\n    # Increment progress\n    incProgress(amount = 1 / length(od_columns))\n  }\n\n  # Concatenate the growth data and set type of variables\n  fitted_growth_data_return <- do.call(\"rbind\", growth_data_list)\n  fitted_growth_data_return$Time <- as.numeric(fitted_growth_data_return$Time)\n\n  return(fitted_growth_data_return)\n}\n","type":"text"},{"name":"R/spline_growth_integration_turbidostat.R","content":"# Function to take batch growth and extract growth parameters.\n# A smooth spline and its derivative is used to extract growth parameters\n\nspline_growth_integration_turbidostat <- function(\n\tsplit_od_data_list, # od_data_list\n\tn_bootstaps = 100,\n\tspline_smoothing = 1.0,\n\treactor_name\n) {\n\t# TODO - Implement that bootstrapping is a possibility\n\tmessage(paste(\"Processing Reactor:\", reactor_name))\n\n\t#### Initialise lists ####\n\tgrowth_data_list <- list()\n\n\tgrowth_phases <- seq_along(split_od_data_list) # od_columns\n\tprint(paste(\n\t\t\"[spline_growth_integration_turbidostat] - Processing\",\n\t\tlength(growth_phases),\n\t\t\"growth phases\"\n\t))\n\n\t#### Loop through each reactor to find growth parameters####\n\t# for (description in names(growth_data)){\n\tfor (col_i in growth_phases) {\n\t\tmessage(paste(\n\t\t\t\"[spline_growth_integration_turbidostat] - Processing growth phase\",\n\t\t\tcol_i,\n\t\t\t\"of\",\n\t\t\tlength(growth_phases)\n\t\t))\n\n\t\tif (nrow(split_od_data_list[[col_i]]) < 30) {\n\t\t\tmessage(paste(\n\t\t\t\t\"[spline_growth_integration_turbidostat] - Reactor\",\n\t\t\t\treactor_name,\n\t\t\t\t\"has less than 30 data points in growth phase\",\n\t\t\t\tcol_i,\n\t\t\t\t\"- skipping this growth phase.\"\n\t\t\t))\n\t\t\tnext # Skip this growth phase if it has less than 30 data points\n\t\t}\n\n\t\t## Construct list to hold growth data for each reactor\n\t\treactor_growth_data_list <- list()\n\n\t\tmid_time_point <- max(\n\t\t\tsplit_od_data_list[[col_i]]$timestamp\n\t\t) -\n\t\t\tmin(\n\t\t\t\tsplit_od_data_list[[col_i]]$timestamp\n\t\t\t) /\n\t\t\t\t2\n\n\t\tfor (n_bootstap in 1:n_bootstaps) {\n\t\t\t#### Format data for spline analysis ####\n\t\t\tif (n_bootstaps == 1) {\n\t\t\t\t## Extract data with no sampling\n\t\t\t\treactor_growth_data_list[[n_bootstap]] <- data.frame(\n\t\t\t\t\t\"Time\" = split_od_data_list[[col_i]][, \"timestamp\"],\n\t\t\t\t\t\"OD_values\" = split_od_data_list[[col_i]][, \"od_reading\"],\n\t\t\t\t\t\"Reactor\" = reactor_name\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t## Extract data with sampling\n\t\t\t\t## Sample with replacement\n\t\t\t\tsampled_indices <- sample(\n\t\t\t\t\t1:nrow(split_od_data_list[[col_i]]),\n\t\t\t\t\tnrow(split_od_data_list[[col_i]]),\n\t\t\t\t\treplace = TRUE\n\t\t\t\t)\n\t\t\t\t## Sort the sampled indices to maintain order\n\t\t\t\tsampled_indices <- sort(sampled_indices)\n\t\t\t\t## Create a new data frame with sampled indices\n\t\t\t\treactor_growth_data_list[[n_bootstap]] <- data.frame(\n\t\t\t\t\t\"Time\" = split_od_data_list[[col_i]][\n\t\t\t\t\t\tsampled_indices,\n\t\t\t\t\t\t\"timestamp\"\n\t\t\t\t\t],\n\t\t\t\t\t\"OD_values\" = split_od_data_list[[col_i]][\n\t\t\t\t\t\tsampled_indices,\n\t\t\t\t\t\t\"od_reading\"\n\t\t\t\t\t],\n\t\t\t\t\t\"Reactor\" = reactor_name\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t# Transform OD values to log (taking ln(y/y0))\n\t\t\treactor_growth_data_list[[n_bootstap]]$OD_values_log <- log(\n\t\t\t\treactor_growth_data_list[[n_bootstap]]$OD_values /\n\t\t\t\t\treactor_growth_data_list[[n_bootstap]]$OD_values[1]\n\t\t\t) +\n\t\t\t\t0.01 # Add a small constant to avoid log(0) issues\n\n\t\t\t#### Do spline analysis ####\n\t\t\t# Construct spline smoothing function\n\t\t\tsmoothed_spline_function <- smooth.spline(\n\t\t\t\treactor_growth_data_list[[n_bootstap]]$Time,\n\t\t\t\treactor_growth_data_list[[n_bootstap]]$OD_values_log,\n\t\t\t\tcv = NA, # Skips cross validation and speeds things up\n\t\t\t\tspar = spline_smoothing\n\t\t\t)\n\n\t\t\t#### Get growth curve metrics ####\n\t\t\t# # Get the growth parameters for spline - 0th derivative\n\t\t\t# reactor_growth_data_list[[n_bootstap]]$Spline_OD <- predict(\n\t\t\t# \tsmoothed_spline_function,\n\t\t\t# \tderiv = 0\n\t\t\t# )$y\n\t\t\t# Get the growth parameters for spline - 1st derivative\n\t\t\tSpline_growth_rate <- predict(\n\t\t\t\tsmoothed_spline_function,\n\t\t\t\tderiv = 1\n\t\t\t)$y\n\n\t\t\t# reactor_growth_data_list[[\n\t\t\t# \tn_bootstap\n\t\t\t# ]]$Spline_OD_log <- reactor_growth_data_list[[\n\t\t\t# \tn_bootstap\n\t\t\t# ]]$Spline_OD\n\t\t\t# ## Convert spline from log(y/y0) to regular OD\n\t\t\t# reactor_growth_data_list[[n_bootstap]]$Spline_OD <- exp(\n\t\t\t# \treactor_growth_data_list[[n_bootstap]]$Spline_OD_log\n\t\t\t# ) *\n\t\t\t# \treactor_growth_data_list[[n_bootstap]]$OD_values[1]\n\n\t\t\t## Add bootstrap number to the data frame\n\t\t\treactor_growth_data_list[[\n\t\t\t\tn_bootstap\n\t\t\t]]$bootstrap_rep <- as.numeric(\n\t\t\t\tn_bootstap\n\t\t\t)\n\n\t\t\treactor_growth_data_list[[n_bootstap]] <- data.frame(\n\t\t\t\t\"mu_max\" = max(\n\t\t\t\t\tSpline_growth_rate\n\t\t\t\t),\n\t\t\t\t\"Time_mu_max\" = reactor_growth_data_list[[n_bootstap]]$Time[\n\t\t\t\t\twhich.max(Spline_growth_rate) ## Get the halfway point of the growth curve\n\t\t\t\t],\n\t\t\t\t\"growth_phase\" = col_i,\n\t\t\t\t\"reactor_name\" = reactor_name,\n\t\t\t\t\"time_point\" = mid_time_point\n\t\t\t)\n\t\t} ## End of n_bootstaps loop\n\t\t# Combine all bootstrap data into a single data frame\n\t\tgrowth_data_list[[paste(reactor_name, col_i, sep = \"_\")]] <- do.call(\n\t\t\t\"rbind\",\n\t\t\treactor_growth_data_list\n\t\t)\n\t} ## End of growth phases loop\n\n\t## Concatenate the growth data and set type of variables\n\tfitted_growth_data_return <- do.call(\"rbind\", growth_data_list)\n\tfitted_growth_data_return$Time <- as.numeric(\n\t\tfitted_growth_data_return$Time_mu_max\n\t)\n\n\treturn(fitted_growth_data_return)\n}\n","type":"text"},{"name":"R/spline_outlier_detection.R","content":"spline_outlier_detection <- function(\n\tod_data,\n\toutlier_df = NULL,\n\tinput_df = 200\n) {\n\t#### Function to use spline and residual statistics to identify outliers\n\t#### For each reactor identify outliers and add a column indicating these\n\n\t# Isolate od data\n\tod_columns <- 2:ncol(od_data)\n\n\t# Isolate predefined outlier data, if any\n\tif (is.null(outlier_df)) {\n\t\toutlier_df <- data.frame(matrix(\n\t\t\tdata = FALSE,\n\t\t\tncol = ncol(od_data),\n\t\t\tnrow = nrow(od_data)\n\t\t))\n\t\t# Insert time column\n\t\toutlier_df[, 1] <- od_data[, 1]\n\t\t# Give colnames\n\t\tcolnames(outlier_df) <- colnames(od_data)\n\t}\n\n\tfor (column_i in od_columns) {\n\t\t# Set any prevuous outliers to NA\n\t\tod_data[, column_i][outlier_df[, column_i]] <- NA\n\n\t\t# condense column for NA's\n\t\tdata_oi <- od_data[, c(1, column_i)]\n\t\tdata_oi <- data_oi[!is.na(data_oi[, 2]), ]\n\n\t\t# Construct a spline for the od values\n\t\tspline_regression <- smooth.spline(\n\t\t\tdata_oi[, 1],\n\t\t\tdata_oi[, 2],\n\t\t\tdf = input_df,\n\t\t\tcv = FALSE\n\t\t)\n\t\t# Predict od values for fitted spline\n\t\tspline_od <- predict(spline_regression, deriv = 0)$y\n\n\t\t# Calculate residuals\n\t\tspline_residuals <- data_oi[, 2] - spline_od\n\t\t# Calculate mean and standard deviation of residuals\n\t\tmean_spline_od <- mean(spline_residuals)\n\t\tsd_spline_od <- sd(spline_residuals)\n\n\t\t# For each od value, check if it is an outlier\n\t\tfor (row_i in 1:(nrow(data_oi))) {\n\t\t\tif (\n\t\t\t\tabs(spline_od[row_i] - data_oi[row_i, 2]) >\n\t\t\t\t\tmean_spline_od + 1.96 * sd_spline_od\n\t\t\t) {\n\t\t\t\toutlier_df[\n\t\t\t\t\toutlier_df[, 1] == data_oi[row_i, 1],\n\t\t\t\t\tcolumn_i\n\t\t\t\t] <- TRUE\n\t\t\t}\n\t\t}\n\t}\n\treturn(outlier_df)\n}\n","type":"text"},{"name":"R/split_od_per_reactor.R","content":"#### Function to take split each reactor measurements and construct linear regression models ####\nsplit_od_per_reactor <- function(\n  calibration_table,\n  fixed_intercept,\n  add_zero_point\n) {\n  message(\"[split_od_per_reactor] - STARING\")\n  calibration_table <- calibration_table[[\"calibration_table\"]]\n\n  # Check if an origin point should be added\n  if (length(add_zero_point) == 0) {\n    add_zero_point <- FALSE\n  }\n\n  if (length(fixed_intercept) == 0) {\n    return(NULL)\n  }\n\n  # Split the data into reactor datasets\n  # split_reactor_table <- split(calibration_table, list(calibration_table[, reactor_name_col_num]))\n  split_reactor_table <- split(\n    calibration_table,\n    list(calibration_table[, \"name\"])\n  )\n\n  message(paste(\"[split_od_per_reactor] - add_zero_point:\", add_zero_point))\n  if (add_zero_point & !fixed_intercept) {\n    for (i in 1:length(split_reactor_table)) {\n      split_reactor_table[[i]][nrow(split_reactor_table[[i]]) + 1, ] <- list(\n        \"name\" = split_reactor_table[[i]][1, 1],\n        \"pio_od\" = 0,\n        \"manual_od\" = 0\n      )\n    }\n  }\n\n  # Construct a linear model for each reactor\n\n  # return list of linear models\n  message(paste(\"[split_od_per_reactor] - fixed_intercept:\", fixed_intercept))\n  if (fixed_intercept) {\n    reactor_lm_models <- lapply(\n      split_reactor_table,\n      lm,\n      formula = manual_od ~ pio_od - 1\n    )\n  } else {\n    reactor_lm_models <- lapply(\n      split_reactor_table,\n      lm,\n      formula = manual_od ~ pio_od\n    )\n  }\n\n  return_list <- list()\n  for (ID in names(reactor_lm_models)) {\n    return_list[[ID]] <- list(\n      \"calibration_model\" = reactor_lm_models[[ID]],\n      \"calibtation_data\" = split_reactor_table[[ID]]\n    )\n  }\n\n  return(return_list)\n}\n","type":"text"},{"name":"R/split_turbidostat_data.R","content":"split_turbidostat_data <- function(\n\tod_data,\n\tdosing_automation_events,\n\toutlier_data\n) {\n\t## Expected return is a list of lists with data frames\n\t## Each list contains data frames for each segment of the spline\n\t## Each data frame contains 'timestamp' and 'od_reading' columns\n\t## The first list is names as per the bioreactor unit\n\t## The second list is names as per the segment id\n\n\t## Mask outlier data\n\tod_data_outliers_masked <- od_data[, -1]\n\tod_data_outliers_masked[as.matrix(outlier_data[, -1])] <- NA\n\tod_data_outliers_masked <- cbind.data.frame(\n\t\t\"hours\" = od_data[, 1],\n\t\tod_data_outliers_masked\n\t)\n\n\t## Split the of each reactor based on Dilution Events\n\tsplit_reactor_data <- list()\n\n\tprint(\n\t\t\"[split_turbidostat_data] - Splitting turbidostat data into individual growth curves\"\n\t)\n\n\tfor (i in 2:ncol(od_data_outliers_masked)) {\n\t\tmessage(\n\t\t\tpaste(\n\t\t\t\t\"[split_turbidostat_data] - Processing reactor\",\n\t\t\t\tcolnames(od_data_outliers_masked)[i]\n\t\t\t)\n\t\t)\n\t\t## Isolate timestamps and OD values\n\t\treactor_df <- od_data_outliers_masked[, c(1, i)]\n\n\t\t## Rename columns\n\t\tcolnames(reactor_df) <- c(\"timestamp\", \"od_reading\")\n\t\treactor_df$timestamp <- as.numeric(reactor_df$timestamp)\n\n\t\t## Remove NA values (non-observed and outliers)\n\t\treactor_df <- reactor_df[!is.na(reactor_df[, \"od_reading\"]), ]\n\n\t\t## Isolate the reactor name\n\t\treactor_name <- colnames(outlier_data)[i]\n\t\treactor_name <- gsub(\"od_reading\\\\.\", \"\", reactor_name)\n\n\t\t## Isolate the dilution events for the reactor\n\t\treactor_dosing_times <- as.vector(\n\t\t\tdosing_automation_events[\n\t\t\t\tdosing_automation_events$pioreactor_unit == reactor_name,\n\t\t\t\t2\n\t\t\t],\n\t\t\tmode = \"numeric\"\n\t\t)\n\n\t\t## Split data based on dosing events\n\t\t# Use cut to assign group labels based on breaks\n\t\treactor_df$group <- cut(\n\t\t\treactor_df$timestamp,\n\t\t\tbreaks = c(-Inf, reactor_dosing_times, Inf),\n\t\t\tlabels = FALSE,\n\t\t\tright = TRUE\n\t\t)\n\n\t\t# Split into a list of data.frames\n\t\tsplit_list <- split(\n\t\t\treactor_df[, c(\"timestamp\", \"od_reading\")],\n\t\t\treactor_df$group\n\t\t)\n\n\t\tsplit_list <- lapply(\n\t\t\tsplit_list,\n\t\t\tfunction(x) {\n\t\t\t\trownames(x) <- NULL\n\t\t\t\treturn(x)\n\t\t\t}\n\t\t)\n\n\t\tsplit_reactor_data[[reactor_name]] <- split_list\n\t}\n\n\treturn(split_reactor_data)\n}\n","type":"text"},{"name":"R/summarise_growth_data.R","content":"summarise_growth_data <- function(tidy_growth_data, high_mu_percentage = 0.9) {\n\ttidy_growth_data <- tidy_growth_data[[\"spline_data\"]]\n\n\tif (is.null(tidy_growth_data)) {\n\t\treturn()\n\t}\n\t#### Summarise the main outputs from the growth analysis ####\n\tmax_growth_rate_list <- sapply(\n\t\tunique(tidy_growth_data$Reactor),\n\t\tfunction(x) {\n\t\t\treactor_data <- tidy_growth_data[\n\t\t\t\ttidy_growth_data$Reactor == x,\n\t\t\t\tc(\n\t\t\t\t\t\"Time\",\n\t\t\t\t\t\"Spline_growth_rate\",\n\t\t\t\t\t\"OD_values\",\n\t\t\t\t\t\"Reactor\",\n\t\t\t\t\t\"Spline_OD_log\"\n\t\t\t\t)\n\t\t\t]\n\n\t\t\tmax_reactor_data <- reactor_data[\n\t\t\t\twhich.max(reactor_data$Spline_growth_rate),\n\t\t\t]\n\n\t\t\treturn(max_reactor_data)\n\t\t},\n\t\tsimplify = F\n\t)\n\n\tsummarised_data <- do.call(\"rbind.data.frame\", max_growth_rate_list)\n\n\t#### Summarise time at high µ ####\n\t# Calculate high µ percentage\n\thigh_mu_time_name <- paste(\n\t\t\"Total_high_mu_time_\",\n\t\thigh_mu_percentage * 100,\n\t\t\"%\",\n\t\tsep = \"\"\n\t)\n\n\t# Summarise time spent at high µ\n\ttime_spent_at_high_mu <- sapply(\n\t\tunique(tidy_growth_data$Reactor),\n\t\tfunction(x) {\n\t\t\t# Isolate data from given reactor\n\t\t\treactor_data <- tidy_growth_data[tidy_growth_data$Reactor == x, ]\n\t\t\tmax_growth_data <- summarised_data[summarised_data$Reactor == x, ]\n\n\t\t\tmin_time <- min(reactor_data$Time[\n\t\t\t\treactor_data$Spline_growth_rate >=\n\t\t\t\t\tmax_growth_data$Spline_growth_rate * high_mu_percentage\n\t\t\t])\n\n\t\t\tmax_time <- max(reactor_data$Time[\n\t\t\t\treactor_data$Spline_growth_rate >=\n\t\t\t\t\tmax_growth_data$Spline_growth_rate * high_mu_percentage\n\t\t\t])\n\n\t\t\thigh_mu_time <- max_time - min_time\n\n\t\t\treturn(data.frame(\n\t\t\t\t\"High_mu_min_time\" = min_time,\n\t\t\t\t\"High_mu_max_time\" = max_time,\n\t\t\t\t\"high_mu_time_time\" = high_mu_time\n\t\t\t))\n\t\t},\n\t\tsimplify = F\n\t)\n\n\ttime_spent_at_high_mu <- do.call('rbind.data.frame', time_spent_at_high_mu)\n\n\t# Summarise the\n\n\tsummarised_data <- merge(\n\t\tsummarised_data,\n\t\tby.x = 4,\n\t\ttime_spent_at_high_mu,\n\t\tby.y = 0\n\t)\n\n\tcolnames(summarised_data) <- c(\n\t\t\"Reactor\",\n\t\t\"Time\",\n\t\t\"mu\",\n\t\t\"Reactor_OD\",\n\t\t\"Spline_OD\",\n\t\t\"High_mu_min_time\",\n\t\t\"High_mu_max_time\",\n\t\thigh_mu_time_name\n\t)\n\n\tsummarised_data[, 2:ncol(summarised_data)] <- round(\n\t\tsummarised_data[, 2:ncol(summarised_data)],\n\t\t4\n\t)\n\n\treturn(summarised_data)\n}\n","type":"text"},{"name":"R/summarise_growth_list_turbidostat.R","content":"# Summarise mean and intervals for growth\nsummarise_growth_list_turbidostat <- function(growth_list, plot_data = F) {\n\treturn_growth_list <- list()\n\t# Go through each list of reactors\n\tfor (reactor in (1:length(growth_list))) {\n\t\t# Calculate statistics for growth curves\n\t\tmu_mean <- aggregate.data.frame(\n\t\t\tgrowth_list[[reactor]]$mu_max,\n\t\t\tby = list(growth_list[[reactor]]$growth_phase),\n\t\t\tmean\n\t\t)\n\t\tmu_median <- aggregate.data.frame(\n\t\t\tgrowth_list[[reactor]]$mu_max,\n\t\t\tby = list(growth_list[[reactor]]$growth_phase),\n\t\t\tmedian\n\t\t)\n\t\tmu_lower_bound <- aggregate.data.frame(\n\t\t\tgrowth_list[[reactor]]$mu_max,\n\t\t\tby = list(growth_list[[reactor]]$growth_phase),\n\t\t\tfunction(x) quantile(x, 0.025, na.rm = T)\n\t\t) #*** Use the bootstarp confidence intervall instead of sd\n\t\tmu_upper_bound <- aggregate.data.frame(\n\t\t\tgrowth_list[[reactor]]$mu_max,\n\t\t\tby = list(growth_list[[reactor]]$growth_phase),\n\t\t\tfunction(x) quantile(x, 0.975, na.rm = T)\n\t\t) #*** Use the bootstarp confidence intervall instead of sd\n\t\tmu_sd <- aggregate.data.frame(\n\t\t\tgrowth_list[[reactor]]$mu_max,\n\t\t\tby = list(growth_list[[reactor]]$growth_phase),\n\t\t\tsd\n\t\t) #*** Use the bootstarp confidence intervall instead of sd\n\n\t\t## Summarise data into table\n\t\tgrowth_df <- data.frame(\n\t\t\t'Time_point' = unique(\n\t\t\t\tgrowth_list[[reactor]]$time_point\n\t\t\t),\n\t\t\t'Mean_mu' = mu_mean[, 2],\n\t\t\t'Median_mu' = mu_median[, 2],\n\t\t\t'SD_mu' = mu_sd[, 2],\n\t\t\t'Boot_low_bound' = mu_lower_bound[, 2],\n\t\t\t'Boot_upper_bound' = mu_upper_bound[, 2],\n\t\t\t\"Reactor\" = names(growth_list)[reactor]\n\t\t)\n\n\t\treturn_growth_list[[names(growth_list)[reactor]]] <- growth_df\n\t}\n\n\t\n\tbound_list <- do.call('rbind', return_growth_list)\n\t\n\n\t# bound_list$reactor <- unlist(sapply(1:length(return_growth_list), function(x) rep(names(return_growth_list)[x], nrow(return_growth_list[[x]]))))\n\t# bound_list$reactor <- gsub(\"\\\\..*\", \"\", rownames(bound_list))\n\n\tif (plot_data == T) {\n\t\tggplot(bound_list, aes(time_point, mean_mu, group = reactor)) +\n\t\t\tgeom_line() +\n\t\t\tfacet_wrap(. ~ reactor)\n\t}\n\n\tbound_list <- bound_list[!is.na(bound_list$Time_point), ]\n\n\tprint(\"RETURN - bound_list\")\n\treturn(bound_list)\n}\n","type":"text"},{"name":"R/ui_num_od_read.R","content":"ui_num_od_read <- function(ns) {\n  out_ui <- numericInput(\n    inputId = ns(\"x_pio_ods\"),\n    label = \"Number of first and last PioReactor OD readings to use for calibration\",\n    value = 10,\n    min = 1,\n    max = 50\n  )\n  return(out_ui)\n}\n","type":"text"},{"name":"R/user_pio_selection.R","content":"# Function to allow user to select reactors of interest\nuser_pio_selection <- function(read_data, reactor_selection, ns) {\n  if (is.null(read_data)) {\n    return()\n  }\n\n  shiny::selectInput(\n    inputId = ns(\"reactor_selection\"),\n    label = \"Select Pioreactors to remove or keep \n              based on option above\\n(red plots will be \n              removed and green will be keep in further analyses)\",\n    choices = stringr::str_replace(\n      names(read_data[[\"pioreactor_OD_data_wide\"]]),\n      pattern = \"od_reading\\\\.\",\n      \"\"\n    )[-1],\n    selected = reactor_selection,\n    multiple = TRUE\n  )\n}\n","type":"text"},{"name":"R/user_point_removal.R","content":"# Function to allow user to select pioreactors of interest\nuser_point_removal <- function(ns, remove_points) {\n\tradioButtons(\n\t\tinputId = ns(\"remove_points\"),\n\t\tlabel = \"Remove raw data points from output plot\",\n\t\tchoices = c(FALSE, TRUE),\n\t\tselected = remove_points\n\t)\n}\n","type":"text"},{"name":"R/write_calibrate_od_to_pio_format.R","content":"write_calibrate_od_to_pio_format <- function(calibrated_data) {\n  filtered_calibrated_data <- lapply(\n    calibrated_data,\n    function(x) x[!is.na(x[, 2]), ]\n  )\n\n  write_frame <- data.frame(\n    'timestamp_localtime' = unlist(lapply(\n      filtered_calibrated_data,\n      function(x) as.character(x[, 3])\n    )),\n    'experiment' = NA,\n    'pioreactor_unit' = unlist(sapply(\n      1:length(filtered_calibrated_data),\n      function(i)\n        rep(\n          names(filtered_calibrated_data)[i],\n          nrow(filtered_calibrated_data[[i]])\n        ),\n      simplify = F\n    )),\n    'timestamp' = NA,\n    'od_reading' = unlist(lapply(filtered_calibrated_data, function(x) x[, 2])),\n    'angle' = NA,\n    'channel' = NA\n  )\n  # Convert hours to date\n  # write_frame$timestamp_location <- as.Date(as.POSIXct(write_frame$timestamp_localtime, tz = 'GMT'))\n  write_frame$timestamp <- write_frame$timestamp_localtime\n\n  write_frame <- write_frame[order(write_frame[, 'timestamp_localtime']), ]\n\n  return(write_frame)\n}\n","type":"text"},{"name":"README.md","content":"# PioGrowth\n Repository for ShinyLive based app for analysis of Optical Density mesurements produced mainly with a [PioReactor](https://pioreactor.com/)\n","type":"text"},{"name":"app_diagram.pptx","content":"UEsDBBQABgAIAAAAIQA07uZu1wEAAN0NAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIo\noAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMl9tS2zAQhu+Z4R08umViJbSl0InDRQ9X\nLTADPICwN4lAljTSJiVvz1pOqGGSOG3iqW48Xmv/fz/Z1ml4+VyqZA7OS6MzNkj7LAGdm0Lq\nScbu7370zlniUehCKKMhYwvw7HJ0fDS8W1jwCam1z9gU0X7h3OdTKIVPjQVNLWPjSoEUugm3\nIn8SE+Cn/f4Zz41G0NjDyoONht9gLGYKk+/P9LgmebQwYcnXOrGqlTFZVgahga/VOFD+nUZY\nq2QukNr5XBfvyHpLqpSUIcdPpfUnlLChQtWyucBSd02v08kCkhvh8EqUlMWtRW4deNKF3HS7\n0xpUMx7LHAqTz0qSpE2zUr0J01JIverEJhiv6OEv4ZE+fTMYHJqs4b0T05KmG442Am0Q/Oqt\nNIKD0zS825gq5Y0z1nfxzwTjNoK5hN+dELwatxEgzStQX/f/FMGmtaJ4UHCLCwUH73XDeqcR\n8VMszAyX46IOuhkdtfe/Mp1GyPQhQqaPETJ9ipDpLEKmzxEynUfIdBEh06AfI9T/nMkbq+r+\nk/dOq2rY9tzW27w/993sroL1NiBSh80HHUcc/D3C6uxQqXuWjMCh3L6kv1Yk6737DNWxpIBi\nTW0eDmejFwAAAP//AwBQSwMEFAAGAAgAAAAhAGj4dKEDAQAA4gIAAAsACAJfcmVscy8ucmVs\ncyCiBAIooAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACskttKAzEQhu8F3yHMfTfbKiLS\nbG9E6J3I+gBjMrsb3RxIptK+vaHgYWEtgr3MzD8f3yRZb/ZuFO+Usg1ewbKqQZDXwVjfK3hu\nHxa3IDKjNzgGTwoOlGHTXF6sn2hELkN5sDGLQvFZwcAc76TMeiCHuQqRfOl0ITnkcky9jKjf\nsCe5qusbmX4yoJkwxdYoSFtzBaI9RPofWzpiNMgodUi0iKlMJ7ZlF9Fi6okVmKAfSzkfE1Uh\ng5wXWp1XiIede/FoxxmVr171Gqn/TWj5d6HQdVbTfdA7R57nvKaJb6cYWcZEuRSP6VM3dH1O\n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\nXZnrwlnBDKFzxuIgeP4TgvS2iVpY87ScydRWo/Qee2TApkNHr/rGmcGGk5AD6B80XqNKu1N1\nmizqHDZWGapWi/dwhVCt1nxDHlS+6csj1XjaOYxvw4+3vHvk8y0iUYfxbewbW/4+8lk2VcM4\njPChTUATetiTe9AjCLd2ipEQY8+VsEcQbm0nmpAStaM+gnBrzxkJJdvhRXloY9KErkMfWZT/\nbff6Pm91tLfGqeAb3kpeqLdiEE3o+T6CBUNR7GAHYY96yA0YxiGJ7IiS5/fWXNxzVmuo/jet\nVd3JHzRA9UVpZFbmw2gZCZIkMB1kx3GEGCEO8mMTbp3EdIkbxJ4fwmFdJwU1FEXFWXG16PiH\nhVAl3JAW7MJGX4mo5Gl9q0BxYnpTk8JUY+dOUZDD0+/lrtYbaxqp5XXFOS9UcZTA3SOBC75l\nxhhh6oUIuxQu/a5LwjAJWWDaz6+4megGyf21SDuYOq26PTep71Hd05aa6lKfl0XOjfeL6nKr\n4O4LLXgY0TC0sIUc23Nh0TGGaGKZyGI+DSwWyLX3/AXvyxzmbGfN9xziHuU0VsBIApOOKPMi\nZNnERmEMdsNsHER+QlkQurdO08uS1pDdoQbz9cs/v3z98u8TuIt66P9F9ayraNROGPoujmCR\nhhZhiMQ+RQFzYSCOTUgUekFkJ1I7rUXuawdeHqadtrnmXdsU6g9kyxzls0zl7Y5Qjzq+S/yx\nTING7rKVhT+X44dn2b1L2w9LJZJK7e+RetVKYQ7QO4gcu/7H/OQ/AAAA//8DAFBLAwQUAAYA\nCAAAACEAKfej/YYFAAAnFwAAIQAAAHBwdC9zbGlkZUxheW91dHMvc2xpZGVMYXlvdXQ5Lnht\nbMxY627bNhj9P2DvIHi/WfMmkQqaFLqxGJa2wZI9gCrJsVDdJtGus6JAX2t7nD7JSEqyrSZp\n3dQp8sek5I9H38dzeEjp+YtNWVjrrO3yujqdoWdwZmVVUqd5dX06++tKAD6zOhlXaVzUVXY6\nu8m62YuzX3953px0RXoe39QraSmMqjuJT2dLKZuT+bxLllkZd8/qJqvUf4u6LWOpLtvredrG\n7xV2WcwxhM68jPNqNoxvDxlfLxZ5koV1siqzSvYgbVbEUuXfLfOmG9GaQ9CaNusUjBk9TUne\nNKraJk+uNjPLhLVrdQPNzlTlyWWRWlVcqhsXeSJXbWa9z+XSCuJGI5mYrrlqs0z3qvXLtrls\n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\nG/8DAAD//wMAUEsDBBQABgAIAAAAIQDV0ZLxvAAAADcBAAAsAAAAcHB0L3NsaWRlTGF5b3V0\ncy9fcmVscy9zbGlkZUxheW91dDcueG1sLnJlbHOMz70KwjAQB/Bd8B3C7Satg4g0dRHBwUX0\nAY7k2gbbJOSi6Nub0YKD4339/lyzf02jeFJiF7yGWlYgyJtgne813K7H1RYEZ/QWx+BJw5sY\n9u1y0VxoxFyOeHCRRVE8axhyjjul2Aw0IcsQyZdJF9KEuZSpVxHNHXtS66raqPRtQDszxclq\nSCdbg7i+I/1jh65zhg7BPCby+UeE4tFZOiNnSoXF1FPWIOV3f7ZUyxIBqm3U7N32AwAA//8D\nAFBLAwQUAAYACAAAACEA1dGS8bwAAAA3AQAALAAAAHBwdC9zbGlkZUxheW91dHMvX3JlbHMv\nc2xpZGVMYXlvdXQ2LnhtbC5yZWxzjM+9CsIwEAfwXfAdwu0mrYOINHURwcFF9AGO5NoG2yTk\noujbm9GCg+N9/f5cs39No3hSYhe8hlpWIMibYJ3vNdyux9UWBGf0FsfgScObGPbtctFcaMRc\njnhwkUVRPGsYco47pdgMNCHLEMmXSRfShLmUqVcRzR17Uuuq2qj0bUA7M8XJakgnW4O4viP9\nY4euc4YOwTwm8vlHhOLRWTojZ0qFxdRT1iDld3+2VMsSAapt1Ozd9gMAAP//AwBQSwMEFAAG\nAAgAAAAhANXRkvG8AAAANwEAAC0AAABwcHQvc2xpZGVMYXlvdXRzL19yZWxzL3NsaWRlTGF5\nb3V0MTEueG1sLnJlbHOMz70KwjAQB/Bd8B3C7Satg4g0dRHBwUX0AY7k2gbbJOSi6Nub0YKD\n4339/lyzf02jeFJiF7yGWlYgyJtgne813K7H1RYEZ/QWx+BJw5sY9u1y0VxoxFyOeHCRRVE8\naxhyjjul2Aw0IcsQyZdJF9KEuZSpVxHNHXtS66raqPRtQDszxclqSCdbg7i+I/1jh65zhg7B\nPCby+UeE4tFZOiNnSoXF1FPWIOV3f7ZUyxIBqm3U7N32AwAA//8DAFBLAwQUAAYACAAAACEA\n1dGS8bwAAAA3AQAALAAAAHBwdC9zbGlkZUxheW91dHMvX3JlbHMvc2xpZGVMYXlvdXQ1Lnht\nbC5yZWxzjM+9CsIwEAfwXfAdwu0mrYOINHURwcFF9AGO5NoG2yTkoujbm9GCg+N9/f5cs39N\n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\nUEsDBAoAAAAAAAAAIQB++5PdIjsAACI7AAAXAAAAZG9jUHJvcHMvdGh1bWJuYWlsLmpwZWf/\n2P/gABBKRklGAAEBAABgAGAAAP/hAIxFeGlmAABNTQAqAAAACAAFARIAAwAAAAEAAQAAARoA\nBQAAAAEAAABKARsABQAAAAEAAABSASgAAwAAAAEAAgAAh2kABAAAAAEAAABaAAAAAAAAAGAA\nAAABAAAAYAAAAAEAA6ABAAMAAAABAAEAAKACAAQAAAABAAABAKADAAQAAAABAAAAkAAAAAD/\n7QA4UGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAAA4QklNBCUAAAAAABDUHYzZjwCyBOmACZjs\n+EJ+/8AAEQgAkAEAAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkK\nC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHw\nJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3\neHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY\n2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkK\nC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1Lw\nFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2\nd3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW\n19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/bAEMAAgICAgICAwICAwUDAwMFBgUFBQUGCAYGBgYG\nCAoICAgICAgKCgoKCgoKCgwMDAwMDA4ODg4ODw8PDw8PDw8PD//bAEMBAgICBAQEBwQEBxAL\nCQsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEP/d\nAAQAEP/aAAwDAQACEQMRAD8A/VLStQ1UaXZi7+IOnajOIY/MuY9WMaTvtG6VUSIqoc/MFUkA\n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\nACEAPy0ZnhoBAABnBAAAHwAAAAAAAAAAAAAAAAB3IQAAcHB0L19yZWxzL3ByZXNlbnRhdGlv\nbi54bWwucmVsc1BLAQItABQABgAIAAAAIQDmBgyKqQIAAJQNAAAUAAAAAAAAAAAAAAAAANYj\nAABwcHQvcHJlc2VudGF0aW9uLnhtbFBLAQItABQABgAIAAAAIQDV0ZLxvAAAADcBAAAsAAAA\nAAAAAAAAAAAAALEmAABwcHQvc2xpZGVMYXlvdXRzL19yZWxzL3NsaWRlTGF5b3V0Mi54bWwu\ncmVsc1BLAQItABQABgAIAAAAIQDV0ZLxvAAAADcBAAAsAAAAAAAAAAAAAAAAALcnAABwcHQv\nc2xpZGVMYXlvdXRzL19yZWxzL3NsaWRlTGF5b3V0OS54bWwucmVsc1BLAQItABQABgAIAAAA\nIQAFqW8lAgUAAH4SAAAhAAAAAAAAAAAAAAAAAL0oAABwcHQvc2xpZGVMYXlvdXRzL3NsaWRl\nTGF5b3V0MS54bWxQSwECLQAUAAYACAAAACEAxl1xRFUEAACJDwAAIQAAAAAAAAAAAAAAAAD+\nLQAAcHB0L3NsaWRlTGF5b3V0cy9zbGlkZUxheW91dDIueG1sUEsBAi0AFAAGAAgAAAAhANL4\nxdZCBQAAXhUAACEAAAAAAAAAAAAAAAAAkjIAAHBwdC9zbGlkZUxheW91dHMvc2xpZGVMYXlv\ndXQzLnhtbFBLAQItABQABgAIAAAAIQCQY9+RsgQAAMMTAAAhAAAAAAAAAAAAAAAAABM4AABw\ncHQvc2xpZGVMYXlvdXRzL3NsaWRlTGF5b3V0NC54bWxQSwECLQAUAAYACAAAACEARQzozhMG\nAABVHwAAIQAAAAAAAAAAAAAAAAAEPQAAcHB0L3NsaWRlTGF5b3V0cy9zbGlkZUxheW91dDUu\neG1sUEsBAi0AFAAGAAgAAAAhACZirfXdAwAAFAwAACEAAAAAAAAAAAAAAAAAVkMAAHBwdC9z\nbGlkZUxheW91dHMvc2xpZGVMYXlvdXQ2LnhtbFBLAQItABQABgAIAAAAIQC2P2JBhgMAAPYJ\nAAAhAAAAAAAAAAAAAAAAAHJHAABwcHQvc2xpZGVMYXlvdXRzL3NsaWRlTGF5b3V0Ny54bWxQ\nSwECLQAUAAYACAAAACEAT6qY8rgFAAB4FwAAIQAAAAAAAAAAAAAAAAA3SwAAcHB0L3NsaWRl\nTGF5b3V0cy9zbGlkZUxheW91dDgueG1sUEsBAi0AFAAGAAgAAAAhACn3o/2GBQAAJxcAACEA\nAAAAAAAAAAAAAAAALlEAAHBwdC9zbGlkZUxheW91dHMvc2xpZGVMYXlvdXQ5LnhtbFBLAQIt\nABQABgAIAAAAIQAvntaPcAQAAMAPAAAiAAAAAAAAAAAAAAAAAPNWAABwcHQvc2xpZGVMYXlv\ndXRzL3NsaWRlTGF5b3V0MTAueG1sUEsBAi0AFAAGAAgAAAAhAOybF5amBAAAoBAAACIAAAAA\nAAAAAAAAAAAAo1sAAHBwdC9zbGlkZUxheW91dHMvc2xpZGVMYXlvdXQxMS54bWxQSwECLQAU\nAAYACAAAACEA1dGS8bwAAAA3AQAALAAAAAAAAAAAAAAAAACJYAAAcHB0L3NsaWRlTGF5b3V0\ncy9fcmVscy9zbGlkZUxheW91dDgueG1sLnJlbHNQSwECLQAUAAYACAAAACEA55ZNI6UCAABn\nBgAAHwAAAAAAAAAAAAAAAACPYQAAcHB0L25vdGVzU2xpZGVzL25vdGVzU2xpZGUxLnhtbFBL\nAQItABQABgAIAAAAIQDV0ZLxvAAAADcBAAAsAAAAAAAAAAAAAAAAAHFkAABwcHQvc2xpZGVM\nYXlvdXRzL19yZWxzL3NsaWRlTGF5b3V0Ny54bWwucmVsc1BLAQItABQABgAIAAAAIQDV0ZLx\nvAAAADcBAAAsAAAAAAAAAAAAAAAAAHdlAABwcHQvc2xpZGVMYXlvdXRzL19yZWxzL3NsaWRl\nTGF5b3V0Ni54bWwucmVsc1BLAQItABQABgAIAAAAIQDV0ZLxvAAAADcBAAAtAAAAAAAAAAAA\nAAAAAH1mAABwcHQvc2xpZGVMYXlvdXRzL19yZWxzL3NsaWRlTGF5b3V0MTEueG1sLnJlbHNQ\nSwECLQAUAAYACAAAACEA1dGS8bwAAAA3AQAALAAAAAAAAAAAAAAAAACEZwAAcHB0L3NsaWRl\nTGF5b3V0cy9fcmVscy9zbGlkZUxheW91dDUueG1sLnJlbHNQSwECLQAUAAYACAAAACEA1dGS\n8bwAAAA3AQAALAAAAAAAAAAAAAAAAACKaAAAcHB0L3NsaWRlTGF5b3V0cy9fcmVscy9zbGlk\nZUxheW91dDQueG1sLnJlbHNQSwECLQAUAAYACAAAACEAaaJfIRUBAADHBwAALAAAAAAAAAAA\nAAAAAACQaQAAcHB0L3NsaWRlTWFzdGVycy9fcmVscy9zbGlkZU1hc3RlcjEueG1sLnJlbHNQ\nSwECLQAUAAYACAAAACEAIbVAvg4IAABsNgAAIQAAAAAAAAAAAAAAAADvagAAcHB0L3NsaWRl\nTWFzdGVycy9zbGlkZU1hc3RlcjEueG1sUEsBAi0AFAAGAAgAAAAhANXRkvG8AAAANwEAACwA\nAAAAAAAAAAAAAAAAPHMAAHBwdC9zbGlkZUxheW91dHMvX3JlbHMvc2xpZGVMYXlvdXQzLnht\nbC5yZWxzUEsBAi0AFAAGAAgAAAAhANXRkvG8AAAANwEAACwAAAAAAAAAAAAAAAAAQnQAAHBw\ndC9zbGlkZUxheW91dHMvX3JlbHMvc2xpZGVMYXlvdXQxLnhtbC5yZWxzUEsBAi0AFAAGAAgA\nAAAhANXRkvG8AAAANwEAAC0AAAAAAAAAAAAAAAAASHUAAHBwdC9zbGlkZUxheW91dHMvX3Jl\nbHMvc2xpZGVMYXlvdXQxMC54bWwucmVsc1BLAQItABQABgAIAAAAIQBKr3U50gAAAL8BAAAq\nAAAAAAAAAAAAAAAAAE92AABwcHQvbm90ZXNTbGlkZXMvX3JlbHMvbm90ZXNTbGlkZTEueG1s\nLnJlbHNQSwECLQAUAAYACAAAACEAJk6X9LsFAACNHQAAIQAAAAAAAAAAAAAAAABpdwAAcHB0\nL25vdGVzTWFzdGVycy9ub3Rlc01hc3RlcjEueG1sUEsBAi0AFAAGAAgAAAAhAFuVnrEZBwAA\nEyIAABQAAAAAAAAAAAAAAAAAY30AAHBwdC90aGVtZS90aGVtZTEueG1sUEsBAi0ACgAAAAAA\nAAAhAH77k90iOwAAIjsAABcAAAAAAAAAAAAAAAAAroQAAGRvY1Byb3BzL3RodW1ibmFpbC5q\ncGVnUEsBAi0AFAAGAAgAAAAhAFuVnrEZBwAAEyIAABQAAAAAAAAAAAAAAAAABcAAAHBwdC90\naGVtZS90aGVtZTIueG1sUEsBAi0AFAAGAAgAAAAhALTPWBm5AAAAJAEAACwAAAAAAAAAAAAA\nAAAAUMcAAHBwdC9ub3Rlc01hc3RlcnMvX3JlbHMvbm90ZXNNYXN0ZXIxLnhtbC5yZWxzUEsB\nAi0AFAAGAAgAAAAhAAAO1iyoAQAAYAMAABEAAAAAAAAAAAAAAAAAU8gAAHBwdC9wcmVzUHJv\ncHMueG1sUEsBAi0AFAAGAAgAAAAhANj9jY+sAAAAtgAAABMAAAAAAAAAAAAAAAAAKsoAAHBw\ndC90YWJsZVN0eWxlcy54bWxQSwECLQAUAAYACAAAACEAwJdBJmEBAAD4AgAAEQAAAAAAAAAA\nAAAAAAAHywAAcHB0L3ZpZXdQcm9wcy54bWxQSwECLQAUAAYACAAAACEARUvpyF8BAACuAgAA\nEQAAAAAAAAAAAAAAAACXzAAAZG9jUHJvcHMvY29yZS54bWxQSwECLQAUAAYACAAAACEA1ekE\nqxcCAAA2BQAAEAAAAAAAAAAAAAAAAAAtzwAAZG9jUHJvcHMvYXBwLnhtbFBLBQYAAAAAKgAq\nAN0MAAB60gAAAAA=","type":"binary"},{"name":"global.R","content":"## Load all libraries\nlibrary(shiny)\nlibrary(bslib)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(devtools)\nlibrary(zoo)\nlibrary(svglite)\nlibrary(shinyjs)\ndevtools::load_all(\"R\")\n\n## Source all modules\nmodules <- list.files(\"modules\", pattern = \"_module.R\", full.names = TRUE)\nsapply(modules, source)\n\n## Set options\noptions(shiny.maxRequestSize = 100 * 1024^2) # Increase file size for uploads\n\n## Global functions\n# Workaround for Chromium Issue 468227\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n","type":"text"},{"name":"modules/batch_analysis_module.R","content":"batch_analysis_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Render selection of data source buttons\n    uiOutput(ns(\"data_source_radio\")),\n\n    # Render button to process data\n    actionButton(ns(\"process_batch\"), \"Process batch growth data\"),\n\n    # Render radio button for showing of removing points in plot\n    uiOutput(ns(\"UserPointRemoval\")),\n\n    # Let the user define what a high mu is using a slide\n    uiOutput(ns(\"UserHighMuPercentage\")),\n\n    # Let the user define the smoothing of the spline\n    uiOutput(ns(\"UserSplineSmoothing\")),\n\n    # Render plot of growth data\n    plotOutput(ns(\"plot_batch_growth\")),\n\n    # Render plot of growth rate data\n    plotOutput(ns(\"growth_rate_plot\")),\n\n    # Render download options for plots\n    downloadButton(\n      ns(\"download_growth_plot\"),\n      \"Download Growth Plot\"\n    ),\n    downloadButton(\n      ns(\"download_growth_rate_plot\"),\n      \"Download Growth Rate Plot\"\n    ),\n\n    # Render summary table and download button\n    downloadButton(ns(\"download_table\"), \"Download Summarised Data\"),\n    tableOutput(ns(\"summary_table\")),\n\n    # Allow download of full spline dataset\n    downloadButton(\n      ns(\"download_raw_table\"),\n      label = \"Download Full Growth Data fit\"\n    )\n  )\n}\n\nbatch_analysis_server <- function(\n  id,\n  calibrated_od_data_list,\n  raw_od_data_list\n) {\n  moduleServer(id, function(input, output, session) {\n    # Observe process button\n    process_batch <- eventReactive(input$process_batch, {\n      # Start progress bar\n      withProgress(message = \"Start processing batch data\", value = 0, {\n        return(TRUE)\n      })\n    })\n    observe(message(paste(\n      \"[batch_analysis_server] - Start processing as batch:\",\n      process_batch()\n    )))\n\n    # Set data to be used for analysis\n    od_data_list <- reactive({\n      req(\n        process_batch(),\n        !is.null(calibrated_od_data_list()) | !is.null(raw_od_data_list())\n      )\n\n      withProgress(message = \"Loading data\", value = 0.2, {\n        message(\n          \"[batch_analysis_server] - input$data_source:\",\n          input$data_source\n        )\n        if (input$data_source == \"calibrated\") {\n          message(\n            \"[batch_analysis_server] - Using calibrated data for batch analysis\"\n          )\n          return(calibrated_od_data_list())\n        } else {\n          message(\"[batch_analysis_server] - Using raw data for batch analysis\")\n          return(raw_od_data_list())\n        }\n      })\n    })\n\n    # Isolate appropriate od readings depending on user choise\n    od_data <- reactive({\n      req(od_data_list())\n\n      withProgress(message = \"Prepping data\", value = 0.3, {\n        message(\"[batch_analysis_server] - Isolating OD readings\")\n        if (input$data_source == \"calibrated\") {\n          od_data <- calibrated_od_data_list()[[\"calibrated_data\"]]\n        } else {\n          od_data <- raw_od_data_list()[[\"filtered_data\"]][[\n            \"pioreactor_OD_data_wide\"\n          ]]\n        }\n\n        return(od_data)\n      })\n    })\n\n    # Identify outliers and insert into od_data_list\n    od_data_list_outlier_detected <- reactive({\n      withProgress(message = \"Detecting outliers\", value = 0.4, {\n        message(\"[batch_analysis_server] - detecting outliers\")\n        req(od_data())\n\n        od_data_list_outlier_detected <- od_data_list()\n\n        od_data_list_outlier_detected[[\n          \"outliers\"\n        ]] <- iqr_outlier_detection(od_data())\n\n        return(od_data_list_outlier_detected)\n      })\n    })\n\n    od_data_list_neg_corrected <- reactive({\n      req(od_data_list_outlier_detected())\n      message(\"[batch_analysis_server] - correcting negative values\")\n\n      withProgress(message = \"Correcting negative measurement\", value = 0.5, {\n        od_data_list_neg_corrected <- od_data_list_outlier_detected()\n\n        od_data_list_neg_corrected[[\n          \"negative_corrected\"\n        ]] <- correct_neg_data_median(\n          od_data(),\n          od_data_list_neg_corrected[[\"outliers\"]]\n        )\n\n        return(od_data_list_neg_corrected)\n      })\n    })\n\n    fitted_spline_data <- reactive({\n      req(od_data_list_neg_corrected())\n      message(\"[batch_analysis_server] - Fit splines\")\n\n      withProgress(message = \"Fitting growth curves\", value = 0.6, {\n        fitted_spline_data_return <- od_data_list_neg_corrected()\n\n        fitted_spline_data_return[[\"spline_data\"]] <- spline_growth_integration(\n          fitted_spline_data_return,\n          spline_smoothing = input$spline_smoothing\n        )\n\n        return(fitted_spline_data_return)\n      })\n    })\n\n    # Summarise growth data\n    summarised_growth_data <- reactive({\n      req(fitted_spline_data())\n\n      summarise_growth_data(\n        fitted_spline_data(),\n        input$high_mu_percentage / 100\n      )\n    })\n\n    #### Plot output ####\n    ## Let the user turn of points in growth plot\n    output$UserPointRemoval <- renderUI({\n      user_point_removal(session$ns, input$remove_points)\n    })\n\n    # Plot the growth data with a spline coloured by growth rate\n    output$plot_batch_growth <- renderPlot(\n      {\n        req(fitted_spline_data(), input$remove_points)\n        message(\"[batch_analysis_server] - Plotting growth data\")\n        withProgress(message = \"Creating plot\", value = 0.9, {\n          plot_growth_data(\n            fitted_spline_data(),\n            remove_points = input$remove_points\n          )\n        })\n      },\n      res = 96\n    )\n\n    # Plot the growth rate over time coloured by growth rate\n    output$growth_rate_plot <- renderPlot(\n      {\n        plot_growth_rate_data(fitted_spline_data(), summarised_growth_data())\n      },\n      res = 96\n    )\n\n    # Allow download of growth plot and growth rate plot\n    output$download_growth_plot <- downloadHandler(\n      filename = function() {\n        \"Growth_plot.svg\"\n      },\n      content = function(file) {\n        ggsave(\n          file,\n          plot_growth_data(\n            fitted_spline_data(),\n            remove_points = input$remove_points\n          ),\n          device = 'svg',\n          width = 33,\n          height = 19,\n          units = 'cm'\n        )\n      }\n    )\n\n    output$download_growth_rate_plot <- downloadHandler(\n      filename = function() {\n        \"Growth_rate_plot.svg\"\n      },\n      content = function(file) {\n        ggsave(\n          file,\n          plot_growth_rate_data(\n            fitted_spline_data(),\n            summarised_growth_data()\n          ),\n          device = 'svg',\n          width = 33,\n          height = 19,\n          units = 'cm'\n        )\n      }\n    )\n\n    #### UI output ####\n    # Find the data sources available\n    output$data_source_radio <- renderUI({\n      choices <- create_data_source_choices(\n        raw_data = raw_od_data_list(),\n        calibrated_data = calibrated_od_data_list()\n      )\n\n      # Only render if there are choices available\n      if (length(choices) > 0) {\n        radioButtons(\n          inputId = session$ns(\"data_source\"),\n          label = \"Select data source\",\n          choices = choices,\n          selected = choices[1] # Default to first available option\n        )\n      }\n    })\n\n    # Render a slider for high mu selection\n    output$UserHighMuPercentage <- renderUI({\n      high_mu_range_slider(\n        session$ns,\n        input$high_mu_percentage\n      )\n    })\n\n    # Render slider for setting spline smoothing\n    output$UserSplineSmoothing <- renderUI({\n      smoothing_slider(\n        session$ns,\n        input$spline_smoothing\n      )\n    })\n\n    # Render summary table of growth data\n    output$summary_table <- renderTable(summarised_growth_data())\n\n    # Enable download of summarised growth data\n    output$download_table <- downloadHandler(\n      filename = function() {\n        \"Summaried_growth_rate_data.csv\"\n      },\n      content = function(file) {\n        write.table(\n          summarised_growth_data(),\n          file,\n          row.names = F,\n          col.names = T,\n          sep = \",\"\n        )\n      }\n    )\n\n    # Enable download of full spline dataset\n    output$download_raw_table <- downloadHandler(\n      ## TODO - RE-ADD\n      filename = function() {\n        \"Raw_growth_rate_data_batch.csv\"\n      },\n      content = function(file) {\n        write.table(\n          fitted_spline_data()[[\"spline_data\"]],\n          file,\n          row.names = F,\n          col.names = T,\n          sep = \",\"\n        )\n      }\n    )\n  })\n}\n","type":"text"},{"name":"modules/calibration_module.R","content":"calibration_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Upload of calibration value csv\n    fileInput(\n      ns(\"upload_calibration_file\"),\n      label = \"Manual OD measurments table\",\n      accept = c(\".csv\", \".txt\")\n    ),\n\n    # Fixed intercept input box\n    checkboxInput(\n      inputId = ns(\"fixed_intercept\"),\n      label = \"Force intercept through origin\",\n      value = FALSE\n    ),\n\n    # Origin point addition option\n    uiOutput(ns(\"zero_point_box\")),\n\n    # Add in the x_pio_ods_box ui input\n    uiOutput(ns(\"x_pio_ods_box\")),\n\n    # Add downlload button for calibrated data\n    uiOutput(ns(\"download_button_ui\")),\n\n    # Add sliders for plot height and width\n    sliderInput(\n      ns(\"height\"),\n      \"Plot height\",\n      min = 250,\n      max = 1000,\n      value = 500\n    ),\n    sliderInput(ns(\"width\"), \"Plot width\", min = 250, max = 1000, value = 500),\n\n    # Add plot of linear calibration regression models\n    plotOutput(ns(\"zero_intercept_plot\")),\n    plotOutput(ns(\"no_pio_values_plot\"))\n  )\n}\n\ncalibration_server <- function(id, od_data_list) {\n  moduleServer(id, function(input, output, session) {\n    # Look for upload of manual calibration file and calibrate ods\n    complete_od_data <- reactive({\n      req(input$upload_calibration_file, od_data_list())\n      message(paste(\n        \"[calibration_server] - Upload calibration file:\",\n        input$upload_calibration_file$datapath\n      ))\n\n      # Read the manual OD readings file\n      manual_od_readings <- read_manual_ods(\n        input$upload_calibration_file$datapath\n      )\n\n      # Filter manual readings based on filtering strategy\n      filtered_manual_od <- filter_manual_ods(\n        manual_od_readings,\n        od_data_list()\n      )\n\n      # Pass manual OD readings to calibration function\n      complete_od_data <- no_pio_ods_check(\n        filtered_manual_od,\n        od_data_list(),\n        input$x_pio_ods\n      )\n\n      return(complete_od_data)\n    })\n\n    calibration_models <- reactive({\n      req(complete_od_data())\n      # Split OD data per reactor\n      manual_lm_models <- split_od_per_reactor(\n        complete_od_data(),\n        as.logical(input$fixed_intercept),\n        input$origin_point\n      )\n\n      # Return the calibrated data\n      return(manual_lm_models)\n    })\n\n    calibrated_data <- reactive({\n      req(calibration_models())\n      # Require both inputs and validate they're not NULL\n      req(input$upload_calibration_file, od_data_list())\n\n      predict_calibrated_ods(calibration_models(), od_data_list())\n    })\n\n    formatted_calibration_data <- reactive({\n      req(od_data_list(), !is.null(calibrated_data()))\n\n      data_list <- format_calibrated_od_data(od_data_list(), calibrated_data())\n      return(data_list)\n    })\n\n    # Look at the fixed intercept option and render UI for zero point addition\n    observeEvent(calibration_models(), {\n      message(paste(\n        \"[calibration_server] - Fixed intercept:\",\n        input$fixed_intercept\n      ))\n    })\n    output$zero_point_box <- renderUI({\n      # Wait for raw data and filtering information\n      req(!input$fixed_intercept)\n      # if intercept is not set to fixed give option for origin point\n      origin_point_box(session$ns)\n    })\n\n    observe({\n      req(od_data_list())\n      message(paste(\n        \"[calibration_server] - Add point through origin of calibration:\",\n        input$origin_point\n      ))\n    })\n\n    observe({\n      req(od_data_list())\n      message(paste(\n        \"[calibration_server] - Number of ods from pio for calibration:\",\n        input$x_pio_ods\n      ))\n    })\n\n    # Render origin selection box\n    output$x_pio_ods_box <- renderUI({\n      # if intercept is not set to fixed give option for origin point\n      ui_num_od_read(session$ns)\n    })\n\n    ##### Plots #####\n    # Plot the points that are used for calibration of the pio reactors\n    output$zero_intercept_plot <- renderPlot(\n      {\n        first_last_od_plot(complete_od_data(), input$x_pio_ods)\n      },\n      res = 96,\n      width = function() input$width,\n      height = function() input$height\n    )\n\n    # Plot the regressions underlying the calibration\n    output$no_pio_values_plot <- renderPlot(\n      {\n        req(!is.null(calibration_models()))\n        if (length(input$fixed_intercept) == 0) {\n          ggplot()\n        } else {\n          calibration_plot(\n            calibration_models(),\n            as.logical(input$fixed_intercept),\n            input$origin_point\n          )\n        }\n      },\n      res = 96,\n      width = function() input$width,\n      height = function() input$height\n    )\n\n    #### Downloads ####\n    # Download handler for calibrated data\n    output$download_table <- downloadHandler(\n      filename = function() {\n        \"Calibrated_OD_reading.csv\"\n      },\n      content = function(file) {\n        write.table(\n          write_calibrate_od_to_pio_format(calibrated_data()),\n          file,\n          row.names = FALSE,\n          col.names = TRUE,\n          sep = \",\",\n          na = \"\",\n          quote = FALSE\n        )\n      }\n    )\n\n    # Render download button\n    output$download_button_ui <- renderUI({\n      req(!is.null(calibrated_data()))\n      downloadButton(\n        session$ns(\"download_table\"),\n        label = \"Download calibrated data\"\n      )\n      # }\n    })\n\n    return(reactive({\n      message(\"[calibration_server] - RETURN: try od_data_list\")\n      tryCatch(\n        {\n          result <- formatted_calibration_data()\n          if (is.null(result)) return(NULL)\n          result\n        },\n        error = function(e) {\n          message(\n            \"[calibration_server] - RETURN: od_data_list failed - returning NULL\"\n          )\n          NULL\n        }\n      )\n    }))\n  })\n}\n","type":"text"},{"name":"modules/filter_reactor_module.R","content":"filter_reactors_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    radioButtons(\n      ns(\"filt_strat\"),\n      label = \"Filtering strategy\",\n      choices = c(\"Remove\", \"Keep\")\n    ),\n    uiOutput(ns(\"UserFilters\"))\n  )\n}\n\nfilter_reactors_server <- function(id, read_data) {\n  moduleServer(id, function(input, output, session) {\n    # Render the input selection for reactors\n    output$UserFilters <- renderUI({\n      user_pio_selection(read_data(), input$reactor_selection, session$ns)\n    })\n\n    # Make list of filtering information for plotting\n    filter_return_list <- reactive({\n      req(read_data())\n      # Message for tracking\n      message(paste(\n        \"[filter_reactors_server] - input$reactor_selection:\",\n        paste(input$reactor_selection, collapse = \", \")\n      ))\n      message(paste(\n        \"[filter_reactors_server] - input$filt_strat:\",\n        input$filt_strat\n      ))\n\n      # Filter dataframe of reactors\n      filtered_data <- filter_reactors(\n        pioreactor_data = read_data(),\n        pios_of_interest = input$reactor_selection,\n        filt_strat = input$filt_strat\n      )\n\n      # Formate the raw data, filtered data, and filtering strategy in a list\n      filter_return_list <- format_filter_return(\n        read_data(),\n        filtered_data,\n        input$reactor_selection,\n        input$filt_strat\n      )\n\n      return(filter_return_list)\n    })\n\n    # Return the formatted data list\n    return(reactive({\n      message(\"[filter_reactors_server] - RETURN: try od_data_list\")\n      result <- filter_return_list()\n\n      print(paste(\"is.null(result)\", is.null(result)))\n      if (is.null(result)) {\n        return(NULL)\n      } else {\n        message(\"[filter_reactors_server] - RETURN: od_data_list succeeded\")\n        return(result)\n      }\n      #   tryCatch(\n      #     {\n      #       result <- filter_return_list()\n      #       print(result)\n      #       print(paste(\"is.null(result)\", is.null(result)))\n      #       if (is.null(result)) {\n      #         return(NULL)\n      #       } else {\n      #         message(\"[filter_reactors_server] - RETURN: od_data_list succeeded\")\n      #         return(result)\n      #       }\n      #     },\n      #     error = function(e) {\n      #       message(\n      #         \"[filter_reactors_server] - RETURN: od_data_list failed - returning NULL\"\n      #       )\n      #       NULL\n      #     }\n      #   )\n    }))\n  })\n}\n","type":"text"},{"name":"modules/plot_raw_module.R","content":"plot_raw_data_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    plotOutput(ns(\"raw_data_plot\"), height = \"400px\")\n  )\n}\n\nplot_raw_server <- function(id, read_data, filter_data) {\n  moduleServer(id, function(input, output, session) {\n    output$raw_data_plot <- renderPlot({\n      # Wait for raw data and filtering information\n      req(read_data(), filter_data())\n\n      filter_strategy <- filter_data()$filtering_state$filtering_strategy\n      reactors_selected <- filter_data()$filtering_state$reactors_selected\n\n      # Return messages for tracking\n      message(paste(\n        \"[plot_raw_server] - Filtering strategy:\",\n        filter_strategy\n      ))\n      message(paste(\n        \"[plot_raw_server] - Reactors selected:\",\n        paste(reactors_selected, collapse = \", \")\n      ))\n\n      # Plot the raw data indicating filtering of reactors\n      plot_raw_data(read_data(), reactors_selected, filter_strategy)\n    })\n  })\n}\n","type":"text"},{"name":"modules/read_data_module.R","content":"read_data_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    fileInput(\n      ns(\"upload\"),\n      label = \"Load PioReactor OD_readings csv file\",\n      accept = c(\".csv\", \".txt\")\n    ),\n    textOutput(ns(\"status\")) # Add status text output\n  )\n}\n\nread_data_server <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    message(\"[read_data_server] - Starting read_data_server module\")\n\n    # Create a reactive value to store status\n    status <- reactiveVal(\"No file loaded\")\n\n    # Observe the uploading of file and read it\n    read_data <- reactive({\n      req(input$upload)\n\n      # Update status and show notification\n      status(\"Processing file...\")\n\n      status(paste(\"File loaded:\", input$upload$name))\n      showNotification(\n        paste(\"Successfully loaded:\", input$upload$name),\n        type = \"message\"\n      )\n\n      paste(\"Pioreactor input OD file:\", input$upload$datapath)\n\n      ## Read the data from the uploaded file\n      message(\"[read_data_server] - Reading data from file\")\n      raw_od_data_list <- raw_pio_od_data_to_wide_frame(input$upload$datapath)\n\n      message(\"[read_data_server] - END\")\n      return(raw_od_data_list)\n    })\n\n    # Render the status text\n    output$status <- renderText({\n      status()\n    })\n\n    reactive(message(\"[read_data_server] - Ending read_data_server module\"))\n    return(read_data)\n  })\n}\n","type":"text"},{"name":"modules/turbidostat_analysis_module.R","content":"##### Turbidostat analysis ui #####\nturbidostat_analysis_ui <- function(id) {\n  ns <- NS(id)\n  useShinyjs()\n  tagList(\n    # Render selection of data source buttons\n    uiOutput(ns(\"data_source_radio\")),\n\n    # Add Event Dosing Data upload\n    fileInput(\n      ns(\"dosing_event_upload\"),\n      label = \"Load PioReactor dosing_automation_events csv file\",\n      accept = c(\".csv\", \".txt\")\n    ),\n    # textOutput(ns(\"status\")) # Add status text output\n\n    # Render button to process data\n    br(),\n    actionButton(\n      ns(\"process_turbidostat_btn\"),\n      \"Process turbidostat growth data\",\n      class = \"btn-primary\"\n    ),\n\n    # Add download buttons\n    br(),\n    downloadButton(\n      ns(\"download_table\"),\n      \"Download Summary Data\",\n      class = \"btn-success\"\n    ),\n    downloadButton(\n      ns(\"download_raw_table\"),\n      \"Download Raw Spline Data\",\n      class = \"btn-info\"\n    ),\n\n    # Add table output for summary data\n    br(),\n    tableOutput(ns(\"summary_table\"))\n  )\n}\n\n##### Turbidostat analysis server #####\nturbidostat_analysis_server <- function(\n  id,\n  calibrated_od_data_list,\n  raw_od_data_list\n) {\n  moduleServer(id, function(input, output, session) {\n    ##### Control availability of process button based on upload of files #####\n    # Reactive expression to check if both files are uploaded\n    files_uploaded <- reactive({\n      print(\"file upload check\")\n      # req(\n      #   !is.null(raw_od_data_list()[[\"file_path\"]]) &\n      #     !is.null(input$dosing_event_upload)\n      # )\n      print(\"File upload check pass req()\")\n      !is.null(raw_od_data_list()[[\"file_path\"]]) & # OD readings file\n        !is.null(input$dosing_event_upload) # Dosing event file\n    })\n\n    # Enable/disable button based on file upload status\n    observe({\n      # TODO - fully make this botton's reactive/disable state work or switch for a small \"state\" text output giving uploaded and missing files.\n      req(raw_od_data_list())\n      message(\"[turbidostat_analysis_server] - Checking if files are uploaded\")\n      if (files_uploaded()) {\n        message(\"[turbidostat_analysis_server] -  - Files are uploaded\")\n        shinyjs::enable(session$ns(\"process_turbidostat_btn\"))\n      } else {\n        message(\"[turbidostat_analysis_server] -  - Files NOT uploaded\")\n        shinyjs::disable(session$ns(\"process_turbidostat_btn\"))\n      }\n    })\n\n    # Observe process button\n    process_turbidostat <- eventReactive(input$process_turbidostat_btn, {\n      # Start progress bar\n      withProgress(message = \"Start processing turbidostat data\", value = 0, {\n        return(TRUE)\n      })\n    })\n\n    ##### Preprocess data #####\n    observe(message(paste(\n      \"[turbidostat_analysis_server] - Start processing as turbidostat:\",\n      process_turbidostat()\n    )))\n\n    # Set data to be used for analysis\n    od_data_list <- reactive({\n      req(\n        process_turbidostat(),\n        !is.null(input$dosing_event_upload),\n        !is.null(calibrated_od_data_list()) | !is.null(raw_od_data_list())\n      )\n\n      withProgress(message = \"Loading data\", value = 0.2, {\n        message(\n          \"[turbidostat_analysis_server] - input$data_source:\",\n          input$data_source\n        )\n        if (input$data_source == \"calibrated\") {\n          message(\n            \"[turbidostat_analysis_server] - \n            Using calibrated data for turbidostat analysis\"\n          )\n          return(calibrated_od_data_list())\n        } else {\n          message(\n            \"[turbidostat_analysis_server] - Using raw data for turbidostat analysis\"\n          )\n          return(raw_od_data_list())\n        }\n      })\n    })\n\n    # Isolate appropriate od readings depending on user choise\n    od_data <- reactive({\n      req(od_data_list())\n\n      withProgress(message = \"Prepping data\", value = 0.3, {\n        message(\"[turbidostat_analysis_server] - Isolating OD readings\")\n        if (input$data_source == \"calibrated\") {\n          od_data <- od_data_list()[[\"calibrated_data\"]]\n        } else {\n          od_data <- od_data_list()[[\"filtered_data\"]]\n        }\n        message(\"[turbidostat_analysis_server] - Isolating OD readings - END\")\n\n        return(od_data)\n      })\n    })\n\n    # Identify outliers and insert into od_data_list\n    od_data_list_outlier_detected <- reactive({\n      withProgress(message = \"Detecting outliers\", value = 0.4, {\n        req(od_data())\n        message(\"[turbidostat_analysis_server] - detecting outliers\")\n\n        od_data_list_outlier_detected <- od_data_list()\n\n        # Run IQR outlier detection\n        od_data_list_outlier_detected[[\n          \"outliers\"\n        ]] <- iqr_outlier_detection(od_data())\n\n        # Run Spline outlier detection\n        od_data_list_outlier_detected[[\n          \"outliers\"\n        ]] <- spline_outlier_detection(\n          od_data(),\n          od_data_list_outlier_detected[[\"outliers\"]]\n        )\n\n        return(od_data_list_outlier_detected)\n      })\n    })\n\n    od_data_list_neg_corrected <- reactive({\n      req(od_data_list_outlier_detected())\n      message(\"[turbidostat_analysis_server] - Correcting negative values\")\n\n      withProgress(message = \"Correcting negative measurement\", value = 0.5, {\n        od_data_list_neg_corrected <- od_data_list_outlier_detected()\n\n        od_data_list_neg_corrected[[\n          \"negative_corrected\"\n        ]] <- correct_neg_data_median(\n          od_data(),\n          od_data_list_neg_corrected[[\"outliers\"]]\n        )\n\n        return(od_data_list_neg_corrected)\n      })\n    })\n\n    # # Run growth analysis for turbidostat data\n    # spline_peak_data <- reactive({\n    #   peak_detection_spline_workflow(\n    #     od_data_list_neg_corrected()[[\"negative_corrected\"]],\n    #     od_data_list_neg_corrected()[[\"outliers\"]]\n    #   )\n    # })\n\n    # observe({\n    #   spline_peak_data()\n    # })\n\n    ## Search and read the dilution event data\n    od_dilution_event_data <- reactive({\n      req(!is.null(od_data_list_neg_corrected()))\n      message(\"[turbidostat_analysis_server] - reading dilution event data\")\n\n      message(\n        \"[turbidostat_analysis_server] - uploaded dosing_event_upload:\",\n        input$dosing_event_upload\n      )\n\n      withProgress(message = \"Reading dilution event data\", value = 0.6, {\n        od_dilution_event_data <- od_data_list_neg_corrected()\n\n        od_dilution_event_data[[\n          \"dosing_event_data\"\n        ]] <- read_dosing_automation_events_data(\n          od_data_list_neg_corrected()[[\"file_path\"]],\n          input$dosing_event_upload$datapath\n        )\n      })\n\n      return(od_dilution_event_data)\n    })\n\n    od_data_split_turbidostat <- reactive({\n      req(od_dilution_event_data())\n\n      od_reactor_data_split <- od_dilution_event_data()\n\n      ## Split turbidostat data into individual growth curves\n      message(\"[turbidostat_analysis_server] - splitting turbidostat data\")\n      od_reactor_data_split[[\n        \"split_turbidostat_data\"\n      ]] <- split_turbidostat_data(\n        od_reactor_data_split[[\"negative_corrected\"]],\n        od_reactor_data_split[[\"dosing_event_data\"]],\n        od_reactor_data_split[[\"outliers\"]]\n      )\n\n      return(od_reactor_data_split)\n    })\n\n    spline_fitted_growths <- reactive(\n      {\n        req(od_data_split_turbidostat())\n        message(\n          \"[turbidostat_analysis_server] - Fitting spline to turbidostat data\"\n        )\n        withProgress(\n          message = \"Fitting spline to turbidostat data\",\n          value = 0.7,\n          {\n            # Loop through each split data and fit spline\n            message(\n              \"[turbidostat_analysis_server] - Fitting spline to each growth phase\"\n            )\n            fitted_spline_data <- lapply(\n              od_data_split_turbidostat()[[\"split_turbidostat_data\"]],\n              function(x) {\n                spline_growth_integration_turbidostat(\n                  x,\n                  spline_smoothing = 1.0,\n                  reactor_name = names(x)[1]\n                )\n              }\n            )\n\n            # Combine all fitted data into a single data frame\n            # do.call(rbind, fitted_spline_data)\n            return(fitted_spline_data)\n          }\n        )\n      }\n      # tt <- sapply(\n      #   1:length(od_data_split_turbidostat()[[\"split_turbidostat_data\"]]),\n      #   function(x) {\n      #     spline_growth_integration_turbidostat(\n      #       od_data_split_turbidostat()[[\"split_turbidostat_data\"]][[x]],\n      #       reactor_name = names(od_data_split_turbidostat()[[\n      #         \"split_turbidostat_data\"\n      #       ]])[x]\n      #     )\n      #   }\n      # )\n    )\n\n    summarised_growth_data <- reactive({\n      req(spline_fitted_growths())\n      message(\"[turbidostat_analysis_server] - Summarising growth data\")\n\n      summarise_growth_list_turbidostat(\n        spline_fitted_growths(),\n        plot_data = T\n      )\n    })\n\n    ##### Plot output #####\n    # ## Let the user turn of points in growth plot\n    # output$UserPointRemoval <- renderUI({\n    #   user_point_removal(session$ns, input$remove_points)\n    # })\n\n    # Plot the growth data with a spline coloured by growth rate\n\n    # Plot the growth rate over time as points and insecurity\n\n    # # Allow download of growth plot and growth rate plot\n\n    ##### UI output #####\n    # Find the data sources available\n    output$data_source_radio <- renderUI({\n      choices <- create_data_source_choices(\n        raw_data = raw_od_data_list(),\n        calibrated_data = calibrated_od_data_list()\n      )\n\n      # Only render if there are choices available\n      if (length(choices) > 0) {\n        radioButtons(\n          inputId = session$ns(\"data_source\"),\n          label = \"Select data source\",\n          choices = choices,\n          selected = choices[1] # Default to first available option\n        )\n      }\n    })\n\n    # # Render a slider for high mu selection\n    # output$UserHighMuPercentage <- renderUI({\n    #   high_mu_range_slider(\n    #     session$ns,\n    #     input$high_mu_percentage\n    #   )\n    # })\n\n    # # Render slider for setting spline smoothing\n    # output$UserSplineSmoothing <- renderUI({\n    #   smoothing_slider(\n    #     session$ns,\n    #     input$spline_smoothing\n    #   )\n    # })\n\n    # Render summary table of growth data\n    output$summary_table <- renderTable(summarised_growth_data())\n\n    # Enable download of summarised growth data\n    output$download_table <- downloadHandler(\n      filename = function() {\n        \"Summaried_growth_rate_data.csv\"\n      },\n      content = function(file) {\n        write.table(\n          summarised_growth_data(),\n          file,\n          row.names = F,\n          col.names = T,\n          sep = \",\"\n        )\n      }\n    )\n\n    # Enable download of full spline dataset\n    output$download_raw_table <- downloadHandler(\n      ## TODO - RE-ADD\n      filename = function() {\n        \"Raw_growth_rate_data_turbidostat.csv\"\n      },\n      content = function(file) {\n        write.table(\n          do.call(\"rbind.data.frame\", spline_fitted_growths()),\n          file,\n          row.names = F,\n          col.names = T,\n          sep = \",\"\n        )\n      }\n    )\n  })\n}\n","type":"text"},{"name":"tests/testthat/Data/raw_pio_od_data_to_wide_frame/Invalid_format_missing_timestamp.csv","content":"experiment,pioreactor_unit,od_reading,angle,channel\nEXP008B,P01,0.030844269838709075,90,2\nEXP008B,P08,0.013910403571556209,90,2\nEXP008B,P01,0.03903061335145758,90,2\nEXP008B,P08,0.010423610922424062,90,2\nEXP008B,P01,0.03644280535352644,90,2\nEXP008B,P08,0.015492488075822278,90,2\nEXP008B,P01,0.03295820956821572,90,2\nEXP008B,P08,0.014390687294958154,90,2\nEXP008B,P01,0.025428794983625363,90,2\nEXP008B,P08,0.016996424662701917,90,2\nEXP008B,P01,0.03472531850992283,90,2\nEXP008B,P08,0.01654550298376795,90,2","type":"text"},{"name":"tests/testthat/Data/raw_pio_od_data_to_wide_frame/Invalid_format_missing_unit.csv","content":"timestamp_localtime,experiment,timestamp,od_reading,angle,channel\n2024-02-12 12:00:59,EXP008B,2024-02-12T11:00:59.744976Z,0.030844269838709075,90,2\n2024-02-12 12:01:14,EXP008B,2024-02-12T11:01:14.856411Z,0.013910403571556209,90,2\n2024-02-12 12:01:30,EXP008B,2024-02-12T11:01:30.053009Z,0.03903061335145758,90,2\n2024-02-12 12:01:45,EXP008B,2024-02-12T11:01:45.128608Z,0.010423610922424062,90,2\n2024-02-12 12:02:00,EXP008B,2024-02-12T11:02:00.350740Z,0.03644280535352644,90,2\n2024-02-12 12:02:15,EXP008B,2024-02-12T11:02:15.431978Z,0.015492488075822278,90,2\n2024-02-12 12:02:30,EXP008B,2024-02-12T11:02:30.653099Z,0.03295820956821572,90,2\n2024-02-12 12:02:45,EXP008B,2024-02-12T11:02:45.734918Z,0.014390687294958154,90,2\n2024-02-12 12:03:00,EXP008B,2024-02-12T11:03:00.957737Z,0.025428794983625363,90,2\n2024-02-12 12:03:16,EXP008B,2024-02-12T11:03:16.037513Z,0.016996424662701917,90,2\n2024-02-12 12:03:31,EXP008B,2024-02-12T11:03:31.260243Z,0.03472531850992283,90,2\n2024-02-12 12:03:46,EXP008B,2024-02-12T11:03:46.340838Z,0.01654550298376795,90,2","type":"text"},{"name":"tests/testthat/Data/raw_pio_od_data_to_wide_frame/Two_reactor_test_read.csv","content":"timestamp_localtime,experiment,pioreactor_unit,timestamp,od_reading,angle,channel\n2024-02-12 12:00:59,EXP008B,P01,2024-02-12T11:00:59.744976Z,0.030844269838709075,90,2\n2024-02-12 12:01:14,EXP008B,P08,2024-02-12T11:01:14.856411Z,0.013910403571556209,90,2\n2024-02-12 12:01:30,EXP008B,P01,2024-02-12T11:01:30.053009Z,0.03903061335145758,90,2\n2024-02-12 12:01:45,EXP008B,P08,2024-02-12T11:01:45.128608Z,0.010423610922424062,90,2\n2024-02-12 12:02:00,EXP008B,P01,2024-02-12T11:02:00.350740Z,0.03644280535352644,90,2\n2024-02-12 12:02:15,EXP008B,P08,2024-02-12T11:02:15.431978Z,0.015492488075822278,90,2\n2024-02-12 12:02:30,EXP008B,P01,2024-02-12T11:02:30.653099Z,0.03295820956821572,90,2\n2024-02-12 12:02:45,EXP008B,P08,2024-02-12T11:02:45.734918Z,0.014390687294958154,90,2\n2024-02-12 12:03:00,EXP008B,P01,2024-02-12T11:03:00.957737Z,0.025428794983625363,90,2\n2024-02-12 12:03:16,EXP008B,P08,2024-02-12T11:03:16.037513Z,0.016996424662701917,90,2\n2024-02-12 12:03:31,EXP008B,P01,2024-02-12T11:03:31.260243Z,0.03472531850992283,90,2\n2024-02-12 12:03:46,EXP008B,P08,2024-02-12T11:03:46.340838Z,0.01654550298376795,90,2","type":"text"},{"name":"tests/testthat/Data/read_dosing_automation_events_data/Empty_Pio-Experiment-od_readings.csv","content":"timestamp_localtime,experiment,pioreactor_unit,timestamp,od_reading,angle,channel\n","type":"text"},{"name":"tests/testthat/Data/read_dosing_automation_events_data/Long_Pio-Experiment-od_readings.csv","content":"timestamp_localtime,experiment,pioreactor_unit,timestamp,od_reading,angle,channel\r\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P06,2025-01-22T15:56:50.081164Z,0.0038327735069875893,90,2\r\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P07,2025-01-22T15:56:50.112385Z,0.010395128905874105,90,2\r\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P08,2025-01-22T15:56:50.142742Z,0.007034277594813298,90,2\r\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P10,2025-01-22T15:56:50.661903Z,0.007747286857259724,90,2\r\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P06,2025-01-22T15:57:20.378134Z,0.004334507930606381,90,2\r\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P07,2025-01-22T15:57:20.409514Z,0.009092048955405031,90,2\r\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P08,2025-01-22T15:57:20.440482Z,0.0072907316506161755,90,2\r\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P10,2025-01-22T15:57:20.958609Z,0.007458783837856321,90,2\r\n2025-01-22 16:57:50,CNx018-2-Pio-Experiment,P06,2025-01-22T15:57:50.680258Z,0.004019263022248574,90,2\r\n2025-01-22 16:57:50,CNx018-2-Pio-Experiment,P07,2025-01-22T15:57:50.713353Z,0.00999649027692936,90,2\r\n2025-01-22 16:57:50,CNx018-2-Pio-Experiment,P08,2025-01-22T15:57:50.742905Z,0.007520902299870572,90,2\r\n2025-01-22 16:57:51,CNx018-2-Pio-Experiment,P10,2025-01-22T15:57:51.261471Z,0.006553141679536304,90,2\r\n2025-01-22 16:58:20,CNx018-2-Pio-Experiment,P06,2025-01-22T15:58:20.988639Z,0.004176643671903528,90,2\r\n2025-01-22 16:58:21,CNx018-2-Pio-Experiment,P07,2025-01-22T15:58:21.016324Z,0.009610974545951423,90,2\r\n2025-01-22 16:58:21,CNx018-2-Pio-Experiment,P08,2025-01-22T15:58:21.045662Z,0.007031142752220009,90,2\r\n2025-01-22 16:58:21,CNx018-2-Pio-Experiment,P10,2025-01-22T15:58:21.564858Z,0.007348895066236148,90,2\r\n2025-01-22 16:58:51,CNx018-2-Pio-Experiment,P06,2025-01-22T15:58:51.286328Z,0.004069123558556147,90,2\r\n2025-01-22 16:58:51,CNx018-2-Pio-Experiment,P07,2025-01-22T15:58:51.320389Z,0.010415571498987069,90,2\r\n2025-01-22 16:58:51,CNx018-2-Pio-Experiment,P08,2025-01-22T15:58:51.349187Z,0.006769432399198892,90,2\r\n2025-01-22 16:58:51,CNx018-2-Pio-Experiment,P10,2025-01-22T15:58:51.868229Z,0.006374295018772994,90,2\r\n","type":"text"},{"name":"tests/testthat/Data/read_dosing_automation_events_data/No_DilutionEvent_Pio-Experiment-dosing_automation_events.csv","content":"timestamp_localtime,experiment,pioreactor_unit,timestamp,event_name,message,data\r\n2025-01-23 08:27:48,CNx018-2-Pio-Experiment,P06,2025-01-23T07:27:48.425702Z,NotADilutionEvent,Latest OD = 0.10 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09576787366720665, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 10:54:48,CNx018-2-Pio-Experiment,P06,2025-01-23T09:54:48.285075Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.0900975015079348, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 14:52:33,CNx018-2-Pio-Experiment,P06,2025-01-23T13:52:33.433277Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09045624776368483, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 18:18:49,CNx018-2-Pio-Experiment,P07,2025-01-23T17:18:49.133415Z,NotADilutionEvent,Latest OD = 0.24 ≥ Target OD = 0.23; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.23977769965283938, \"\"target_od\"\": 0.23, \"\"volume\"\": 7.5}\"\r\n2025-01-23 18:19:19,CNx018-2-Pio-Experiment,P10,2025-01-23T17:19:19.984252Z,NotADilutionEvent,Latest OD = 0.18 ≥ Target OD = 0.17; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.17618632862076883, \"\"target_od\"\": 0.17, \"\"volume\"\": 7.5}\"\r\n2025-01-23 18:41:18,CNx018-2-Pio-Experiment,P06,2025-01-23T17:41:18.419224Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09008345334867653, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 22:49:03,CNx018-2-Pio-Experiment,P06,2025-01-23T21:49:03.228606Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09057597822208503, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-24 00:25:19,CNx018-2-Pio-Experiment,P10,2025-01-23T23:25:19.832941Z,NotADilutionEvent,Latest OD = 0.17 ≥ Target OD = 0.17; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.17030903133498776, \"\"target_od\"\": 0.17, \"\"volume\"\": 7.5}\"\r\n2025-01-24 00:43:15,CNx018-2-Pio-Experiment,P08,2025-01-23T23:43:15.686229Z,NotADilutionEvent,Latest OD = 0.10 ≥ Target OD = 0.08; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09619160182609718, \"\"target_od\"\": 0.08, \"\"volume\"\": 7.5}\"\r\n2025-01-24 02:09:34,CNx018-2-Pio-Experiment,P07,2025-01-24T01:09:34.149175Z,NotADilutionEvent,Latest OD = 0.23 ≥ Target OD = 0.23; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.2319349246324131, \"\"target_od\"\": 0.23, \"\"volume\"\": 7.5}\"\r\n2025-01-24 03:18:03,CNx018-2-Pio-Experiment,P06,2025-01-24T02:18:03.435568Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09129141831263146, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-24 06:21:46,CNx018-2-Pio-Experiment,P08,2025-01-24T05:21:46.409012Z,NotADilutionEvent,Latest OD = 0.08 ≥ Target OD = 0.08; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.08062094438577114, \"\"target_od\"\": 0.08, \"\"volume\"\": 7.5}\"\r\n2025-01-24 08:33:48,CNx018-2-Pio-Experiment,P06,2025-01-24T07:33:48.235834Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.0900458798091848, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-24 09:37:19,CNx018-2-Pio-Experiment,P10,2025-01-24T08:37:19.870855Z,NotADilutionEvent,Latest OD = 0.17 ≥ Target OD = 0.17; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.1716619891149327, \"\"target_od\"\": 0.17, \"\"volume\"\": 7.5}\"\r\n2025-01-24 14:30:03,CNx018-2-Pio-Experiment,P06,2025-01-24T13:30:03.264299Z,NotADilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09080691897926785, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n","type":"text"},{"name":"tests/testthat/Data/read_dosing_automation_events_data/Pio-Experiment-dosing_automation_events.csv","content":"timestamp_localtime,experiment,pioreactor_unit,timestamp,event_name,message,data\r\n2025-01-23 08:27:48,CNx018-2-Pio-Experiment,P06,2025-01-23T07:27:48.425702Z,DilutionEvent,Latest OD = 0.10 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09576787366720665, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 10:54:48,CNx018-2-Pio-Experiment,P06,2025-01-23T09:54:48.285075Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.0900975015079348, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 14:52:33,CNx018-2-Pio-Experiment,P06,2025-01-23T13:52:33.433277Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09045624776368483, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 18:18:49,CNx018-2-Pio-Experiment,P07,2025-01-23T17:18:49.133415Z,DilutionEvent,Latest OD = 0.24 ≥ Target OD = 0.23; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.23977769965283938, \"\"target_od\"\": 0.23, \"\"volume\"\": 7.5}\"\r\n2025-01-23 18:19:19,CNx018-2-Pio-Experiment,P10,2025-01-23T17:19:19.984252Z,DilutionEvent,Latest OD = 0.18 ≥ Target OD = 0.17; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.17618632862076883, \"\"target_od\"\": 0.17, \"\"volume\"\": 7.5}\"\r\n2025-01-23 18:41:18,CNx018-2-Pio-Experiment,P06,2025-01-23T17:41:18.419224Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09008345334867653, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-23 22:49:03,CNx018-2-Pio-Experiment,P06,2025-01-23T21:49:03.228606Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09057597822208503, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-24 00:25:19,CNx018-2-Pio-Experiment,P10,2025-01-23T23:25:19.832941Z,DilutionEvent,Latest OD = 0.17 ≥ Target OD = 0.17; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.17030903133498776, \"\"target_od\"\": 0.17, \"\"volume\"\": 7.5}\"\r\n2025-01-24 00:43:15,CNx018-2-Pio-Experiment,P08,2025-01-23T23:43:15.686229Z,DilutionEvent,Latest OD = 0.10 ≥ Target OD = 0.08; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09619160182609718, \"\"target_od\"\": 0.08, \"\"volume\"\": 7.5}\"\r\n2025-01-24 02:09:34,CNx018-2-Pio-Experiment,P07,2025-01-24T01:09:34.149175Z,DilutionEvent,Latest OD = 0.23 ≥ Target OD = 0.23; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.2319349246324131, \"\"target_od\"\": 0.23, \"\"volume\"\": 7.5}\"\r\n2025-01-24 03:18:03,CNx018-2-Pio-Experiment,P06,2025-01-24T02:18:03.435568Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09129141831263146, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-24 06:21:46,CNx018-2-Pio-Experiment,P08,2025-01-24T05:21:46.409012Z,DilutionEvent,Latest OD = 0.08 ≥ Target OD = 0.08; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.08062094438577114, \"\"target_od\"\": 0.08, \"\"volume\"\": 7.5}\"\r\n2025-01-24 08:33:48,CNx018-2-Pio-Experiment,P06,2025-01-24T07:33:48.235834Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.0900458798091848, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n2025-01-24 09:37:19,CNx018-2-Pio-Experiment,P10,2025-01-24T08:37:19.870855Z,DilutionEvent,Latest OD = 0.17 ≥ Target OD = 0.17; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.1716619891149327, \"\"target_od\"\": 0.17, \"\"volume\"\": 7.5}\"\r\n2025-01-24 14:30:03,CNx018-2-Pio-Experiment,P06,2025-01-24T13:30:03.264299Z,DilutionEvent,Latest OD = 0.09 ≥ Target OD = 0.09; cycled 7.50 mL,\"{\"\"latest_od\"\": 0.09080691897926785, \"\"target_od\"\": 0.09, \"\"volume\"\": 7.5}\"\r\n","type":"text"},{"name":"tests/testthat/Data/read_dosing_automation_events_data/Short_Pio-Experiment-od_readings.csv","content":"timestamp_localtime,experiment,pioreactor_unit,timestamp,od_reading,angle,channel\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P06,2025-01-22T15:56:50.081164Z,0.0038327735069875893,90,2\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P07,2025-01-22T15:56:50.112385Z,0.010395128905874105,90,2\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P08,2025-01-22T15:56:50.142742Z,0.007034277594813298,90,2\n2025-01-22 16:56:50,CNx018-2-Pio-Experiment,P10,2025-01-22T15:56:50.661903Z,0.007747286857259724,90,2\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P06,2025-01-22T15:57:20.378134Z,0.004334507930606381,90,2\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P07,2025-01-22T15:57:20.409514Z,0.009092048955405031,90,2\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P08,2025-01-22T15:57:20.440482Z,0.0072907316506161755,90,2\n2025-01-22 16:57:20,CNx018-2-Pio-Experiment,P10,2025-01-22T15:57:20.958609Z,0.007458783837856321,90,2\n2025-01-22 16:57:50,CNx018-2-Pio-Experiment,P06,2025-01-22T15:57:50.680258Z,0.004019263022248574,90,2\n2025-01-22 16:57:50,CNx018-2-Pio-Experiment,P07,2025-01-22T15:57:50.713353Z,0.00999649027692936,90,2\n2025-01-22 16:57:50,CNx018-2-Pio-Experiment,P08,2025-01-22T15:57:50.742905Z,0.007520902299870572,90,2\n2025-01-22 16:57:51,CNx018-2-Pio-Experiment,P10,2025-01-22T15:57:51.261471Z,0.006553141679536304,90,2\n2025-01-22 16:58:20,CNx018-2-Pio-Experiment,P06,2025-01-22T15:58:20.988639Z,0.004176643671903528,90,2\n2025-01-22 16:58:21,CNx018-2-Pio-Experiment,P07,2025-01-22T15:58:21.016324Z,0.009610974545951423,90,2","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/additional_manual_column.csv","content":"manual,manual,name,pio\n0.05,0.05,P13,0.01\n1.00,1.00,P13,0.01\n0.05,0.05,P14,0.01\n1.00,1.00,P14,0.01\n0.05,0.05,P15,0.01\n1.00,1.00,P15,0.01\n0.05,0.05,P16,0.01\n1.00,1.00,P16,0.01\n0.05,0.05,P17,0.01\n1.00,1.00,P17,0.01\n0.05,0.05,P20,0.01\n1.00,1.00,P20,0.01","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/additional_name_column.csv","content":"manual,name,name,pio\n0.05,P13,P13,0.01\n1.00,P13,P13,0.01\n0.05,P14,P14,0.01\n1.00,P14,P14,0.01\n0.05,P15,P15,0.01\n1.00,P15,P15,0.01\n0.05,P16,P16,0.01\n1.00,P16,P16,0.01\n0.05,P17,P17,0.01\n1.00,P17,P17,0.01\n0.05,P20,P20,0.01\n1.00,P20,P20,0.01","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/back_compatability_using_reactor_column.csv","content":"manual,reactor,pio\r\n0.05,P13,0.01\r\n1.00,P13,0.01\r\n0.05,P14,0.01\r\n1.00,P14,0.01\r\n0.05,P15,0.01\r\n1.00,P15,0.01\r\n0.05,P16,0.01\r\n1.00,P16,0.01\r\n0.05,P17,0.01\r\n1.00,P17,0.01\r\n0.05,P20,0.01\r\n1.00,P20,0.01","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/indifference_in_column_order.csv","content":"manual,name,pio\n0.05,P13,0.01\n1.00,P13,0.01\n0.05,P14,0.01\n1.00,P14,0.01\n0.05,P15,0.01\n1.00,P15,0.01\n0.05,P16,0.01\n1.00,P16,0.01\n0.05,P17,0.01\n1.00,P17,0.01\n0.05,P20,0.01\n1.00,P20,0.01","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/missing_manual.csv","content":"name,pio\r\nP13,0.01\r\nP13,0.01\r\nP14,0.01\r\nP14,0.01\r\nP15,0.01\r\nP15,0.01\r\nP16,0.01\r\nP16,0.01\r\nP17,0.01\r\nP17,0.01\r\nP20,0.01\r\nP20,0.01","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/missing_name.csv","content":"manual,pio\r\n0.05,0.01\r\n1.00,0.01\r\n0.05,0.01\r\n1.00,0.01\r\n0.05,0.01\r\n1.00,0.01\r\n0.05,0.01\r\n1.00,0.01\r\n0.05,0.01\r\n1.00,0.01\r\n0.05,0.01\r\n1.00,0.01","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/missing_pio.csv","content":"manual,name\r\n0.05,P13\r\n1.00,P13\r\n0.05,P14\r\n1.00,P14\r\n0.05,P15\r\n1.00,P15\r\n0.05,P16\r\n1.00,P16\r\n0.05,P17\r\n1.00,P17\r\n0.05,P20\r\n1.00,P20","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/test_manual_od_file.csv","content":"name,pio,manual\r\nP13,0.01,0.05\r\nP13,0.01,1.00\r\nP14,0.01,0.05\r\nP14,0.01,1.00\r\nP15,0.01,0.05\r\nP15,0.01,1.00\r\nP16,0.01,0.05\r\nP16,0.01,1.00\r\nP17,0.01,0.05\r\nP17,0.01,1.00\r\nP20,0.01,0.05\r\nP20,0.01,1.00","type":"text"},{"name":"tests/testthat/Data/read_manual_ods/unrelated_column_test.csv","content":"manual,name,pio,test_column\n0.05,P13,0.01,NA\n1.00,P13,0.01,NA\n0.05,P14,0.01,NA\n1.00,P14,0.01,NA\n0.05,P15,0.01,NA\n1.00,P15,0.01,NA\n0.05,P16,0.01,NA\n1.00,P16,0.01,NA\n0.05,P17,0.01,NA\n1.00,P17,0.01,NA\n0.05,P20,0.01,NA\n1.00,P20,0.01,NA","type":"text"},{"name":"tests/testthat/Rplots.pdf","content":"JVBERi0xLjQKJYHigeOBz4HTXHIKMSAwIG9iago8PAovQ3JlYXRpb25EYXRlIChEOjIwMjUw\nMzI1MTI0ODE4KQovTW9kRGF0ZSAoRDoyMDI1MDMyNTEyNDgxOCkKL1RpdGxlIChSIEdyYXBo\naWNzIE91dHB1dCkKL1Byb2R1Y2VyIChSIDQuNC4zKQovQ3JlYXRvciAoUikKPj4KZW5kb2Jq\nCjIgMCBvYmoKPDwgL1R5cGUgL0NhdGFsb2cgL1BhZ2VzIDMgMCBSID4+CmVuZG9iago3IDAg\nb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMyAwIFIgL0NvbnRlbnRzIDggMCBSIC9SZXNv\ndXJjZXMgNCAwIFIgPj4KZW5kb2JqCjggMCBvYmoKPDwKL0xlbmd0aCAxMTM3IC9GaWx0ZXIg\nL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nKVXS4tVRxDen19Rywix7fdjq8SAYCCZC1mIiFwV\nHe6NmAn491PPPn2HUWdwMY+vqr6q6q7q6j4BXkCAa/iy/QlfoAznM7TkcoYcsmsRUguuRPj3\nPfwN/2xPbv76/Sk8u9q8897D+vvq2R8obQW+bq9eg4d3W4AX+HO9BTKAlxsA+moeYuwudzgv\nguFGhRbdCBBTcKFDyy57A0cyLa73qW0u7DwF7JVNVVDdGMaLxbXpVQCbSkzVajbCW3M9bldo\nHHBLUoNYh+uZ8zcJGqeIqLiCsdBpyYia883Qka27K2XXD9cWriDxLdYq6S6Vya24tt23ILGW\n2KbXTJW75q1rKeghQcqd9uq8SoYrA1F3sUAq3nWPCHNJhjheDS7Gqa/R5Z1riH2LtUqqq3Fy\nc6FqmG9BbK2xTa95Cfcib13LGFSrjL0RdS0mia4OiN5TlXNKbmBJfSS3iihe9Mn1sesLuZ5c\nRexbrEWCzYfnw7jYJ2X3LUisJbZILC/hXuYta4k5cq1GoA07rxJsVYyXE9d5ZBcSosJ9IIjj\n4TZRn5i+cQ8ZVxH7FmuRdDxIZXJ7p4KYb0FiLbFNL3kZd81b19IL18oH6snzKolUy9gr15m2\nMCNq3AeCOB66pj5R/fDcQ8o1FOwEqCTiptZi3Dg6DTP1rUh8c+yp57wmd81b1pJio1rRnxx4\nLVPSqWv4D+aavAuB/2AfKKJ4CYuMfTL1iXrIuIbYt1irpLiRJjfiRN59C2Jrja16y0u4F3nr\n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\nuGh3WjIKwy6bfZ8QKe0VrgQkMt6/SRC4EBJCSWMSFK6Evfm+HwSBC4EaCVQJIyhcCehsxuFC\n4ULQdRlhXea6icvOvVw2tGATd+qQc+RNfImS+tAZ/Kc8lkI9s+rDk/XU+JQq+vAM/wk7oUkQ\nnuE+oxqHofKne6erZpfon7N4uqKSZvDhff2iumwFP0DVmmawYNtxbZ8tEQz+6qSqfnZJSRkJ\nHx0usiYBfnj/1/uf//jt7ZcuvnvCQiO3Fwm3WY337KRp52nfkfHBiyLS5fmvF4V+zelX5Pwu\n4i+d8za/W/hr4bzN3p87bmDrcblrPW+zB+XO77zNXqvIIc1+hTsQHJr1E3yLn7d5b/JNeKab\ncPsHj8b2D2VuZHN0cmVhbQplbmRvYmoKMTUgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVu\ndCAzIDAgUiAvQ29udGVudHMgMTYgMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjE2\nIDAgb2JqCjw8Ci9MZW5ndGggMTAyNSAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0K\neJylmE1vFEcQhu/zK/oYRFx0ffTX1QgHIQWJeKUcEEKWvSBb2I69oCj/nurZsXd2wku8yoEV\n3U93zUx1Vddb5vAmcLgKd8O7cBdSo2ihKJkFY6MiQQtTknC/Dn+Gm75oOF4NLzZ//HYczjdD\npBhjmP9uzm+GFyfqRlefgpuYwPZnO2ZTyjVYbmQprK7DL68vN19vP9+fXYfbT+Hi7OvZx9vL\n978G+RCOwuavL5c364+3F8/C6mp4tRqffyLTA2TxgHEs0Yhb4No/oNs/xOTMztHMvP+35SAa\nqebR5sn9+u7b+ub8nwcj3Tdbx7w8/YFjTl++9dmSwt/D+w8hhouBwxv/dzXw+IDfh+zv2ybv\nX7v/G3Gehl9COF3w7ShnkgmzVqrlkU/D2QKJlZo9LpiG8wXFz593C7bD2QI1n9m9wjScLdh7\n6cdvmC14SvD89GxtG5ylB2U/hiMPz/VRbE+PDmalxPsm4oEmqpuocxOpm+B4QIym0l2zM+Fs\n/TweYEGlkOjMwsHvoK2Qzj2xcMT2Oqj+mOiHuR2Zch+Oh7ngTPVhNMPThgc+3/+EtDOmkoO7\ne8q6H37dT/eau2nazLNU/e+7bhanVUqY/45x+n9SvRhZnHwlVP0obLwa79dDOB7KOD+jccdq\n7DkJmE9AlihDVskQa35cgpi/M2TZPYVYo6yAcRQyDFMPeQTrLhz/Bd3zFUMvSBjmHiIINpKE\noHgsYmhUMSyUM4JegwxDJcEwU8RwrBcoJtmzKRe011cahj5dseHkayvam3wGw9R1BIIe1A3B\n7FGNofWqhmCmhnKTXdEUCItQwjD1mxjBSgyhXwgNQ6WCYe63HYKNFMImxBgaNZijXnEKghIj\nJQyVFMNMjHJ00jkAshcJDI0SylFhL54QSiTG0LUkhmmseABWShB6ZVUMXRLj7Ba/GRpKYFEP\nawhNuhSChs0DG+WomAc2hH4vNAy1q18EPbAx9MCGMAuuvJJTHyBY+gyAJVLGUBfVd9+BxcUz\nSuFJoQNYGZdgqUYZw0IGYYtYEUhTijBLW6KKYcWiQCPjGqze7QmGBYsCjQ3XYHUlmTFMvXdF\nsGJRoMK4BquMQhfBjEWBSsMVWNXDGkMPawzLQhTMoUVcf7U3ahjmhSTYgw3XX+1dBIYe1BgW\nLAg0R1KUoZqVGMOEBYH2Jh3l59htYGhYEKg3CLD+qt8JDUJvEQqGCQsC9SYB1l/1LoEx1IUg\n2Lvg1DuF/Qq8wI0SSmDzZkExTFgUmN8LsAYbj90bgopFgXmzAGvw9NcQ9KXmN0ODe71dgLKg\nt7gJZal5u6AY6kIW7MGEK7B5u1Ag9GYhYWi4Aps3C4yhhzaE3ipASWC9VcAN97vhO/4dGldl\nbmRzdHJlYW0KZW5kb2JqCjE3IDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMyAwIFIg\nL0NvbnRlbnRzIDE4IDAgUiAvUmVzb3VyY2VzIDQgMCBSID4+CmVuZG9iagoxOCAwIG9iago8\nPAovTGVuZ3RoIDEwMjUgL0ZpbHRlciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnicpZhNbxRH\nEIbv8yv6GERcdH3019UIByEFiXilHBBClr0gW9iOvaAo/57q2bF3dsJLvMqBFd1Pd81MdVXX\nW+bwJnC4CnfDu3AXUqNooSiZBWOjIkELU5Jwvw5/hpu+aDheDS82f/x2HM43Q6QYY5j/bs5v\nhhcn6kZXn4KbmMD2ZztmU8o1WG5kKayuwy+vLzdfbz/fn12H20/h4uzr2cfby/e/BvkQjsLm\nry+XN+uPtxfPwupqeLUan38i0wNk8YBxLNGIW+DaP6DbP8TkzM7RzLz/t+UgGqnm0ebJ/fru\n2/rm/J8HI903W8e8PP2BY05fvvXZksLfw/sPIYaLgcMb/3c18PiA34fs79sm71+7/xtxnoZf\nQjhd8O0oZ5IJs1aq5ZFPw9kCiZWaPS6YhvMFxc+fdwu2w9kCNZ/ZvcI0nC3Ye+nHb5gteErw\n/PRsbRucpQdlP4YjD8/1UWxPjw5mpcT7JuKBJqqbqHMTqZvgeECMptJdszPhbP08HmBBpZDo\nzMLB76CtkM49sXDE9jqo/pjoh7kdmXIfjoe54Ez1YTTD04YHPt//hLQzppKDu3vKuh9+3U/3\nmrtp2syzVP3vu24Wp1VKmP+Ocfp/Ur0YWZx8JVT9KGy8Gu/XQzgeyjg/o3HHauw5CZhPQJYo\nQ1bJEGt+XIKYvzNk2T2FWKOsgHEUMgxTD3kE6y4c/wXd8xVDL0gY5h4iCDaShKB4LGJoVDEs\nlDOCXoMMQyXBMFPEcKwXKCbZsykXtNdXGoY+XbHh5Gsr2pt8BsPUdQSCHtQNwexRjaH1qoZg\npoZyk13RFAiLUMIw9ZsYwUoMoV8IDUOlgmHutx2CjRTCJsQYGjWYo15xCoISIyUMlRTDTIxy\ndNI5ALIXCQyNEspRYS+eEEokxtC1JIZprHgAVkoQemVVDF0S4+wWvxkaSmBRD2sITboUgobN\nAxvlqJgHNoR+LzQMtatfBD2wMfTAhjALrrySUx8gWPoMgCVSxlAX1XffgcXFM0rhSaEDWBmX\nYKlGGcNCBmGLWBFIU4owS1uiimHFokAj4xqs3u0JhgWLAo0N12B1JZkxTL13RbBiUaDCuAar\njEIXwYxFgUrDFVjVwxpDD2sMy0IUzKFFXH+1N2oY5oUk2IMN11/tXQSGHtQYFiwINEdSlKGa\nlRjDhAWB9iYd5efYbWBoWBCoNwiw/qrfCQ1CbxEKhgkLAvUmAdZf9S6BMdSFINi74NQ7hf0K\nvMCNEkpg82ZBMUxYFJjfC7AGG4/dG4KKRYF5swBr8PTXEPSl5jdDg3u9XYCyoLe4CWWpebug\nGOpCFuzBhCuwebtQIPRmIWFouAKbNwuMoYc2hN4qQElgvVXADfe74Tv+HRpXZW5kc3RyZWFt\nCmVuZG9iagoxOSAwIG9iago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDMgMCBSIC9Db250ZW50\ncyAyMCAwIFIgL1Jlc291cmNlcyA0IDAgUiA+PgplbmRvYmoKMjAgMCBvYmoKPDwKL0xlbmd0\naCAxMTM3IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nKVXS4tVRxDen19Rywix\n7fdjq8SAYCCZC1mIiFwVHe6NmAn491PPPn2HUWdwMY+vqr6q6q7q6j4BXkCAa/iy/QlfoAzn\nM7TkcoYcsmsRUguuRPj3PfwN/2xPbv76/Sk8u9q8897D+vvq2R8obQW+bq9eg4d3W4AX+HO9\nBTKAlxsA+moeYuwudzgvguFGhRbdCBBTcKFDyy57A0cyLa73qW0u7DwF7JVNVVDdGMaLxbXp\nVQCbSkzVajbCW3M9bldoHHBLUoNYh+uZ8zcJGqeIqLiCsdBpyYia883Qka27K2XXD9cWriDx\nLdYq6S6Vya24tt23ILGW2KbXTJW75q1rKeghQcqd9uq8SoYrA1F3sUAq3nWPCHNJhjheDS7G\nqa/R5Z1riH2LtUqqq3Fyc6FqmG9BbK2xTa95Cfcib13LGFSrjL0RdS0mia4OiN5TlXNKbmBJ\nfSS3iihe9Mn1sesLuZ5cRexbrEWCzYfnw7jYJ2X3LUisJbZILC/hXuYta4k5cq1GoA07rxJs\nVYyXE9d5ZBcSosJ9IIjj4TZRn5i+cQ8ZVxH7FmuRdDxIZXJ7p4KYb0FiLbFNL3kZd81b19IL\n18oH6snzKolUy9gr15m2MCNq3AeCOB66pj5R/fDcQ8o1FOwEqCTiptZi3Dg6DTP1rUh8c+yp\n57wmd81b1pJio1rRnxx4LVPSqWv4D+aavAuB/2AfKKJ4CYuMfTL1iXrIuIbYt1irpLiRJjfi\nRN59C2Jrja16y0u4F3nrWpqnWtFO9ihrMQkOCi8zvyMqNPoT3ge+GeJ4OEZL2fWFemhyFbFv\nsVYJzrm0c3EfFt+MxFpjq17zUu6at6wlh0S1wvrq0TdBd7XzJYZVphbFc4YjEptAwJFNG/WI\naTu1j/EENDv0Jii0w8bLdKTNa7YTbzFVK9kob8lV0y9FBkJztUn+JhkuFESVSpsTrzzjYOTR\nxYiD4fDk0SV6HKxh5xpi32xtkkqXqHGxbcbuW5D4ltim17yUu+ZNa8H3w889D/ROk9fH2fIR\neAK4um2gsOI5VgOdvmagcDWQMTANBC4G2o9moHAxuMhqJrkYPD3oLhxv7tiFmyO+oZ7j5IfD\nBwjRqUJ+CQ7YJJgUDmY8W4cz/BIfweF6++3Arn/Axfnl68LN9+fGzm+jnVvvz011XObc78/N\nJVxygzeyPEcDjX98LurrVJubN/u2QaB7QuFqgMePpoMZCFwMIhYQo5uBwsUgYXo9TQOFi4Fm\nZQZrkusWLOt+vGxHxi2oMBp5oi14HO7av++SQ8fAldn+weRYEx1q3v0Hk1PmSffNVv0uOeMt\n1QOT02XZ9YhtGf9BQ50DBjMGxaf/ybbf4EeQSfTTxzCmSiMbx36Ttnz39r+3bz5/evUrhNcP\nWCb+i4nRl0oJt/zE6edh317hzuEaqAjfHK724aNfXvP7gb8ITtt8g/Or+rTNNzK/TBHbO5Nf\nd6dtvtX4hXTa5puEXxmnbd7rfFNj1fSSbOJu3jV8e5zo9tj+Bzz+zddlbmRzdHJlYW0KZW5k\nb2JqCjIxIDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMyAwIFIgL0NvbnRlbnRzIDIy\nIDAgUiAvUmVzb3VyY2VzIDQgMCBSID4+CmVuZG9iagoyMiAwIG9iago8PAovTGVuZ3RoIDg2\nOSAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0KeJyl199PFDEQB/D3/SvmUaOUdmb6\nY18hojHRRLnEB2IMgcNAhJM7jfG/d7q353WB7wnxgQ1l2m53+unsEugtBbqi2+4D3VLsnVfK\n4lRJg7rMJDm4yLSc0ye6qZ26g1m3v/r4+oDOVp133ntqr6uzm27/SGzS2QXZFGNgfVm3g4pL\nhTT1TiPNrunZm8vVj8XX5ek1LS7o/PTH6ZfF5clL4s+0R6vv3y5v5l8W589pdtW9mg33P+Lx\nBnznBkObvbrQUyj1Aer8T5mymWevmd5+7ROxeFfSMOfRcn77c35z9nszSc3NOjGHxw8k5vjw\nvf01R/rVnXwmT+ddoLf2c9WF4QbvusDFhTSm/5pUopNN8xvR8d0OYzMlx2OH+uD9tsPYbDuU\n4HLTYd1sOkgsLm47jM2mw2RVfxfZdHgMj527F3x2JZDm6q5meo/ne75//PaHoi5NJghPm4CT\n5a2dwM9feP/48aKW1nb8E++vJje24ycJWB/Skh1724B1SyXU5rABd+LBlU2rCY8DNvF2/CMO\ngw5simzOwoO52TlWOW8Gh+YA/bsCNbYKZ2qvg63/OYBZnfoxV1LTIjoUrOW8o4Mul2q8ifpt\nrNjzFRSLrmcU64dEPhjrrUp6FMs1QQ/Hgre9RIsJPrqAVhN8qfUCBG0PC1pPCMkluCD2TuGC\n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\nGOYeIgg2koSgeCxiaFQxLJQzgl6DDEMlwTBTxHCsFygm2bMpF7TXVxqGPl2x4eRrK9qbfAbD\n1HUEgh7UDcHsUY2h9aqGYKaGcpNd0RQIi1DCMPWbGMFKDKFfCA1DpYJh7rcdgo0UwibEGBo1\nmKNecQqCEiMlDJUUw0yMcnTSOQCyFwkMjRLKUWEvnhBKJMbQtSSGaax4AFZKEHplVQxdEuPs\nFr8ZGkpgUQ9rCE26FIKGzQMb5aiYBzaEfi80DLWrXwQ9sDH0wIYwC668klMfIFj6DIAlUsZQ\nF9V334HFxTNK4UmhA1gZl2CpRhnDQgZhi1gRSFOKMEtboophxaJAI+MarN7tCYYFiwKNDddg\ndSWZMUy9d0WwYlGgwrgGq4xCF8GMRYFKwxVY1cMaQw9rDMtCFMyhRVx/tTdqGOaFJNiDDddf\n7V0Ehh7UGBYsCDRHUpShmpUYw4QFgfYmHeXn2G1gaFgQqDcIsP6q3wkNQm8RCoYJCwL1JgHW\nX/UugTHUhSDYu+DUO4X9CrzAjRJKYPNmQTFMWBSY3wuwBhuP3RuCikWBebMAa/D01xD0peY3\nQ4N7vV2AsqC3uAllqXm7oBjqQhbswYQrsHm7UCD0ZiFhaLgCmzcLjKGHNoTeKkBJYL1VwA33\nu+E7/h0aV2VuZHN0cmVhbQplbmRvYmoKMzEgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVu\ndCAzIDAgUiAvQ29udGVudHMgMzIgMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjMy\nIDAgb2JqCjw8Ci9MZW5ndGggMTEzMSAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0K\neJylV11vnTUMvn9/RS5BgpA4ztftJkCaBBK0EhfThKYzEFQ9oDEk/j7+zMmpCrTsou372H5s\nJ3EcN4dXIYe78P74LrwPdcaEoZeIGDBj7BBKz7FC+OOn8EP47fjiw/dfvwgvb44UU0ph/33z\n8luS9hr+Ol6/CSm8O3J4RT93R2aD8M0RAvnqKQyKMsJ54ZlibaFDnDlMkozQMWKy7xPb1TiG\n63rMiyPf6k/sFPdYp3FGi8X96bfYSSzTaU7K2fI7HTdkmWkXSg85IS/tvEtaBCRUYx2EesRK\nqMfUHZ3EesRaL/oZ+8Y1JL7V2iQlQr9wIabNtyC1ttimt7yMu+dta6nkoZAsR0i6FpdAbJPQ\n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\nw+Evnpf/lmVuZHN0cmVhbQplbmRvYmoKMzUgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVu\ndCAzIDAgUiAvQ29udGVudHMgMzYgMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjM2\nIDAgb2JqCjw8Ci9MZW5ndGggODI4IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4\nnKWWTU8cMQyG7/MrfGylkia283UFlVZIrURZqYeqqhAsFYiPwlJV/fd1dmchO+KlrHrY2fG8\ntjPO5IkT6IACXdDtcEi3FKvzSlmcKmlQl5kkBxeZ7ub0ha6b07A7G94uPr/fpZPF4J33nvrr\n4uR6eLsvlnR2RpZiFFaXlR1UXCqkqTqNNLuiVx/OF/c3P+6Or+jmjE6P74+/35x/fUP8jXZo\n8fPy/Hr+/eb0Nc0uhnez5fj7PA7AkwGWNnt1oVIorYCWf5uUXZ6dLr3d1kQs3pW0zLl/N7/9\nNb8++bNO0uZmNTF7R09MzNHeJ3uaI/0evn4jT6dDoAP7XQxhOcBH+68uh3H6r2x+2JW1eUl0\nNHUYzZQcrx1qdrU+OqzMzoGL3acHh9HsHCSri/rgMJqdw8ZbPbxk5/CS5fHs16vVRSHNbdm1\nid4J/uWfPlR1KXbRW8RytpFrF7vNwJKyK7kL5i2CNSYXtAuWh+AVkiU79jbdK0slNHM53RM9\nuLK2Opntr9NHs3MYM64d+gFewIYGlxMVWaPxZOXPxnKM6+CwdbByXgdzB+O/d7NunRbO1F+X\n6/R/YDZw1I9fwm4Dhbx877v5QLtDLo2aTvWPms0jC9KySwq0avkT0pLTDN8meCu6gNDgoxMP\nxeUWBESb88BQLG1nASLbbhuhmJ1kJNrKzbAUSa0vAFG9S7AUjc7DUtQameDZjQYGLCaWtgMD\n0TbXBIuxDcdXPGpb6fCz5egqLKd4J2gBhmIcwc9WqguwmCouPrMGV73q6Vj2PKFJVHs5TXDa\nSM0hTIiayBFDxewxVcw6wWpDLBgqFsFQsWQMFStjqFgThoqjx1C1DRhC1foFhIqTYqg4FQwV\n29YMoeKcJ1D1YgkYqfFQA8TqMVJc4wSpDbFioMQLBkp8wUCJtTMIlISMgRIOE6A2xIhxEjvF\nKixFFPcmkYqbk7RzPSxFCwZJImOQxA5HECRJAYMkKWKQJHsM0njuRWLBIIm1bwiS2GMIklgD\nhyCJdXAIkvqAQVLr3xAktf4NQWpnJgiSWv+GICkLBqkd1yBI7eQJQVLr3xAktf4NQVLr3xAk\ntf4NQVLr3hW32cPhL56X/5ZlbmRzdHJlYW0KZW5kb2JqCjM3IDAgb2JqCjw8IC9UeXBlIC9Q\nYWdlIC9QYXJlbnQgMyAwIFIgL0NvbnRlbnRzIDM4IDAgUiAvUmVzb3VyY2VzIDQgMCBSID4+\nCmVuZG9iagozOCAwIG9iago8PAovTGVuZ3RoIDExNTkgL0ZpbHRlciAvRmxhdGVEZWNvZGUK\nPj4Kc3RyZWFtCnicpVdLb501EN3fX+ElSHSwx+9tK0CqBBIkEouqQtUtCKIEVILE32ee/nyj\nFBK6yOOMzxmP7fF4vhRehxRuwofT9+FDqBNiCT1DKaGkAh1D7gkqhj9/Dj+G309f3v/wzcvw\n6uoUIcYY9t9Xr74ja6/h79ObtyGG96cUXtPPzSkxIXx7CoF89RhybtBiuNsMA+IIHWEmAhNy\nDL1AiQ7OTK0wxhrtkA6dAfEqVDNUSGnpMszDqwCh2pw6atGobo/1fLoicqItyT2kmaE1iX9Z\nSFIIVaiDUIPcCHWI3dFZ2ANqPcYn9E1rSHwr2ywIqR/aCHPzLUjZNreNW1ym3eO2tVTykAPO\nAbPoWtSSY4SSCQ3ASihBo+goM3p2JPO1BIhrvCGLXKvIfCvbLB1Kcy3SPuDybUjYOvcat0hV\nexG3rWVOOatWYHZdi1saFHJEYfEptw6tE0JJAkU8H8YMYx7jVdLHtYbEt7LNQtdkHFoE3HwL\nUrbNLZYVl2gv49a1YEE+q5Jpi/SOLAtCm4Qyn3PRjMVSOQ/KkdBYGufJGu+cQ0trSHwrWy1I\ngaSlRUq1w7ciZevcPq5xuXaP29YyqmZU53O82y2DawuOpjk2+SxxdM2x6VmDY2qO6fiMmmOq\nddQ9a5alchVa2gJ18y1IfdvcNm5xmXaPW9eSsfNZ4ciQUNayLIUrRKZNmSjSQdPmyHlgiOfL\ntDGUJ2s8cw651pH4VrZZ6HblQ0tON9+ChO1z67jHpdqLuG0tPfJZ0Z5YirlhQBta8Ueg/aME\nyvQYUBIokLmohFKO+Gjl9HGdgu7J5YbK+eG6wqnjXotnls9poxqN6bZYNfySspQA2oeuabUs\nyGfOLxeXj2zvWJXyougs7C7lx8eHlCbXGhLfylYLpTk5dS3teDx8K1K2zu3jGpdr97htLbXy\n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\n6vGHgFSPPwSkpooB2e9JEJDq4YeAVA8/BOR0V0aiYkBqSRiQWioGpFbGgFQPPwSk9q+hCR5+\neHLUJgd4XJZYSxiQ2ioGpHn4ISDNww8BabFgQFq/ayEbzK+JEJDGCQOy35cTtsE8/BCR5uGH\np8fpXypIbBiQpoIBaZrw6dE8+hCP5tGHeDRfNMSjefQhHs3aAR6XBibBgLSUDgC5GPt++BfA\nCB53ZW5kc3RyZWFtCmVuZG9iago0MyAwIG9iago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDMg\nMCBSIC9Db250ZW50cyA0NCAwIFIgL1Jlc291cmNlcyA0IDAgUiA+PgplbmRvYmoKNDQgMCBv\nYmoKPDwKL0xlbmd0aCAxMTMxIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nKVX\nXW+dNQy+f39FLkGCkDjO1+0mQJoEErQSF9OEpjMQVD2gMST+Pv7MyakKtOyi7fvYfmwncRw3\nh1chh7vw/vguvA91xoShl4gYMGPsEErPsUL446fwQ/jt+OLD91+/CC9vjhRTSmH/ffPyW5L2\nGv46Xr8JKbw7cnhFP3dHZoPwzREC+eopDIoywnnhmWJtoUOcOUySjNAxYrLvE9vVOIbresyL\nI9/qT+wU91incUaLxf3pt9hJLNNpTsrZ8jsdN2SZaRdKDzkhL+28S1oEJFRjHYR6xEqox9Qd\nncR6xFov+hn7xjUkvtXaJCVCv3Ahps23ILW22Ka3vIy7521rqeShkCxHSLoWl0Bsk9CIUMXD\nTIQol+JI4jUiwtI3iHjhOhLfai2SObmKjDppQcuzAjHVwK6VnIx3lbItg1VyYr4KE4zYRoCU\n5Gwn5wiUHCYDHAko9zGXtkq5GK9a7YCbqqDGnhcPOUP3ip6/xxSBZyO8q1w1fUDw+qGKO++S\nwXUHWPRUZ4RJqOqpC5Jg2LQqTN+1Yozbvb6qW5uEFpMvXFnN8i1IrS226S0v4+5521polXQ8\nWFZFLYlUBdAVo4PFIhUDtA29OJJ4dBBUFq6nS40XrqNVUS4BKQ3nglSN+4ZVVB7b9ZqXc/e8\ndS0FujSjzKs8bwKIoxEYcVIBI+9YKUn6kwCOVcgRbZhri3Qo5RkQr2parGcRwXhcgcurAjHV\nmKbVbIy352rp9+TXvzXN3yV0fFX7+JDjK5QW9fjUHUkw6pFSGqavq2zqBYlvtTYJxDwuXLoG\nm29Bam2xTW95GXfPW9eCuXhbojt03iXIB8ZPkzSqGjETqtqoBJ3EumujMv3Q1mTc4W2ru/VY\nratcuPRobb4FqbXFNn1Z/ak8yNvWUqscFb2p+ua5AHkvsDYpq8ZbgdQGuawESKwqp21aaqF5\n8QyIVzE1QY5zLl7i99K9Jn9MPaZpq1WS8LZcOX2aCT7uybdHSyeKs+ei8D6Em4cGBpu8j2Jg\nzdYNDO4GevOXgcLNwOrRDQxuBldZrSQ3gxe3tgunD4/swocTzUVfUcmE259DhmgK/aU4U2Fw\nd+o8St2ewyfwabi9O768Fdf/waUnJLWNi0/nwpDB58JtT+eWNq9zHk/nYs3X3JycrCPmpOGM\n91qR9WHZ6wf6zH8VbWqeLejBdb3BzQCoz8+xDAzuBrPz0LQMFG4GpWHMZRkY3Az80TODfQ37\nBm278vm2WUgb1PiNoLeJNyg9trn/ys1VCvR6d5/MBiixZK3F/8Gm5kGjM7PL89mFhjpsWsvP\nZyPQY1OEXR9Uld3gA+mDLK3NOESU1nnv5+fwl6CN7qNvOZQmM9/gEYPze/f2z7c//v7r689C\nfvOMddLnbFKzNT/wA8vP8/5dy4/27szV94+92/4JSzHzPGGdmSsWaNN8hm88O997l84g7yBh\nGy0HveqCtStDkbHh/rBZh/XcZL1HZz5b1tu7S7cSmW4tmSa6xMHpvI6/AeTH1u1lbmRzdHJl\nYW0KZW5kb2JqCjQ1IDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMyAwIFIgL0NvbnRl\nbnRzIDQ2IDAgUiAvUmVzb3VyY2VzIDQgMCBSID4+CmVuZG9iago0NiAwIG9iago8PAovTGVu\nZ3RoIDgyOCAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0KeJyllk1PHDEMhu/zK3xs\npZImtvN1BZVWSK1EWamHqqoQLBWIj8JSVf33dXZnITvipax62NnxvLYzzuSJE+iAAl3Q7XBI\ntxSr80pZnCppUJeZJAcXme7m9IWum9OwOxveLj6/36WTxeCd95766+Lkeni7L5Z0dkaWYhRW\nl5UdVFwqpKk6jTS7olcfzhf3Nz/ujq/o5oxOj++Pv9+cf31D/I12aPHz8vx6/v3m9DXNLoZ3\ns+X4+zwOwJMBljZ7daFSKK2Aln+blF2enS693dZELN6VtMy5fze//TW/PvmzTtLmZjUxe0dP\nTMzR3id7miP9Hr5+I0+nQ6AD+10MYTnAR/uvLodx+q9sftiVtXlJdDR1GM2UHK8dana1Pjqs\nzM6Bi92nB4fR7Bwkq4v64DCancPGWz28ZOfwkuXx7Ner1UUhzW3ZtYneCf7lnz5UdSl20VvE\ncraRaxe7zcCSsiu5C+YtgjUmF7QLlofgFZIlO/Y23StLJTRzOd0TPbiytjqZ7a/TR7NzGDOu\nHfoBXsCGBpcTFVmj8WTlz8ZyjOvgsHWwcl4Hcwfjv3ezbp0WztRfl+v0f2A2cNSPX8JuA4W8\nfO+7+UC7Qy6Nmk71j5rNIwvSsksKtGr5E9KS0wzfJngruoDQ4KMTD8XlFgREm/PAUCxtZwEi\n224boZidZCTays2wFEmtLwBRvUuwFI3Ow1LUGpng2Y0GBiwmlrYDA9E21wSLsQ3HVzxqW+nw\ns+XoKiyneCdoAYZiHMHPVqoLsJgqLj6zBle96ulY9jyhSVR7OU1w2kjNIUyImsgRQ8XsMVXM\nOsFqQywYKhbBULFkDBUrY6hYE4aKo8dQtQ0YQtX6BYSKk2KoOBUMFdvWDKHinCdQ9WIJGKnx\nUAPE6jFSXOMEqQ2xYqDECwZKfMFAibUzCJSEjIESDhOgNsSIcRI7xSosRRT3JpGKm5O0cz0s\nRQsGSSJjkMQORxAkSQGDJClikCR7DNJ47kViwSCJtW8IkthjCJJYA4cgiXVwCJL6gEFS698Q\nJLX+DUFqZyYIklr/hiApCwapHdcgSO3kCUFS698QJLX+DUFS698QJLX+DUFS694Vt9nD4S+e\nl/+WZW5kc3RyZWFtCmVuZG9iago0NyAwIG9iago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDMg\nMCBSIC9Db250ZW50cyA0OCAwIFIgL1Jlc291cmNlcyA0IDAgUiA+PgplbmRvYmoKNDggMCBv\nYmoKPDwKL0xlbmd0aCA4MjggL0ZpbHRlciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnicpZZN\nTxwxDIbv8yt8bKWSJrbzdQWVVkitRFmph6qqECwViI/CUlX993V2ZyE74qWsetjZ8by2M87k\niRPogAJd0O1wSLcUq/NKWZwqaVCXmSQHF5nu5vSFrpvTsDsb3i4+v9+lk8Xgnfee+uvi5Hp4\nuy+WdHZGlmIUVpeVHVRcKqSpOo00u6JXH84X9zc/7o6v6OaMTo/vj7/fnH99Q/yNdmjx8/L8\n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\ncEt96wfp8NegRe+TbzzSNwa9dEn6Gg7w/bu/3v30x29vvgjp7TMWSv/OJslb0wM/uPw87zMv\nPVrHE7/SH63j+o2F9LGR+SPJyjRScy3btj4lIjcHt160Mz0oU7C2ndwvUIdx6zWb+5jMem9/\nKv2ZjLVGJ2pwJmN7k/mSK/Y3s3I7f8sv1ekfpqfjP2VuZHN0cmVhbQplbmRvYmoKNTEgMCBv\nYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVudCAzIDAgUiAvQ29udGVudHMgNTIgMCBSIC9SZXNv\ndXJjZXMgNCAwIFIgPj4KZW5kb2JqCjUyIDAgb2JqCjw8Ci9MZW5ndGggMTA3MSAvRmlsdGVy\nIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0KeJylmN1PHDcUxd/nr/BjK5Ub3w9/vRKVVpFaKWWl\nPkRRhGBTgQIUNlXV/77Xs7PszIZDWfWBFd5je/DxPb+x4fAucLgJD8P78BBSo2ihKJkFY6Mi\nQQtTkvC4Dr+Hu95pOF0Nbza//XQaLjdDpBhjmH9uLu+GN2fqk64+B59iErYf2zabUq7BciNL\nYXUbvvv5evP1/o/Hi9tw/zlcXXy9+HR//eGHIB/DSdj8+eX6bv3p/ur7sLoZflyNzz+T6QFy\n8ICxLdGIW+DaF9DnP2bK2Twns+n915aDaKSaxznPHtcPf63vLv/ZTdK92Rrz9vwZY87f/urf\nlhT+Hj58DDFcDRze+c/NwOMDfhlqolIn92+DSSHmqfklhPMDfdvKmWSS2YRyedKn5rxDa5Ty\nvsO2OesgKXdp12FqzjooK6k+dZia8w4lksi+w7Y567BY1dMiZx1eU10vbr5P3TRY6VXb9+nE\nd+z1pcN9g2U5PB8xvBYqvBxuRxSuGeW4HC6vH65e963Nhrt2xOjMVOti9BHPtp62shj9tPAt\nVtwaib7n25Yp9+a45we6/xm71kyeBuz0+fhXxNeYSg5Vd+l91pcXx/ZSnQbzLPL/zcxZOVcp\nYf45lvP/QUYxsjh5Jd0WtRGxj+shnA6l9FjN1LjXqv/ekCY9QkAbsQO0SlmA1pisIM1IGWkO\niAw0jmMDibKvo2/FRBktn2OlhNbPzKTIAPb9F+QAc6GILGBu1JAHLDJWLxBTZwYSa69LIPYI\nNVg9rP4WhTZopgZt0NYhCsTtewmJiRK0wSoptCGNPECi7QnzrZipwlrweBdoQhZK0IScyKAJ\nuZJAExwfDE3o7zdoQvGlQBNKowxN8MwbNMFDr9AETz1DEzz2EZrQHMfQhJb7mxSJ49HleVE8\n+IZMEA8+ZKJ48CEUxZkLqSh+EoJYFM6Yi+LBh2AUDz4ko3jwIRrFgw/ROJ5ioQmqGI3isYdo\nFI89RKN47CEaxWMP0Sh+poBolBQxGiUpRuN0ukViO0DjXPTYL8G44KZkw2iUXDAaxY/LEI3i\nwYdoFA8+RKN48CEaxYMP0SjVMBqln3VhLbSI0SgefIhG8eAv0bh016MP4aiRMRz76RjCUWM5\ngOPiqerhh3icrkFIzBiP6uGHeFRhjEcVw3hUP6pCPKqHH+JRPfzygg0efwhI1YoBqf0QDW3o\n1x5og8cfAlI9/hCQ6vGHgFSPPwSkpooB2e9JEJDq4YeAVA8/BOR0V0aiYkBqSRiQWioGpFbG\ngFQPPwSk9q+hCR5+eHLUJgd4XJZYSxiQ2ioGpHn4ISDNww8BabFgQFq/ayEbzK+JEJDGCQOy\n35cTtsE8/BCR5uGHp8fpXypIbBiQpoIBaZrw6dE8+hCP5tGHeDRfNMSjefQhHs3aAR6XBibB\ngLSUDgC5GPt++BfACB53ZW5kc3RyZWFtCmVuZG9iago1MyAwIG9iago8PCAvVHlwZSAvUGFn\nZSAvUGFyZW50IDMgMCBSIC9Db250ZW50cyA1NCAwIFIgL1Jlc291cmNlcyA0IDAgUiA+Pgpl\nbmRvYmoKNTQgMCBvYmoKPDwKL0xlbmd0aCAxMDcxIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+\nCnN0cmVhbQp4nKWY3U8cNxTF3+ev8GMrlRvfD3+9EpVWkVopZaU+RFGEYFOBAhQ2VdX/vtez\ns+zMhkNZ9YEV3mN78PE9v7Hh8C5wuAkPw/vwEFKjaKEomQVjoyJBC1OS8LgOv4e73mk4XQ1v\nNr/9dBouN0OkGGOYf24u74Y3Z+qTrj4Hn2ISth/bNptSrsFyI0thdRu++/l68/X+j8eL23D/\nOVxdfL34dH/94YcgH8NJ2Pz55fpu/en+6vuwuhl+XI3PP5PpAXLwgLEt0Yhb4NoX0Oc/ZsrZ\nPCez6f3XloNopJrHOc8e1w9/re8u/9lN0r3ZGvP2/Bljzt/+6t+WFP4ePnwMMVwNHN75z83A\n4wN+GWqiUif3b4NJIeap+SWE8wN928qZZJLZhHJ50qfmvENrlPK+w7Y56yApd2nXYWrOOigr\nqT51mJrzDiWSyL7DtjnrsFjV0yJnHV5TXS9uvk/dNFjpVdv36cR37PWlw32DZTk8HzG8Fiq8\nHG5HFK4Z5bgcLq8frl73rc2Gu3bE6MxU62L0Ec+2nrayGP208C1W3BqJvufblin35rjnB7r/\nGbvWTJ4G7PT5+FfE15hKDlV36X3WlxfH9lKdBvMs8v/NzFk5Vylh/jmW8/9BRjGyOHkl3Ra1\nEbGP6yGcDqX0WM3UuNeq/96QJj1CQBuxA7RKWYDWmKwgzUgZaQ6IDDSOYwOJsq+jb8VEGS2f\nY6WE1s/MpMgA9v0X5ABzoYgsYG7UkAcsMlYvEFNnBhJrr0sg9gg1WD2s/haFNmimBm3Q1iEK\nxO17CYmJErTBKim0IY08QKLtCfOtmKnCWvB4F2hCFkrQhJzIoAm5kkATHB8MTejvN2hC8aVA\nE0qjDE3wzBs0wUOv0ARPPUMTPPYRmtAcx9CElvubFInj0eV5UTz4hkwQDz5konjwIRTFmQup\nKH4SglgUzpiL4sGHYBQPPiSjePAhGsWDD9E4nmKhCaoYjeKxh2gUjz1Eo3jsIRrFYw/RKH6m\ngGiUFDEaJSlG43S6RWI7QONc9NgvwbjgpmTDaJRcMBrFj8sQjeLBh2gUDz5Eo3jwIRrFgw/R\nKNUwGqWfdWEttIjRKB58iEbx4C/RuHTXow/hqJExHPvpGMJRYzmA4+Kp6uGHeJyuQUjMGI/q\n4Yd4VGGMRxXDeFQ/qkI8qocf4lE9/PKCDR5/CEjVigGp/RANbejXHmiDxx8CUj3+EJDq8YeA\nVI8/BKSmigHZ70kQkOrhh4BUDz8E5HRXRqJiQGpJGJBaKgakVsaAVA8/BKT2r6EJHn54ctQm\nB3hcllhLGJDaKgakefghIM3DDwFpsWBAWr9rIRvMr4kQkMYJA7LflxO2wTz8EJHm4Yenx+lf\nKkhsGJCmggFpmvDp0Tz6EI/m0Yd4NF80xKN59CEezdoBHpcGJsGAtJQOALkY+374F8AIHndl\nbmRzdHJlYW0KZW5kb2JqCjU1IDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMyAwIFIg\nL0NvbnRlbnRzIDU2IDAgUiAvUmVzb3VyY2VzIDQgMCBSID4+CmVuZG9iago1NiAwIG9iago8\nPAovTGVuZ3RoIDEwODkgL0ZpbHRlciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnicpVdLa5w3\nFN1/v0LLBBpVV29tHZpCoIXEA1kYU8y4ITGehtSF/v3ep0Zj3NaPRRyfq3PuS9L9ZHDvHbgb\n93374L67MnzIriWfs8uQfYsuNfAluj9/d5/cH9uPdx9/PnNvz7fgQwhu/Xn+9le0tuL+3i4u\nXXDXG7j3+O9mAyK4Xzbn0FcLDmLwJbjDYgA/umvRD0CQfAyuZZ+DgT1Ri+99rjYPR50C9spU\nMQBWA6aD5vv0KoCpElNXJRvVrbnut3MkA7YkNZdG96Vw/mrJIVDjAIovHRH4WNhpaIb2zGbh\nXB++LVpG6lvYamE3qk0Dy5m+FQmbY891zVS1a95aS8Gl5FJC2ZBazCKa0inJlPC/gQhzSYY4\nXsUi4lyv0eej1hD7FrZaMu+MaaPvi29GzLbYuq55ifYkb61lDNqr3uhoHBZD93W4iA3GPe7D\nj4Ag0gkQQLFiSBTEVgvFMJ2AZifQDIXuhekyHQ/zmu0EWkw2WDasO8lV0o858iFKYPlPS+RE\ncuJjlRLnmAsfK0EcLFc+Vrbe+FiZVhHMKtQSB5eh2ti5DvUtSNgS29YlL9OueUstKTYqL7Xh\noXMtZunB14qo+4Fb34FuZUqB+qaI4iV0hm2d64k6blpF4lvYamlUq2lb9fnoWxCzNbauW6ai\nPclba2mBr03lMg+rBfe+ymhER5WblnBs0n+COB5OG7qytl74OptWEfsWtlqCFCFavBv16FuQ\nsCW2rWteql3zlloyJLo2QCMAuBa10EnF6UzTHq9cpNEEiApdSUV7Zje6snO903WeWkbqW9hq\n4buqWqDRNH0rEjbHnuuaqWrXvLWWUmivchi0wYfFgl8aPDW5VNrnDJEOR8ZhkoMhjodNwzbZ\nOg4jOGoViW9mm6XRjTZtqBxQfQsS3xLb1jVT1a55Uy34zX3ZJ1W/A/LFPlg+Am+dO79PUFir\nj0rQ0WUEhSsBRxXu1yQIXAh6OI2gcCGcZDWTXAhnO+3C/u6BLtzt8d3xDs+P233G77HXBfkh\nGPCUYFI42fCpsju4V/G1291sP+3Y9f9ocSCHumjz47Wx83viqK2P16Y6TnPuj9fmAqdaCCaW\nJxy9jHLEZguk+9iTNPs+AWfmhCsBZy5+TSZB4EKIGadMnwSFKwEbi5NuEgQuBBpeqUyCwoWg\naRthrWLt0dKYN0u/MvaoOsDbVho36Q348FCP/1uP2xSK6PEp+GR9xO8wlkL68IzwcYDt8XOi\nJ+wcvmX5iDwjOg3FPFReTo+YXuct4y9I1ZljMOfsB+627aTBL06m3ouvfEw4YfHl3uklQgle\nX/119du3rxc/OLh8QqH4KyYW8UVT4J6fOP087W8jeHCQAz2g/nWQ6x8mPVE2BxvbcQT6jt5u\n+kaOIxH91qZ2rHIjNn240YsZD+vtZo+f2hTrAwJfOYWwfoQTuaFt0Zmc8HENDTFu0vYP8ay6\nBWVuZHN0cmVhbQplbmRvYmoKNTcgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVudCAzIDAg\nUiAvQ29udGVudHMgNTggMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjU4IDAgb2Jq\nCjw8Ci9MZW5ndGggMTAwOSAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0KeJyll0Fv\n3DYQRu/6FXNsgJghZ4akdHVQpwjQAqkXyCEIAsPeFDZiu/amKPrv+3GlzUqOP8eLHLwwd0Ry\nNTPvUUryVpJcyV33Tu4kDyG6VAvu4slDVbGaQla5X8t7uWkXdcer7tXmzzfHcr7pYogxyvxz\nc37TvToxLLr6LFhiCowf4zi5hdKLlyF4ltW1/PLb5ebr7V/3Z9dy+1kuzr6efbq9/PBS9KMc\nyebvL5c360+3Fy9kddX9utruf6LTBvpgg+1Yo4c0SOrbDbT1D1lyts7RbHn8OxRRi6Ev2zVP\n7td3/6xvzv/bLdJyMybm9ekjiTl9/Qe+rVn+7T58lCgXXZK3+Lvq0naD37s+hrLL/rV4xVbD\nNPwicvogPo5KCTqFU+5DGb7Fp+HsArUS6n6BaTi7wFrJ9ytMw/kFg4Z+v8I0nF2w+NHf7mF2\nwXOa58nalj70EQu3pmxlOEJ7Pr8zkpfQ5+X0eEBjqYdhsXs8ZHeLpXX8fno8ZHPrPeS4mH3A\n3l405Pnesxsfse9r0IiijSO31Ibboj2Ip1b0cTQLTxN28fn8Z+DlKdQive3oejQvT851rbvJ\naYbkj50268deq8w/t/34M0hXDx6nXFlI2Nq3Crxfd3Lc1W0xZtG4j414k5iFWlmsNOIejw34\nP7EYvjAWA7+ZxYZgPYmlqK1jWTCHwu4+xb65iQRTapVmQSDKEpBwJCSWgaToWJaCBPKN5SCh\n9ZwVJOHIKDQJZq0hWbDsSfs+OLQDiQRxwkZaFThQ6Q9y1JMmIWvzFwvmkGkSxsOIBAvqSatS\nUE+aBJwGkSYBlCeaBJBpNAkA0xdVWWCbwGamaQCchaYBdFaahh4VpWkAn5HWBYAmmgYQqiwN\nCkKdpUFBKPWTglAqKAWh1FAKQqmiFIRSRykIpZJqZzO1lIJQqqn2UJe5pRWMUlFND1EsOHBR\nqSsXlYJRKioFo1RUCkapqBSMUlFpY5T2AhilolIwSkWlpXJRKRilolIwSkWlYJSKSkEoFZWC\nUCoqBaFUVApCqagUD8NUVApCqagUhFJRGQilojIQ6qwqBkKppgyEUk1ND/4sWLmmDIRSTRkI\npZoyEEo1ZSD0iecoA6FUVAZCqagMhFJRGQilojIQSkVlIJSKykAoFZWBUCoqA6FPiMrAKBWV\ngVEqKiv1gaiWC+M1jqrKQClVlYFSqioDpUtVLXcFp1RW1jilWIBTKqvppZUFM5eVgVMqKwen\nVFYOTqmsHJxSWTk4pbJqrzNUVg5OqaxcI5eVg1Mqq/aaRWXl4JTKykEplZWDUiorB6VUVg5K\nl7JadJF75rpycEp15eCU6srB6VJXi13fdf8DBrnFLWVuZHN0cmVhbQplbmRvYmoKNTkgMCBv\nYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVudCAzIDAgUiAvQ29udGVudHMgNjAgMCBSIC9SZXNv\ndXJjZXMgNCAwIFIgPj4KZW5kb2JqCjYwIDAgb2JqCjw8Ci9MZW5ndGggMTAwOSAvRmlsdGVy\nIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0KeJyll0Fv3DYQRu/6FXNsgJghZ4akdHVQpwjQAqkX\nyCEIAsPeFDZiu/amKPrv+3GlzUqOP8eLHLwwd0RyNTPvUUryVpJcyV33Tu4kDyG6VAvu4slD\nVbGaQla5X8t7uWkXdcer7tXmzzfHcr7pYogxyvxzc37TvToxLLr6LFhiCowf4zi5hdKLlyF4\nltW1/PLb5ebr7V/3Z9dy+1kuzr6efbq9/PBS9KMcyebvL5c360+3Fy9kddX9utruf6LTBvpg\ng+1Yo4c0SOrbDbT1D1lyts7RbHn8OxRRi6Ev2zVP7td3/6xvzv/bLdJyMybm9ekjiTl9/Qe+\nrVn+7T58lCgXXZK3+Lvq0naD37s+hrLL/rV4xVbDNPwicvogPo5KCTqFU+5DGb7Fp+HsArUS\n6n6BaTi7wFrJ9ytMw/kFg4Z+v8I0nF2w+NHf7mF2wXOa58nalj70EQu3pmxlOEJ7Pr8zkpfQ\n5+X0eEBjqYdhsXs8ZHeLpXX8fno8ZHPrPeS4mH3A3l405Pnesxsfse9r0IiijSO31Ibboj2I\np1b0cTQLTxN28fn8Z+DlKdQive3oejQvT851rbvJaYbkj50268deq8w/t/34M0hXDx6nXFlI\n2Nq3Crxfd3Lc1W0xZtG4j414k5iFWlmsNOIejw34P7EYvjAWA7+ZxYZgPYmlqK1jWTCHwu4+\nxb65iQRTapVmQSDKEpBwJCSWgaToWJaCBPKN5SCh9ZwVJOHIKDQJZq0hWbDsSfs+OLQDiQRx\nwkZaFThQ6Q9y1JMmIWvzFwvmkGkSxsOIBAvqSatSUE+aBJwGkSYBlCeaBJBpNAkA0xdVWWCb\nwGamaQCchaYBdFaahh4VpWkAn5HWBYAmmgYQqiwNCkKdpUFBKPWTglAqKAWh1FAKQqmiFIRS\nRykIpZJqZzO1lIJQqqn2UJe5pRWMUlFND1EsOHBRqSsXlYJRKioFo1RUCkapqBSMUlFpY5T2\nAhilolIwSkWlpXJRKRilolIwSkWlYJSKSkEoFZWCUCoqBaFUVApCqagUD8NUVApCqagUhFJR\nGQilojIQ6qwqBkKppgyEUk1ND/4sWLmmDIRSTRkIpZoyEEo1ZSD0iecoA6FUVAZCqagMhFJR\nGQilojIQSkVlIJSKykAoFZWBUCoqA6FPiMrAKBWVgVEqKiv1gaiWC+M1jqrKQClVlYFSqioD\npUtVLXcFp1RW1jilWIBTKqvppZUFM5eVgVMqKwenVFYOTqmsHJxSWTk4pbJqrzNUVg5Oqaxc\nI5eVg1Mqq/aaRWXl4JTKykEplZWDUiorB6VUVg5Kl7JadJF75rpycEp15eCU6srB6VJXi13f\ndf8DBrnFLWVuZHN0cmVhbQplbmRvYmoKNjEgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVu\ndCAzIDAgUiAvQ29udGVudHMgNjIgMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjYy\nIDAgb2JqCjw8Ci9MZW5ndGggMTE2OSAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0K\neJylV01vXTUQ3d9f4SVI1Njjr+ttK0CqBBIkEouqQtUrCKIXUAkSf58zX/c5UQoJXeQpZ2bO\nzNgej+fm8DrkcBM+bN+HD6HNmGoYJdYaaq5xUCgjx0bhz5/Dj+H37cu7H755GV5dbSmmlML6\n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\n88NYcqi6I+yH+3Kwth+2qZhnWP68r80OZJUS5tfxQP4frIuRxWmvlNgvNrbBh/UQjodSOj8z\nNT5pNVJqSNOONtAyFag1qhVozXsc1DJFqDXiAjSOQoLFRIrFSpaRyNwbExKNMhbHrglEib03\nIFGpYbFQhKKPDTYoau+N6ICwZlJc23p3BaIJJSym3vqROI5OIHa4sWjUsFgpMhIzE2PRSLBY\nSBFDXOIefgtRMX1cMsZvGq1ArIIB5JowgVwrRpCdT8gg+1zBELaKIZTIGMJupSCEEguGULz/\nQQiFFUMonDGE4jMMQihOKIRQJGMI+1QXKKpgBEUTRlC0YgQn94VEwwiKj/AlgouWISliCMUJ\nhRBK9xdQzBFDKFkxhOL278AMFP8SgBhKEYyhlIQxlFIxhlIZYyjVMIbijEIMpTHGUJrtYbjc\nhlYwiBrjHoiL2smoo9qMUdTYMIrqFguiqJwwitq9JhRFMIoqCaOoUjGK6n4ToqhqGEXVglFU\nixhF9Y9ZOA3VMgZRnVIIoibFIGrKGER1swtB1Cx4Gk7fckisGMNupiGG6gYYYqjufyGG6gYY\nYqjOKMRQ/c8QQ20RT0NtegBCd8FwGqrbYIiguQ2GCJrb4CWCC7bNjXA9ILsVhhiaMwoxNK4Y\nQxPGGJoYxnD65AeiW2GIobkVXmK4fFK3whBEcysMQTS3whBEc0ohiGYNg2hJMIiW0h6Ii4d5\nN/wHVj3KumVuZHN0cmVhbQplbmRvYmoKNjcgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVu\ndCAzIDAgUiAvQ29udGVudHMgNjggMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjY4\nIDAgb2JqCjw8Ci9MZW5ndGggMTA0NyAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0K\neJylV1mLnUUQff9+RT8qaNv78pqgQkBBZ8CHECTcJOgwo8QR/Pue2vr2HSY6Qx4y9ztVdWrp\npboS3SsX3Y37ePzkPro6fSiuZ1+KK7H4nlzu0dfk/nrvfnF/HN/c//z9C/fy6gg+hOD2v1cv\nf4S0V/fP8fqNC+7dEd0r/Ls5Ihm4Hw7n4KsHN6Yf1d0tPKPPiJr8jG4mX6vrxZeg3yeyq34M\n03UfF4e/xR/bCR4+d+UMSMyffLMdx1Kd5CScLb/TcQXLiFWAIsbkQ+SclyT7GvBTfR0s7BE/\n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\n+HqXGnKtIfGtbLPQIz8OLQIuvgUp22LbuuVl2jVv28uofFeFHlPU52W3IDQ6tNH4novWLI7O\ndVCOmsYxuU58fcqFuNaR+Ba2WZAONe1aepjr4VuR+tbYvq55uXbNW/eSqUVIRXW+x7vVMqRP\nkqNJP3HyXWZqG1Jj06smkzOpMVvPWmOqddS9anZL5Y66awvUxbcgYXtsXfe8VHuVt+2lR74r\nHBQEdS9uKdwhpOcPOYbBb4DMdWBI4lEbpTrZ1yvX0K41JL6VbRZ6uvKhpU0svgUp22LbuuVl\n2jVv3UtJme+K7tdKzA0D2pCXGN0y1QIVUKEWSUWg4CzUzjXiq4PLx3UKuheXGyrXh+sKl457\nLV5ZHtNWNRvTLbla+rVKC6A77VpWuwWlfmvjq8Ws72RqjNxeFEkwap7cfmydGms6tI7Et7DN\nQmXOtW9aqp54+FakvjW2r2terl3z5r3Q/PBp44G903T6uPN8FF5CuHlIMNiksQrBuq8TDK4E\nbQM7QeFCsHp0gsGFcJXVnuRCeHmyUzjfP3IK92eaob6mV184/UKDBtiC/qc4UZFwq+o8dp3u\nwmf4eTjdbl+dxPV/aOmFEtuiLU/X8vNLWzm07ena3OZ1zuPp2lLTtTZFF+s4ygdCm7qz6bRQ\nl4uoh/2QQG1yhyuBegrV7E5QuBC4qOU+lWBwJVClUAPaCQoXQi7SC51gcCFY2k5Yd7Ge0XIw\nL5bzKnRGNC/QgIJJDulFhPrYGf+7vsm0y3qyPluOKN1D5c+Pjn3yKC1X/D+i59x5zlD586Nn\nGk2byhEeVJg9zVuhP4hqLcdhKYXH0ItfpMNfgza9T37ikeZyejskmQU4wffv/nr30x+/vfki\npLfP2Cj9OZsUb00P/ODu53mfeenRPp74zfbRPm7fWI2+ouiZ866N9NFD777LZuM+0oAaJ2Ef\nx0neBPvYmWAOxtqkc6cey8fu4w82HgIu3rKxDP6oolvT93GiIWFyPGvRacj33IXfVNs/ru/j\nHWVuZHN0cmVhbQplbmRvYmoKNzUgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVudCAzIDAg\nUiAvQ29udGVudHMgNzYgMCBSIC9SZXNvdXJjZXMgNCAwIFIgPj4KZW5kb2JqCjc2IDAgb2Jq\nCjw8Ci9MZW5ndGggNzE3IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nKWWXUtc\nMRCG78+vmMsWasx85OPcKrVFaKF1oRciIroWRXfrrqX03zfnY20SzFTpxR5OzptMeCfzTBbh\nGBBu4aH7Ag/gemMFAhsREBQTCDigcQSbJXyD1TCpO1h0+9uvHw7gcttZY62F/Lm9XHX7R5yC\nLq4hhZiF6TGNUdj4COJ7Iw4W9/Dm4832cf19c3EP62u4uni8OF/fnL4DOoM92P64u1ktz9dX\nb2Fx271fjPsf0bwBVRuMY7JisAeMg4Eh/mtCZnH2svDptfdAbE30Y8yjzfLh53J1+XsXZMjN\nlJjDk2cSc3L4OX0NDn51p2dg4apDOE6/2w7HDT516Mggzum/B47W+H4e3gGc1BPmofeG5gmU\n3sU+TZiH2YQi5tMW2YSXHK6aexRrKICEoWqGPO1Z415xdC4a67PlSXv5ag5k2BWrn/aeajsG\nQzY5n0bCOAxH55WOJu5GmTwv2On5+hfUkKAJHiLvSuhZZ+paobBbjFnd/Rvc7FBjOp78OR7q\n/9RtkKHKplyJcQFYRs43yw4OuhBNH3LV/tVSKpy0tDgU9/NaT0PZNrT01Tc0tOnYuCn6ykcu\nJrNNG4iu7QPJVkaK9CBJ2wtSr5hhVsxwVMwIKWYGeppmppbTEr1ixaNixTvFSrCKlVR8bSuh\nV6xEUayk6iutlIfWs2ImVWDTDFlqm6FUgU0zhNg2Q+jbZohs+1yIXGWlcEqpAttmuCa/EGvw\ny8CisE+iwE9OoZ+cgj95Bf/5smyIoca/NBOUBkCxbgCFqOBPUcGfegV/6hX82Sr4s1XwZ1Tw\nZ1TwZ1LwZ1LwZ67xL1LPrDQAZqUBDGHaZqRuALnoFPzZKfizr/EvzXilAYwXurTXBqUFzH/0\nWmLdAgpRaQDcKw2Ae+XmF6vgL1bBX1DBX1DBX0jBX0jBX1i5/YUV+EUU+EUU+EUU+MXV8Be1\n8KX7A2fDuvxlbmRzdHJlYW0KZW5kb2JqCjc3IDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJl\nbnQgMyAwIFIgL0NvbnRlbnRzIDc4IDAgUiAvUmVzb3VyY2VzIDQgMCBSID4+CmVuZG9iago3\nOCAwIG9iago8PAovTGVuZ3RoIDcxNyAvRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0K\neJylll1LXDEQhu/Pr5jLFmrMfOTj3Cq1RWihdaEXIiK6FkV3666l9N8352NtEsxU6cUeTs6b\nTHgn80wW4RgQbuGh+wIP4HpjBQIbERAUEwg4oHEEmyV8g9UwqTtYdPvbrx8O4HLbWWOthfy5\nvVx1+0ecgi6uIYWYhekxjVHY+AjieyMOFvfw5uPN9nH9fXNxD+truLp4vDhf35y+AzqDPdj+\nuLtZLc/XV29hcdu9X4z7H9G8AVUbjGOyYrAHjIOBIf5rQmZx9rLw6bX3QGxN9GPMo83y4edy\ndfl7F2TIzZSYw5NnEnNy+Dl9DQ5+dadnYOGqQzhOv9sOxw0+dejIIM7pvweO1vh+Ht4BnNQT\n5qH3huYJlN7FPk2Yh9mEIubTFtmElxyumnsUayiAhKFqhjztWeNecXQuGuuz5Ul7+WoOZNgV\nq5/2nmo7BkM2OZ9GwjgMR+eVjibuRpk8L9jp+foX1JCgCR4i70roWWfqWqGwW4xZ3f0b3OxQ\nYzqe/Dke6v/UbZChyqZciXEBWEbON8sODroQTR9y1f7VUiqctLQ4FPfzWk9D2Ta09NU3NLTp\n2Lgp+spHLiazTRuIru0DyVZGivQgSdsLUq+YYVbMcFTMCClmBnqaZqaW0xK9YsWjYsU7xUqw\nipVUfG0roVesRFGspOorrZSH1rNiJlVg0wxZapuhVIFNM4TYNkPo22aIbPtciFxlpXBKqQLb\nZrgmvxBr8MvAorBPosBPTqGfnII/eQX/+bJsiKHGvzQTlAZAsW4AhajgT1HBn3oFf+oV/Nkq\n+LNV8GdU8GdU8GdS8GdS8Geu8S9Sz6w0AGalAQxh2makbgC56BT82Sn4s6/xL814pQGMF7q0\n1walBcx/9Fpi3QIKUWkA3CsNgHvl5her4C9WwV9QwV9QwV9IwV9IwV9Yuf2FFfhFFPhFFPhF\nFPjF1fAXtfCl+wNnw7r8ZW5kc3RyZWFtCmVuZG9iago3OSAwIG9iago8PCAvVHlwZSAvUGFn\nZSAvUGFyZW50IDMgMCBSIC9Db250ZW50cyA4MCAwIFIgL1Jlc291cmNlcyA0IDAgUiA+Pgpl\nbmRvYmoKODAgMCBvYmoKPDwKL0xlbmd0aCA3MDI4IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+\nCnN0cmVhbQp4nKV8W6stSXLe+/4V61EGe6nyVln5KmEbBDLI3aAHIYQY2djD2TLjMejvO+O7\nRNUaphsaPXSfHRH1xSUrMiNvtcrrb17l9fvXH77+7vWH11jvo79me/f+6qW/Z321Wd6jvv7v\n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\nawuMY7ZiXCGXq4A6/yZTdvNsddPj3xKJvTU5jnPu3V/c/bqYn/15nKTmZkrM7uELiTnc/Ypf\nU6Dfw9ExWTofHO3j73pw4wJfBof0eNvSf4sC+Jr5aXhDdLge0IYxGm4BXBMsq4A27AI85kx5\nFdCGXcCzRVd76ALeUv1Xi+MgF5mUVCeuibSbFDYZ33N5A7IH2dmOLBuQxUaTpSPHFXk6NDkZ\ntsjYNKqHJ/OUsTXc1XmmUQc7HAb3hLdhF8AArFsFtGEX4D0c+hTQhl1A29NjQL/FN/hfnEmR\nsn+0/4u5e5XrYjApjeSwMZkFXpeR7DZf2vNo4JG9+dpis3FhzW9vapfdScmcqP+OJ+V/ukUS\nI7YZSUxBu4vGZ6w80M6QivGlB5H7cVsVzEhl6kFYBTIbWOoJU8ACZujBkg2XR7DUCvUbyra2\n4Ql16Mmee5hrSw0rGGynw1Ore7atZCKv4GI4P4NlvGoazGJYVewY5Kgly3mp1ulQ203sQfUa\niC0wqyCYTgPDeH9pIFpD1sAIZlLBUn2sgPCTU3XCT07VCT85VUoeG5kCwk9W1Qk/WU1nveFt\nVEEwNZ3tTtRAMLWSMVxkNZ0ME1lNJ3tviirFZ1O0kjGeSkXVKbmeEAUMYGol4wCmqjP6enNo\nYDZZKxmjFWZVZwJT1VkvFlVKzk935j9gAVPVif6UNZ3egqmVzKPnJ01nezZpYB5vypdB9rWp\nayCYmk4PDyVVCjyUtJJ5eCipOuGhqOqEh6JWMg8PRVUnPBRVnfBQ1Erm4aGo6oSHoqoTHgqq\nFHgoqCWDh4KqEx4Kmk6Bh4JWsvpuCJrO9rLWQDC1kgk8JJpOgYdE0ynwkKhS4CHRSiYyPnI0\nEExVJzwkz0rWv1MOhr+5Kd/OZW5kc3RyZWFtCmVuZG9iago4NSAwIG9iago8PCAvVHlwZSAv\nUGFnZSAvUGFyZW50IDMgMCBSIC9Db250ZW50cyA4NiAwIFIgL1Jlc291cmNlcyA0IDAgUiA+\nPgplbmRvYmoKODYgMCBvYmoKPDwKL0xlbmd0aCA3MDMyIC9GaWx0ZXIgL0ZsYXRlRGVjb2Rl\nCj4+CnN0cmVhbQp4nKV8W8s1yVLm/fsr1qXCzLLyXHWrOAOCA043eCEislV006/Ddgv+/cl4\nDlG1NrsbGi/66zci8olDrsyMzKisKq+/epXXb1+/+/qb1+9e43of/bXau/dXL/296qut8h71\n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\nb7u9R3nKG7b+wppq3lUnp8Qqm9gj9rqp+/CuOm1Tbr+I/fBbscQD8hO+6BlfcrD2hfVIVBWX\nMls8xj9N0buJUW45MnliRQ0/40sOrsIntsaql7qrz99pW3L5JezTb8eCon/4sqZiEQc3asJ6\nPVH26NHTfDRBCvYqLg5bXpHJjTW1/IQjOSiDG7v9OW7dpBx5PW+5/CL2w2/HcrkMpiuh5vCm\nXVgvE+Wd3UVtd1GMYFL0rmOUW45MnlhSNZ+iJQe39IzlvTzrrvkUzbYlt6fEfvitWPZPdrLE\nuJhfzLn9OeT9HjUVD9dF0d6JUW45dwHGkqJuthZHsRBbcSXBukk58qPfcnkq7NNvx7IisBgV\nug9jzvYn5u9ufNH7WBdjKB2mYC/+vG45MrmxomrePErOwvwVdvvab92k3E9XTbk9JfbDb8Wy\n9cVsHDUG8veTg7vjrSG/xtG7hHcdI5gUvRsY5ZYjkydWVM3ZZQ5e5jG243Ue6ybF1rRtufwS\n9um3YxmYjQ1V2u8Hp6NSG9Yjv7Is1xruZYuivQujXPKOy9nGiqJutDbnxCorbFvIs9JNypGH\nbcvlqbBPvx3LxRJFi3Xv+8nB09uwHruAgae3bbscI5gUvWsY5ZZ3PBAzVlTLVdacEjvCxOKJ\nYOo+XHtL25TbL2I//FYsW19l8bRwP5acHifpsB75teP5U9v/ixHc80lXi3rccctPFHuNFXXv\n3sxByS+x2FOl7nv3ZtuSyy9hn347FmxvouRxOhZxsD0P65Ff54gKW4uhe5mCvYErUJYPZnJh\nTdWM3BwU8RKLrX3qPp6Rw7bk8ovYD78VS0ylhcKVx5g5HCfxGOpCSSTGUDyGWqboHSZ9ypnJ\njRV1jzFzOE6M5Riy7nuM2bbk8kvYp9+OpbMIcrg+lhzuewbe44kiCbxbGMGkaA9vdFo+mcmF\nNXW4PmbOPOkdsXNhXyrdpBx52Lacfhn79NuxnNizrxYr3feTg5t6YS928WtG0aHtTokRTIre\nsXhlOTO5sKaab+kmp8I7YzHUUjco99M1Um6/iP3wW7FsfShr3L+LOYXeMb+63wdG8ON3mZPF\nJMmZyY0V9fhdyJnI1saq36X78bvItuX0y9in344Fr+tFWUPPkpLTolWbzK9x1Wv/svPCCCYF\newvvd1q+mMmFNVVyBphzxAne2HXFcwfrJsVYaNty+UXsh9+KZeEtPpTVFIs5M07ZeJv5RDmq\n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\nnk0wjJ0Vw4U49wL6/LukbPLsNenxtURy3poch5xHi+njr+ns6s8qSV+bsTCHpy8U5vTwK35N\ngX53Z+dk6bpjOsbfXcfDBF86Rnm8reV/QAN8X/lxeE90+jygDmM0rga4vsCyDqjDJsAjZ8rr\ngDpsArYmXa+hCXhL919tDkMuKimpT9wX0u7S2GR8y3U7kD3IbBuy7EAWG02WhhzX5HHT5GSc\nRcXGkXjuh0PFnuHc5xlHDcyoeIPXYRPg8K8JqMMmwEtoA+qwCahrWgW0S3yD/4VNipT9yv4v\n1u5VLmO/V3LYmeyCM8EPZN59au/zmr373OJkxd747U3HZbNTskvUfg475X9OiyRGbDWSmFLQ\n8f6HxbSjgy4V40sLoudxBWYcG0lj5tLvMIVZwAwtGLPJaxBMaUFOQyVHlHEme9fCzvlNZrZg\n89aiXNzkrkfd1pqlSc7YDXlr7jzsjwqjgW5LMfvUzO0QGzVZjOq4LV22mdiD6jUQS3ROBcFk\nDQzDBaaBxXDWwAhmUkEwgwbCUKzqhKFY1QlDsSoFjWCrgTCUVXXCUFbT2V/xNqogmJrOeilq\nIJhayxxsZDWdDiaymk7nvSmqFBxORWuZw1upqDoFTFVnAFNrmQtgqjojmKrOfm9oLXM4C7Oq\nM4Gp6uxvFlVKzptL8x+wgKnqLGBqOr31/TbXQLweNZ313aSBebgqXwZx6CVNp3dgajo9PJRU\nKfBQ0lrm4aGk6oSHoqoTHopayzw8FFWd8FBUdcJDUWuZh4eiqhMeiqpOeCioUuChoLYMHgqq\nTngoaDoFHgpay8QOzw4FHJ/WGgim1jKBh0TTKfCQaDoFHhJVCjwkWstEhleOBoKp6oSHZKtl\nnDZX80n3F2hd37plbmRzdHJlYW0KZW5kb2JqCjMgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9L\naWRzIFsgNyAwIFIgOSAwIFIgMTEgMCBSIDEzIDAgUiAxNSAwIFIgMTcgMCBSIDE5IDAgUiAy\nMSAwIFIgMjMgMCBSIDI1IDAgUiAyNyAwIFIgMjkgMCBSIDMxIDAgUiAzMyAwIFIgMzUgMCBS\nIDM3IDAgUiAzOSAwIFIgNDEgMCBSIDQzIDAgUiA0NSAwIFIgNDcgMCBSIDQ5IDAgUiA1MSAw\nIFIgNTMgMCBSIDU1IDAgUiA1NyAwIFIgNTkgMCBSIDYxIDAgUiA2MyAwIFIgNjUgMCBSIDY3\nIDAgUiA2OSAwIFIgNzEgMCBSIDczIDAgUiA3NSAwIFIgNzcgMCBSIDc5IDAgUiA4MSAwIFIg\nODMgMCBSIDg1IDAgUiA4NyAwIFIgODkgMCBSIF0gL0NvdW50IDQyIC9NZWRpYUJveCBbMCAw\nIDUwNCA1MDRdID4+CmVuZG9iago0IDAgb2JqCjw8Ci9Qcm9jU2V0IFsvUERGIC9UZXh0XQov\nRm9udCA8PC9GMiA5MiAwIFIgL0YzIDkzIDAgUiA+PgovRXh0R1N0YXRlIDw8ID4+Ci9Db2xv\nclNwYWNlIDw8IC9zUkdCIDUgMCBSID4+Cj4+CmVuZG9iago1IDAgb2JqClsvSUNDQmFzZWQg\nNiAwIFJdCmVuZG9iago2IDAgb2JqCjw8IC9BbHRlcm5hdGUgL0RldmljZVJHQiAvTiAzIC9M\nZW5ndGggMjU5NiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJydlndUU9kWh8+9\nN71QkhCKlNBraFICSA29SJEuKjEJEErAkAAiNkRUcERRkaYIMijggKNDkbEiioUBUbHrBBlE\n1HFwFBuWSWStGd+8ee/Nm98f935rn73P3Wfvfda6AJD8gwXCTFgJgAyhWBTh58WIjYtnYAcB\nDPAAA2wA4HCzs0IW+EYCmQJ82IxsmRP4F726DiD5+yrTP4zBAP+flLlZIjEAUJiM5/L42VwZ\nF8k4PVecJbdPyZi2NE3OMErOIlmCMlaTc/IsW3z2mWUPOfMyhDwZy3PO4mXw5Nwn4405Er6M\nkWAZF+cI+LkyviZjg3RJhkDGb+SxGXxONgAoktwu5nNTZGwtY5IoMoIt43kA4EjJX/DSL1jM\nzxPLD8XOzFouEiSniBkmXFOGjZMTi+HPz03ni8XMMA43jSPiMdiZGVkc4XIAZs/8WRR5bRmy\nIjvYODk4MG0tbb4o1H9d/JuS93aWXoR/7hlEH/jD9ld+mQ0AsKZltdn6h21pFQBd6wFQu/2H\nzWAvAIqyvnUOfXEeunxeUsTiLGcrq9zcXEsBn2spL+jv+p8Of0NffM9Svt3v5WF485M4knQx\nQ143bmZ6pkTEyM7icPkM5p+H+B8H/nUeFhH8JL6IL5RFRMumTCBMlrVbyBOIBZlChkD4n5r4\nD8P+pNm5lona+BHQllgCpSEaQH4eACgqESAJe2Qr0O99C8ZHA/nNi9GZmJ37z4L+fVe4TP7I\nFiR/jmNHRDK4ElHO7Jr8WgI0IABFQAPqQBvoAxPABLbAEbgAD+ADAkEoiARxYDHgghSQAUQg\nFxSAtaAYlIKtYCeoBnWgETSDNnAYdIFj4DQ4By6By2AE3AFSMA6egCnwCsxAEISFyBAVUod0\nIEPIHLKFWJAb5AMFQxFQHJQIJUNCSAIVQOugUqgcqobqoWboW+godBq6AA1Dt6BRaBL6FXoH\nIzAJpsFasBFsBbNgTzgIjoQXwcnwMjgfLoK3wJVwA3wQ7oRPw5fgEVgKP4GnEYAQETqiizAR\nFsJGQpF4JAkRIauQEqQCaUDakB6kH7mKSJGnyFsUBkVFMVBMlAvKHxWF4qKWoVahNqOqUQdQ\nnag+1FXUKGoK9RFNRmuizdHO6AB0LDoZnYsuRlegm9Ad6LPoEfQ4+hUGg6FjjDGOGH9MHCYV\nswKzGbMb0445hRnGjGGmsVisOtYc64oNxXKwYmwxtgp7EHsSewU7jn2DI+J0cLY4X1w8Togr\nxFXgWnAncFdwE7gZvBLeEO+MD8Xz8MvxZfhGfA9+CD+OnyEoE4wJroRIQiphLaGS0EY4S7hL\neEEkEvWITsRwooC4hlhJPEQ8TxwlviVRSGYkNimBJCFtIe0nnSLdIr0gk8lGZA9yPFlM3kJu\nJp8h3ye/UaAqWCoEKPAUVivUKHQqXFF4pohXNFT0VFysmK9YoXhEcUjxqRJeyUiJrcRRWqVU\no3RU6YbStDJV2UY5VDlDebNyi/IF5UcULMWI4kPhUYoo+yhnKGNUhKpPZVO51HXURupZ6jgN\nQzOmBdBSaaW0b2iDtCkVioqdSrRKnkqNynEVKR2hG9ED6On0Mvph+nX6O1UtVU9Vvuom1TbV\nK6qv1eaoeajx1UrU2tVG1N6pM9R91NPUt6l3qd/TQGmYaYRr5Grs0Tir8XQObY7LHO6ckjmH\n59zWhDXNNCM0V2ju0xzQnNbS1vLTytKq0jqj9VSbru2hnaq9Q/uE9qQOVcdNR6CzQ+ekzmOG\nCsOTkc6oZPQxpnQ1df11Jbr1uoO6M3rGelF6hXrtevf0Cfos/ST9Hfq9+lMGOgYhBgUGrQa3\nDfGGLMMUw12G/YavjYyNYow2GHUZPTJWMw4wzjduNb5rQjZxN1lm0mByzRRjyjJNM91tetkM\nNrM3SzGrMRsyh80dzAXmu82HLdAWThZCiwaLG0wS05OZw2xljlrSLYMtCy27LJ9ZGVjFW22z\n6rf6aG1vnW7daH3HhmITaFNo02Pzq62ZLde2xvbaXPJc37mr53bPfW5nbse322N3055qH2K/\nwb7X/oODo4PIoc1h0tHAMdGx1vEGi8YKY21mnXdCO3k5rXY65vTW2cFZ7HzY+RcXpkuaS4vL\no3nG8/jzGueNueq5clzrXaVuDLdEt71uUnddd457g/sDD30PnkeTx4SnqWeq50HPZ17WXiKv\nDq/XbGf2SvYpb8Tbz7vEe9CH4hPlU+1z31fPN9m31XfKz95vhd8pf7R/kP82/xsBWgHcgOaA\nqUDHwJWBfUGkoAVB1UEPgs2CRcE9IXBIYMj2kLvzDecL53eFgtCA0O2h98KMw5aFfR+OCQ8L\nrwl/GGETURDRv4C6YMmClgWvIr0iyyLvRJlESaJ6oxWjE6Kbo1/HeMeUx0hjrWJXxl6K04gT\nxHXHY+Oj45vipxf6LNy5cDzBPqE44foi40V5iy4s1licvvj4EsUlnCVHEtGJMYktie85oZwG\nzvTSgKW1S6e4bO4u7hOeB28Hb5Lvyi/nTyS5JpUnPUp2Td6ePJninlKR8lTAFlQLnqf6p9al\nvk4LTduf9ik9Jr09A5eRmHFUSBGmCfsytTPzMoezzLOKs6TLnJftXDYlChI1ZUPZi7K7xTTZ\nz9SAxESyXjKa45ZTk/MmNzr3SJ5ynjBvYLnZ8k3LJ/J9879egVrBXdFboFuwtmB0pefK+lXQ\nqqWrelfrry5aPb7Gb82BtYS1aWt/KLQuLC98uS5mXU+RVtGaorH1futbixWKRcU3NrhsqNuI\n2ijYOLhp7qaqTR9LeCUXS61LK0rfb+ZuvviVzVeVX33akrRlsMyhbM9WzFbh1uvb3LcdKFcu\nzy8f2x6yvXMHY0fJjpc7l+y8UGFXUbeLsEuyS1oZXNldZVC1tep9dUr1SI1XTXutZu2m2te7\nebuv7PHY01anVVda926vYO/Ner/6zgajhop9mH05+x42Rjf2f836urlJo6m06cN+4X7pgYgD\nfc2Ozc0tmi1lrXCrpHXyYMLBy994f9Pdxmyrb6e3lx4ChySHHn+b+O31w0GHe4+wjrR9Z/hd\nbQe1o6QT6lzeOdWV0iXtjusePhp4tLfHpafje8vv9x/TPVZzXOV42QnCiaITn07mn5w+lXXq\n6enk02O9S3rvnIk9c60vvG/wbNDZ8+d8z53p9+w/ed71/LELzheOXmRd7LrkcKlzwH6g4wf7\nHzoGHQY7hxyHui87Xe4Znjd84or7ldNXva+euxZw7dLI/JHh61HXb95IuCG9ybv56Fb6ree3\nc27P3FlzF3235J7SvYr7mvcbfjT9sV3qID0+6j068GDBgztj3LEnP2X/9H686CH5YcWEzkTz\nI9tHxyZ9Jy8/Xvh4/EnWk5mnxT8r/1z7zOTZd794/DIwFTs1/lz0/NOvm1+ov9j/0u5l73TY\n9P1XGa9mXpe8UX9z4C3rbf+7mHcTM7nvse8rP5h+6PkY9PHup4xPn34D94Tz+2VuZHN0cmVh\nbQplbmRvYmoKOTEgMCBvYmoKPDwKL1R5cGUgL0VuY29kaW5nIC9CYXNlRW5jb2RpbmcgL1dp\nbkFuc2lFbmNvZGluZwovRGlmZmVyZW5jZXMgWyA0NS9taW51cyA5Ni9xdW90ZWxlZnQKMTQ0\nL2RvdGxlc3NpIC9ncmF2ZSAvYWN1dGUgL2NpcmN1bWZsZXggL3RpbGRlIC9tYWNyb24gL2Jy\nZXZlIC9kb3RhY2NlbnQKL2RpZXJlc2lzIC8ubm90ZGVmIC9yaW5nIC9jZWRpbGxhIC8ubm90\nZGVmIC9odW5nYXJ1bWxhdXQgL29nb25layAvY2Fyb24gL3NwYWNlXQo+PgplbmRvYmoKOTIg\nMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1R5cGUxIC9OYW1lIC9GMiAvQmFzZUZv\nbnQgL0hlbHZldGljYQovRW5jb2RpbmcgOTEgMCBSID4+CmVuZG9iago5MyAwIG9iago8PCAv\nVHlwZSAvRm9udCAvU3VidHlwZSAvVHlwZTEgL05hbWUgL0YzIC9CYXNlRm9udCAvSGVsdmV0\naWNhLUJvbGQKL0VuY29kaW5nIDkxIDAgUiA+PgplbmRvYmoKeHJlZgowIDk0CjAwMDAwMDAw\nMDAgNjU1MzUgZiAKMDAwMDAwMDAyMSAwMDAwMCBuIAowMDAwMDAwMTYzIDAwMDAwIG4gCjAw\nMDAwNjAzNDYgMDAwMDAgbiAKMDAwMDA2MDcxNiAwMDAwMCBuIAowMDAwMDYwODM5IDAwMDAw\nIG4gCjAwMDAwNjA4NzIgMDAwMDAgbiAKMDAwMDAwMDIxMiAwMDAwMCBuIAowMDAwMDAwMjky\nIDAwMDAwIG4gCjAwMDAwMDE1MDEgMDAwMDAgbiAKMDAwMDAwMTU4MiAwMDAwMCBuIAowMDAw\nMDAyNTIzIDAwMDAwIG4gCjAwMDAwMDI2MDUgMDAwMDAgbiAKMDAwMDAwMzU0NiAwMDAwMCBu\nIAowMDAwMDAzNjI4IDAwMDAwIG4gCjAwMDAwMDQ4ODQgMDAwMDAgbiAKMDAwMDAwNDk2NiAw\nMDAwMCBuIAowMDAwMDA2MDY0IDAwMDAwIG4gCjAwMDAwMDYxNDYgMDAwMDAgbiAKMDAwMDAw\nNzI0NCAwMDAwMCBuIAowMDAwMDA3MzI2IDAwMDAwIG4gCjAwMDAwMDg1MzYgMDAwMDAgbiAK\nMDAwMDAwODYxOCAwMDAwMCBuIAowMDAwMDA5NTU5IDAwMDAwIG4gCjAwMDAwMDk2NDEgMDAw\nMDAgbiAKMDAwMDAxMDU4MiAwMDAwMCBuIAowMDAwMDEwNjY0IDAwMDAwIG4gCjAwMDAwMTE5\nMjAgMDAwMDAgbiAKMDAwMDAxMjAwMiAwMDAwMCBuIAowMDAwMDEzMTAwIDAwMDAwIG4gCjAw\nMDAwMTMxODIgMDAwMDAgbiAKMDAwMDAxNDI4MCAwMDAwMCBuIAowMDAwMDE0MzYyIDAwMDAw\nIG4gCjAwMDAwMTU1NjYgMDAwMDAgbiAKMDAwMDAxNTY0OCAwMDAwMCBuIAowMDAwMDE2NTQ4\nIDAwMDAwIG4gCjAwMDAwMTY2MzAgMDAwMDAgbiAKMDAwMDAxNzUzMCAwMDAwMCBuIAowMDAw\nMDE3NjEyIDAwMDAwIG4gCjAwMDAwMTg4NDQgMDAwMDAgbiAKMDAwMDAxODkyNiAwMDAwMCBu\nIAowMDAwMDIwMDcwIDAwMDAwIG4gCjAwMDAwMjAxNTIgMDAwMDAgbiAKMDAwMDAyMTI5NiAw\nMDAwMCBuIAowMDAwMDIxMzc4IDAwMDAwIG4gCjAwMDAwMjI1ODIgMDAwMDAgbiAKMDAwMDAy\nMjY2NCAwMDAwMCBuIAowMDAwMDIzNTY0IDAwMDAwIG4gCjAwMDAwMjM2NDYgMDAwMDAgbiAK\nMDAwMDAyNDU0NiAwMDAwMCBuIAowMDAwMDI0NjI4IDAwMDAwIG4gCjAwMDAwMjU4NjAgMDAw\nMDAgbiAKMDAwMDAyNTk0MiAwMDAwMCBuIAowMDAwMDI3MDg2IDAwMDAwIG4gCjAwMDAwMjcx\nNjggMDAwMDAgbiAKMDAwMDAyODMxMiAwMDAwMCBuIAowMDAwMDI4Mzk0IDAwMDAwIG4gCjAw\nMDAwMjk1NTYgMDAwMDAgbiAKMDAwMDAyOTYzOCAwMDAwMCBuIAowMDAwMDMwNzIwIDAwMDAw\nIG4gCjAwMDAwMzA4MDIgMDAwMDAgbiAKMDAwMDAzMTg4NCAwMDAwMCBuIAowMDAwMDMxOTY2\nIDAwMDAwIG4gCjAwMDAwMzMyMDggMDAwMDAgbiAKMDAwMDAzMzI5MCAwMDAwMCBuIAowMDAw\nMDM0MzI4IDAwMDAwIG4gCjAwMDAwMzQ0MTAgMDAwMDAgbiAKMDAwMDAzNTQ0OCAwMDAwMCBu\nIAowMDAwMDM1NTMwIDAwMDAwIG4gCjAwMDAwMzY2NTAgMDAwMDAgbiAKMDAwMDAzNjczMiAw\nMDAwMCBuIAowMDAwMDM3Nzg4IDAwMDAwIG4gCjAwMDAwMzc4NzAgMDAwMDAgbiAKMDAwMDAz\nODkyNiAwMDAwMCBuIAowMDAwMDM5MDA4IDAwMDAwIG4gCjAwMDAwNDAyNDggMDAwMDAgbiAK\nMDAwMDA0MDMzMCAwMDAwMCBuIAowMDAwMDQxMTE5IDAwMDAwIG4gCjAwMDAwNDEyMDEgMDAw\nMDAgbiAKMDAwMDA0MTk5MCAwMDAwMCBuIAowMDAwMDQyMDcyIDAwMDAwIG4gCjAwMDAwNDkx\nNzMgMDAwMDAgbiAKMDAwMDA0OTI1NSAwMDAwMCBuIAowMDAwMDUwMTczIDAwMDAwIG4gCjAw\nMDAwNTAyNTUgMDAwMDAgbiAKMDAwMDA1MTE3MyAwMDAwMCBuIAowMDAwMDUxMjU1IDAwMDAw\nIG4gCjAwMDAwNTgzNjAgMDAwMDAgbiAKMDAwMDA1ODQ0MiAwMDAwMCBuIAowMDAwMDU5MzUz\nIDAwMDAwIG4gCjAwMDAwNTk0MzUgMDAwMDAgbiAKMDAwMDA2MzU2NyAwMDAwMCBuIAowMDAw\nMDYzODI1IDAwMDAwIG4gCjAwMDAwNjM5MjMgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSA5\nNCAvSW5mbyAxIDAgUiAvUm9vdCAyIDAgUiA+PgpzdGFydHhyZWYKNjQwMjYKJSVFT0YK","type":"binary"},{"name":"tests/testthat/_snaps/plot_dataframe_raw/simple-raw-data-plot-keep.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='534.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='534.92' style='stroke-width: 1.07; stroke: #00FF00; fill: #00FF00;' />\n<polyline points='20.20,484.76 714.52,484.76 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,387.50 714.52,387.50 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,290.24 714.52,290.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,192.99 714.52,192.99 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,95.73 714.52,95.73 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,533.39 714.52,533.39 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,436.13 714.52,436.13 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,338.87 714.52,338.87 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,241.62 714.52,241.62 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,144.36 714.52,144.36 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,47.10 714.52,47.10 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='533.39' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='436.13' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='338.87' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='241.62' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='144.36' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='47.10' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='536.42' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='439.16' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='341.90' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='244.64' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='147.38' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='50.13' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,533.39 20.20,533.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,436.13 20.20,436.13 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,338.87 20.20,338.87 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,241.62 20.20,241.62 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,144.36 20.20,144.36 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,47.10 20.20,47.10 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_dataframe_raw/simple-raw-data-plot-negative-od.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<defs>\n  <clipPath id='cpMTguMjR8NzE0LjUyfDIyLjc4fDU1Ny43MQ=='>\n    <rect x='18.24' y='22.78' width='696.28' height='534.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMTguMjR8NzE0LjUyfDIyLjc4fDU1Ny43MQ==)'>\n<rect x='18.24' y='22.78' width='696.28' height='534.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='18.24,484.76 714.52,484.76 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,387.50 714.52,387.50 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,290.24 714.52,290.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,192.99 714.52,192.99 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,95.73 714.52,95.73 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='113.18,557.71 113.18,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='239.78,557.71 239.78,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='366.38,557.71 366.38,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='492.98,557.71 492.98,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.57,557.71 619.57,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,533.39 714.52,533.39 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,436.13 714.52,436.13 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,338.87 714.52,338.87 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,241.62 714.52,241.62 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,144.36 714.52,144.36 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='18.24,47.10 714.52,47.10 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='49.89,557.71 49.89,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='176.48,557.71 176.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='303.08,557.71 303.08,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='429.68,557.71 429.68,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.27,557.71 556.27,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.87,557.71 682.87,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='49.89' cy='533.39' r='1.95' style='stroke-width: 0.71; stroke: #FF0000; stroke-opacity: 0.75; fill: #FF0000; fill-opacity: 0.75;' />\n<circle cx='176.48' cy='436.13' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='303.08' cy='338.87' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='429.68' cy='241.62' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.27' cy='144.36' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.87' cy='47.10' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='13.30' y='536.42' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='7.82px' lengthAdjust='spacingAndGlyphs'>-1<\/text>\n<text x='13.30' y='439.16' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='13.30' y='341.90' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='13.30' y='244.64' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='13.30' y='147.38' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='13.30' y='50.13' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<polyline points='15.50,533.39 18.24,533.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='15.50,436.13 18.24,436.13 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='15.50,338.87 18.24,338.87 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='15.50,241.62 18.24,241.62 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='15.50,144.36 18.24,144.36 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='15.50,47.10 18.24,47.10 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='49.89,560.45 49.89,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='176.48,560.45 176.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='303.08,560.45 303.08,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='429.68,560.45 429.68,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.27,560.45 556.27,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.87,560.45 682.87,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='49.89' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='176.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='303.08' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='429.68' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.27' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.87' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='18.24' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_dataframe_raw/simple-raw-data-plot-remove.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='534.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='534.92' style='stroke-width: 1.07; stroke: #FF0000; fill: #FF0000;' />\n<polyline points='20.20,484.76 714.52,484.76 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,387.50 714.52,387.50 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,290.24 714.52,290.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,192.99 714.52,192.99 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,95.73 714.52,95.73 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,533.39 714.52,533.39 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,436.13 714.52,436.13 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,338.87 714.52,338.87 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,241.62 714.52,241.62 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,144.36 714.52,144.36 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,47.10 714.52,47.10 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='533.39' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='436.13' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='338.87' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='241.62' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='144.36' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='47.10' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='536.42' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='439.16' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='341.90' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='244.64' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='147.38' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='50.13' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,533.39 20.20,533.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,436.13 20.20,436.13 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,338.87 20.20,338.87 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,241.62 20.20,241.62 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,144.36 20.20,144.36 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,47.10 20.20,47.10 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_dataframe_raw/simple-raw-data-plot.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='534.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='534.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,484.76 714.52,484.76 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,387.50 714.52,387.50 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,290.24 714.52,290.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,192.99 714.52,192.99 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,95.73 714.52,95.73 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,533.39 714.52,533.39 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,436.13 714.52,436.13 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,338.87 714.52,338.87 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,241.62 714.52,241.62 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,144.36 714.52,144.36 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,47.10 714.52,47.10 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='533.39' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='436.13' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='338.87' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='241.62' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='144.36' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='47.10' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='536.42' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='439.16' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='341.90' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='244.64' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='147.38' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='50.13' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,533.39 20.20,533.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,436.13 20.20,436.13 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,338.87 20.20,338.87 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,241.62 20.20,241.62 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,144.36 20.20,144.36 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,47.10 20.20,47.10 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_raw_data/plot-grid-keep-example.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='288.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='246.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,236.03 714.52,236.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,191.14 714.52,191.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,146.24 714.52,146.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,101.35 714.52,101.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,56.45 714.52,56.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,269.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,269.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,269.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,269.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,269.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,258.48 714.52,258.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,213.59 714.52,213.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,168.69 714.52,168.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,123.80 714.52,123.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,78.90 714.52,78.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,34.01 714.52,34.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,269.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,269.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,269.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,269.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,269.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,269.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='258.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='213.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='168.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='123.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='78.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='34.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='261.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='216.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='171.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='126.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='81.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='37.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,258.48 20.20,258.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,213.59 20.20,213.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,168.69 20.20,168.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,123.80 20.20,123.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,78.90 20.20,78.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,34.01 20.20,34.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,272.45 51.76,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,272.45 178.00,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,272.45 304.24,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,272.45 430.48,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,272.45 556.72,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,272.45 682.96,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA=='>\n    <rect x='0.00' y='288.00' width='720.00' height='288.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA==)'>\n<rect x='0.00' y='288.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE='>\n    <rect x='20.20' y='310.78' width='694.32' height='246.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE=)'>\n<rect x='20.20' y='310.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #00FF00; fill: #00FF00;' />\n<polyline points='20.20,524.03 714.52,524.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,479.14 714.52,479.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,434.24 714.52,434.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,389.35 714.52,389.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,344.45 714.52,344.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,546.48 714.52,546.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,501.59 714.52,501.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,456.69 714.52,456.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,411.80 714.52,411.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,366.90 714.52,366.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,322.01 714.52,322.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='546.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='501.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='456.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='411.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='366.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='322.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='549.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='504.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='459.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='414.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='369.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='325.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,546.48 20.20,546.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,501.59 20.20,501.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,456.69 20.20,456.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,411.80 20.20,411.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,366.90 20.20,366.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,322.01 20.20,322.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='302.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,236.03 714.52,236.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,191.14 714.52,191.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,146.24 714.52,146.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,101.35 714.52,101.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,56.45 714.52,56.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,269.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,269.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,269.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,269.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,269.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,258.48 714.52,258.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,213.59 714.52,213.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,168.69 714.52,168.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,123.80 714.52,123.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,78.90 714.52,78.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,34.01 714.52,34.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,269.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,269.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,269.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,269.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,269.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,269.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='258.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='213.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='168.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='123.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='78.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='34.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='261.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='216.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='171.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='126.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='81.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='37.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,258.48 20.20,258.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,213.59 20.20,213.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,168.69 20.20,168.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,123.80 20.20,123.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,78.90 20.20,78.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,34.01 20.20,34.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,272.45 51.76,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,272.45 178.00,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,272.45 304.24,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,272.45 430.48,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,272.45 556.72,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,272.45 682.96,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA==)'>\n<rect x='0.00' y='288.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE=)'>\n<rect x='20.20' y='310.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #00FF00; fill: #00FF00;' />\n<polyline points='20.20,524.03 714.52,524.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,479.14 714.52,479.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,434.24 714.52,434.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,389.35 714.52,389.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,344.45 714.52,344.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,546.48 714.52,546.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,501.59 714.52,501.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,456.69 714.52,456.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,411.80 714.52,411.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,366.90 714.52,366.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,322.01 714.52,322.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='546.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='501.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='456.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='411.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='366.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='322.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='549.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='504.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='459.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='414.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='369.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='325.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,546.48 20.20,546.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,501.59 20.20,501.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,456.69 20.20,456.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,411.80 20.20,411.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,366.90 20.20,366.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,322.01 20.20,322.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='302.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_raw_data/plot-grid-remove-example.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='288.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='246.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,236.03 714.52,236.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,191.14 714.52,191.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,146.24 714.52,146.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,101.35 714.52,101.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,56.45 714.52,56.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,269.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,269.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,269.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,269.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,269.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,258.48 714.52,258.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,213.59 714.52,213.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,168.69 714.52,168.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,123.80 714.52,123.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,78.90 714.52,78.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,34.01 714.52,34.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,269.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,269.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,269.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,269.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,269.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,269.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='258.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='213.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='168.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='123.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='78.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='34.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='261.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='216.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='171.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='126.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='81.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='37.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,258.48 20.20,258.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,213.59 20.20,213.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,168.69 20.20,168.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,123.80 20.20,123.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,78.90 20.20,78.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,34.01 20.20,34.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,272.45 51.76,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,272.45 178.00,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,272.45 304.24,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,272.45 430.48,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,272.45 556.72,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,272.45 682.96,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA=='>\n    <rect x='0.00' y='288.00' width='720.00' height='288.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA==)'>\n<rect x='0.00' y='288.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE='>\n    <rect x='20.20' y='310.78' width='694.32' height='246.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE=)'>\n<rect x='20.20' y='310.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #FF0000; fill: #FF0000;' />\n<polyline points='20.20,524.03 714.52,524.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,479.14 714.52,479.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,434.24 714.52,434.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,389.35 714.52,389.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,344.45 714.52,344.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,546.48 714.52,546.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,501.59 714.52,501.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,456.69 714.52,456.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,411.80 714.52,411.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,366.90 714.52,366.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,322.01 714.52,322.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='546.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='501.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='456.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='411.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='366.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='322.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='549.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='504.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='459.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='414.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='369.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='325.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,546.48 20.20,546.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,501.59 20.20,501.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,456.69 20.20,456.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,411.80 20.20,411.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,366.90 20.20,366.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,322.01 20.20,322.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='302.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,236.03 714.52,236.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,191.14 714.52,191.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,146.24 714.52,146.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,101.35 714.52,101.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,56.45 714.52,56.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,269.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,269.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,269.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,269.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,269.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,258.48 714.52,258.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,213.59 714.52,213.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,168.69 714.52,168.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,123.80 714.52,123.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,78.90 714.52,78.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,34.01 714.52,34.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,269.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,269.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,269.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,269.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,269.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,269.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='258.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='213.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='168.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='123.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='78.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='34.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='261.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='216.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='171.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='126.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='81.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='37.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,258.48 20.20,258.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,213.59 20.20,213.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,168.69 20.20,168.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,123.80 20.20,123.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,78.90 20.20,78.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,34.01 20.20,34.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,272.45 51.76,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,272.45 178.00,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,272.45 304.24,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,272.45 430.48,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,272.45 556.72,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,272.45 682.96,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA==)'>\n<rect x='0.00' y='288.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE=)'>\n<rect x='20.20' y='310.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #FF0000; fill: #FF0000;' />\n<polyline points='20.20,524.03 714.52,524.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,479.14 714.52,479.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,434.24 714.52,434.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,389.35 714.52,389.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,344.45 714.52,344.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,546.48 714.52,546.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,501.59 714.52,501.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,456.69 714.52,456.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,411.80 714.52,411.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,366.90 714.52,366.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,322.01 714.52,322.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='546.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='501.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='456.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='411.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='366.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='322.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='549.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='504.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='459.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='414.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='369.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='325.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,546.48 20.20,546.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,501.59 20.20,501.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,456.69 20.20,456.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,411.80 20.20,411.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,366.90 20.20,366.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,322.01 20.20,322.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='302.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_raw_data/plot-grid-simple-example.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='288.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='246.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,236.03 714.52,236.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,191.14 714.52,191.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,146.24 714.52,146.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,101.35 714.52,101.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,56.45 714.52,56.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,269.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,269.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,269.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,269.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,269.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,258.48 714.52,258.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,213.59 714.52,213.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,168.69 714.52,168.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,123.80 714.52,123.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,78.90 714.52,78.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,34.01 714.52,34.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,269.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,269.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,269.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,269.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,269.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,269.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='258.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='213.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='168.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='123.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='78.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='34.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='261.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='216.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='171.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='126.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='81.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='37.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,258.48 20.20,258.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,213.59 20.20,213.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,168.69 20.20,168.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,123.80 20.20,123.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,78.90 20.20,78.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,34.01 20.20,34.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,272.45 51.76,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,272.45 178.00,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,272.45 304.24,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,272.45 430.48,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,272.45 556.72,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,272.45 682.96,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA=='>\n    <rect x='0.00' y='288.00' width='720.00' height='288.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA==)'>\n<rect x='0.00' y='288.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE='>\n    <rect x='20.20' y='310.78' width='694.32' height='246.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE=)'>\n<rect x='20.20' y='310.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,524.03 714.52,524.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,479.14 714.52,479.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,434.24 714.52,434.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,389.35 714.52,389.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,344.45 714.52,344.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,546.48 714.52,546.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,501.59 714.52,501.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,456.69 714.52,456.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,411.80 714.52,411.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,366.90 714.52,366.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,322.01 714.52,322.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='546.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='501.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='456.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='411.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='366.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='322.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='549.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='504.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='459.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='414.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='369.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='325.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,546.48 20.20,546.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,501.59 20.20,501.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,456.69 20.20,456.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,411.80 20.20,411.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,366.90 20.20,366.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,322.01 20.20,322.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='302.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHwyODguMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDI2OS43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,236.03 714.52,236.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,191.14 714.52,191.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,146.24 714.52,146.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,101.35 714.52,101.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,56.45 714.52,56.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,269.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,269.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,269.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,269.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,269.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,258.48 714.52,258.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,213.59 714.52,213.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,168.69 714.52,168.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,123.80 714.52,123.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,78.90 714.52,78.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,34.01 714.52,34.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,269.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,269.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,269.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,269.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,269.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,269.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='258.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='213.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='168.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='123.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='78.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='34.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='261.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>50<\/text>\n<text x='15.27' y='216.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>51<\/text>\n<text x='15.27' y='171.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>52<\/text>\n<text x='15.27' y='126.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>53<\/text>\n<text x='15.27' y='81.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>54<\/text>\n<text x='15.27' y='37.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<polyline points='17.46,258.48 20.20,258.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,213.59 20.20,213.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,168.69 20.20,168.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,123.80 20.20,123.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,78.90 20.20,78.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,34.01 20.20,34.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,272.45 51.76,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,272.45 178.00,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,272.45 304.24,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,272.45 430.48,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,272.45 556.72,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,272.45 682.96,269.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='280.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P02<\/text>\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8Mjg4LjAwfDU3Ni4wMA==)'>\n<rect x='0.00' y='288.00' width='720.00' height='288.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDMxMC43OHw1NTcuNzE=)'>\n<rect x='20.20' y='310.78' width='694.32' height='246.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,524.03 714.52,524.03 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,479.14 714.52,479.14 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,434.24 714.52,434.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,389.35 714.52,389.35 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,344.45 714.52,344.45 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,310.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,546.48 714.52,546.48 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,501.59 714.52,501.59 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,456.69 714.52,456.69 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,411.80 714.52,411.80 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,366.90 714.52,366.90 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,322.01 714.52,322.01 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,310.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='546.48' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='501.59' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='456.69' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='411.80' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='366.90' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='322.01' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='549.51' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='504.62' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='459.72' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='414.83' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='369.93' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='325.04' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,546.48 20.20,546.48 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,501.59 20.20,501.59 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,456.69 20.20,456.69 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,411.80 20.20,411.80 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,366.90 20.20,366.90 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,322.01 20.20,322.01 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='302.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/plot_raw_data/plot-single-simple-example.svg","content":"<?xml version='1.0' encoding='UTF-8' ?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' data-engine-version='2.0' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>\n<defs>\n  <style type='text/css'><![CDATA[\n    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {\n      fill: none;\n      stroke: #000000;\n      stroke-linecap: round;\n      stroke-linejoin: round;\n      stroke-miterlimit: 10.00;\n    }\n  ]]><\/style>\n<\/defs>\n<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>\n<defs>\n  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>\n    <rect x='0.00' y='0.00' width='720.00' height='576.00' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<defs>\n  <clipPath id='cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ=='>\n    <rect x='20.20' y='22.78' width='694.32' height='534.92' />\n  <\/clipPath>\n<\/defs>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='534.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,484.76 714.52,484.76 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,387.50 714.52,387.50 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,290.24 714.52,290.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,192.99 714.52,192.99 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,95.73 714.52,95.73 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,533.39 714.52,533.39 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,436.13 714.52,436.13 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,338.87 714.52,338.87 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,241.62 714.52,241.62 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,144.36 714.52,144.36 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,47.10 714.52,47.10 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='533.39' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='436.13' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='338.87' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='241.62' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='144.36' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='47.10' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='536.42' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='439.16' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='341.90' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='244.64' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='147.38' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='50.13' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,533.39 20.20,533.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,436.13 20.20,436.13 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,338.87 20.20,338.87 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,241.62 20.20,241.62 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,144.36 20.20,144.36 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,47.10 20.20,47.10 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<rect x='0.00' y='0.00' width='720.00' height='576.00' style='stroke-width: 1.07; stroke: #FFFFFF; fill: #FFFFFF;' />\n<\/g>\n<g clip-path='url(#cpMjAuMjB8NzE0LjUyfDIyLjc4fDU1Ny43MQ==)'>\n<rect x='20.20' y='22.78' width='694.32' height='534.92' style='stroke-width: 1.07; stroke: #D3D3D3; fill: #D3D3D3;' />\n<polyline points='20.20,484.76 714.52,484.76 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,387.50 714.52,387.50 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,290.24 714.52,290.24 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,192.99 714.52,192.99 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,95.73 714.52,95.73 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='114.88,557.71 114.88,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='241.12,557.71 241.12,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='367.36,557.71 367.36,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='493.60,557.71 493.60,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='619.84,557.71 619.84,22.78 ' style='stroke-width: 0.53; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,533.39 714.52,533.39 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,436.13 714.52,436.13 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,338.87 714.52,338.87 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,241.62 714.52,241.62 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,144.36 714.52,144.36 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='20.20,47.10 714.52,47.10 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='51.76,557.71 51.76,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='178.00,557.71 178.00,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='304.24,557.71 304.24,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='430.48,557.71 430.48,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='556.72,557.71 556.72,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<polyline points='682.96,557.71 682.96,22.78 ' style='stroke-width: 1.07; stroke: #FFFFFF; stroke-linecap: butt;' />\n<circle cx='51.76' cy='533.39' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='178.00' cy='436.13' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='304.24' cy='338.87' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='430.48' cy='241.62' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='556.72' cy='144.36' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<circle cx='682.96' cy='47.10' r='1.95' style='stroke-width: 0.71; stroke: #000000; stroke-opacity: 0.75; fill: #000000; fill-opacity: 0.75;' />\n<\/g>\n<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>\n<text x='15.27' y='536.42' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>55<\/text>\n<text x='15.27' y='439.16' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>56<\/text>\n<text x='15.27' y='341.90' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>57<\/text>\n<text x='15.27' y='244.64' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>58<\/text>\n<text x='15.27' y='147.38' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>59<\/text>\n<text x='15.27' y='50.13' text-anchor='end' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='9.79px' lengthAdjust='spacingAndGlyphs'>60<\/text>\n<polyline points='17.46,533.39 20.20,533.39 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,436.13 20.20,436.13 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,338.87 20.20,338.87 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,241.62 20.20,241.62 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,144.36 20.20,144.36 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='17.46,47.10 20.20,47.10 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='51.76,560.45 51.76,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='178.00,560.45 178.00,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='304.24,560.45 304.24,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='430.48,560.45 430.48,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='556.72,560.45 556.72,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<polyline points='682.96,560.45 682.96,557.71 ' style='stroke-width: 1.07; stroke: #333333; stroke-linecap: butt;' />\n<text x='51.76' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>0<\/text>\n<text x='178.00' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>1<\/text>\n<text x='304.24' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>2<\/text>\n<text x='430.48' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>3<\/text>\n<text x='556.72' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>4<\/text>\n<text x='682.96' y='568.69' text-anchor='middle' style='font-size: 8.80px; fill: #4D4D4D; font-family: sans;' textLength='4.89px' lengthAdjust='spacingAndGlyphs'>5<\/text>\n<text x='20.20' y='14.56' style='font-size: 13.20px; font-family: sans;' textLength='23.49px' lengthAdjust='spacingAndGlyphs'>P03<\/text>\n<\/g>\n<\/svg>\n","type":"text"},{"name":"tests/testthat/_snaps/predict_calibrated_ods.md","content":"# Normal function\n\n    Code\n      predict_calibrated_ods(calibration_model, read_data)\n    Output\n      $P01\n         hours Calibrated_OD raw_time\n      1      1   -0.02772727        3\n      2      2    0.02636364        4\n      3      3    0.08045455        5\n      4      4    0.13454545        6\n      5      5    0.18863636        7\n      6      6    0.24272727        8\n      7      7    0.29681818        9\n      8      8    0.35090909       10\n      9      9    0.40500000       11\n      10    10    0.45909091       12\n      11    11    0.51318182       13\n      12    12    0.56727273       14\n      13    13    0.62136364       15\n      14    14    0.67545455       16\n      15    15    0.72954545       17\n      16    16    0.78363636       18\n      17    17    0.83772727       19\n      18    18    0.89181818       20\n      19    19    0.94590909       21\n      20    20    1.00000000       22\n      \n      $P02\n         hours Calibrated_OD raw_time\n      1      1   -0.02772727        3\n      2      2    0.02636364        4\n      3      3    0.08045455        5\n      4      4    0.13454545        6\n      5      5    0.18863636        7\n      6      6    0.24272727        8\n      7      7    0.29681818        9\n      8      8    0.35090909       10\n      9      9    0.40500000       11\n      10    10    0.45909091       12\n      11    11    0.51318182       13\n      12    12    0.56727273       14\n      13    13    0.62136364       15\n      14    14    0.67545455       16\n      15    15    0.72954545       17\n      16    16    0.78363636       18\n      17    17    0.83772727       19\n      18    18    0.89181818       20\n      19    19    0.94590909       21\n      20    20    1.00000000       22\n      \n\n","type":"text"},{"name":"tests/testthat/_snaps/raw_pio_od_data_to_wide_frame.md","content":"# Read od_readings.csv file\n\n    Code\n      raw_pio_od_data_to_wide_frame(test_path(\"Data\", \"raw_pio_od_data_to_wide_frame\",\n        \"Two_reactor_test_read.csv\"))\n    Output\n      $pioreactor_OD_data_wide\n                     hours od_reading.P01 od_reading.P08\n      1  0.000000000 hours     0.03084427             NA\n      2  0.004197621 hours             NA     0.01391040\n      3  0.008418898 hours     0.03903061             NA\n      4  0.012606564 hours             NA     0.01042361\n      5  0.016834934 hours     0.03644281             NA\n      6  0.021024167 hours             NA     0.01549249\n      7  0.025252256 hours     0.03295821             NA\n      8  0.029441651 hours             NA     0.01439069\n      9  0.033670211 hours     0.02542879             NA\n      10 0.037859038 hours             NA     0.01699642\n      11 0.042087574 hours     0.03472532             NA\n      12 0.046276628 hours             NA     0.01654550\n      \n      $raw_time\n                     hours timestamp_localtime.P01 timestamp_localtime.P08\n      1  0.000000000 hours     2024-02-12 12:00:59                    <NA>\n      2  0.004197621 hours                    <NA>     2024-02-12 12:01:14\n      3  0.008418898 hours     2024-02-12 12:01:30                    <NA>\n      4  0.012606564 hours                    <NA>     2024-02-12 12:01:45\n      5  0.016834934 hours     2024-02-12 12:02:00                    <NA>\n      6  0.021024167 hours                    <NA>     2024-02-12 12:02:15\n      7  0.025252256 hours     2024-02-12 12:02:30                    <NA>\n      8  0.029441651 hours                    <NA>     2024-02-12 12:02:45\n      9  0.033670211 hours     2024-02-12 12:03:00                    <NA>\n      10 0.037859038 hours                    <NA>     2024-02-12 12:03:16\n      11 0.042087574 hours     2024-02-12 12:03:31                    <NA>\n      12 0.046276628 hours                    <NA>     2024-02-12 12:03:46\n      \n      $file_path\n      [1] \"Data/raw_pio_od_data_to_wide_frame/Two_reactor_test_read.csv\"\n      \n\n","type":"text"},{"name":"tests/testthat/_snaps/spline_growth_integration.md","content":"# simple spline\n\n    Code\n      spline_growth_integration(input_od_data_list)\n    Message\n      Processing Reactor: P01\n      Processing Reactor: P02\n    Output\n            Time  OD_values Reactor OD_values_log  Spline_OD Spline_growth_rate\n      P01.1    1   2.718282     P01          0.01   2.745601                  1\n      P01.2    2   7.389056     P01          1.01   7.463317                  1\n      P01.3    3  20.085537     P01          2.01  20.287400                  1\n      P01.4    4  54.598150     P01          3.01  55.146871                  1\n      P01.5    5 148.413159     P01          4.01 149.904736                  1\n      P02.1    1   2.718282     P02          0.01   2.745601                  1\n      P02.2    2   7.389056     P02          1.01   7.463317                  1\n      P02.3    3  20.085537     P02          2.01  20.287400                  1\n      P02.4    4  54.598150     P02          3.01  55.146871                  1\n      P02.5    5 148.413159     P02          4.01 149.904736                  1\n            Spline_OD_log\n      P01.1          0.01\n      P01.2          1.01\n      P01.3          2.01\n      P01.4          3.01\n      P01.5          4.01\n      P02.1          0.01\n      P02.2          1.01\n      P02.3          2.01\n      P02.4          3.01\n      P02.5          4.01\n\n# spline w. NA\n\n    Code\n      spline_growth_integration(input_od_data_list)\n    Message\n      Processing Reactor: P01\n      Processing Reactor: P02\n    Output\n            Time  OD_values Reactor OD_values_log  Spline_OD Spline_growth_rate\n      P01.2    2   7.389056     P01          0.01   7.463317                  1\n      P01.3    3  20.085537     P01          1.01  20.287400                  1\n      P01.4    4  54.598150     P01          2.01  55.146871                  1\n      P01.5    5 148.413159     P01          3.01 149.904736                  1\n      P02.2    2   7.389056     P02          0.01   7.463317                  1\n      P02.3    3  20.085537     P02          1.01  20.287400                  1\n      P02.4    4  54.598150     P02          2.01  55.146871                  1\n      P02.5    5 148.413159     P02          3.01 149.904736                  1\n            Spline_OD_log\n      P01.2          0.01\n      P01.3          1.01\n      P01.4          2.01\n      P01.5          3.01\n      P02.2          0.01\n      P02.3          1.01\n      P02.4          2.01\n      P02.5          3.01\n\n# spline w. outlier\n\n    Code\n      spline_growth_integration(input_od_data_list)\n    Message\n      Processing Reactor: P01\n      Processing Reactor: P02\n    Output\n            Time  OD_values Reactor OD_values_log  Spline_OD Spline_growth_rate\n      P01.2    2   7.389056     P01          0.01   7.463317                  1\n      P01.3    3  20.085537     P01          1.01  20.287400                  1\n      P01.4    4  54.598150     P01          2.01  55.146871                  1\n      P01.5    5 148.413159     P01          3.01 149.904736                  1\n      P02.2    2   7.389056     P02          0.01   7.463317                  1\n      P02.3    3  20.085537     P02          1.01  20.287400                  1\n      P02.4    4  54.598150     P02          2.01  55.146871                  1\n      P02.5    5 148.413159     P02          3.01 149.904736                  1\n            Spline_OD_log\n      P01.2          0.01\n      P01.3          1.01\n      P01.4          2.01\n      P01.5          3.01\n      P02.2          0.01\n      P02.3          1.01\n      P02.4          2.01\n      P02.5          3.01\n\n# spline w. outlier and NA\n\n    Code\n      spline_growth_integration(input_od_data_list)\n    Message\n      Processing Reactor: P01\n      Processing Reactor: P02\n    Output\n             Time    OD_values Reactor OD_values_log    Spline_OD Spline_growth_rate\n      P01.2     2     7.389056     P01          0.01     7.463317                  1\n      P01.4     4    54.598150     P01          2.01    55.146871                  1\n      P01.5     5   148.413159     P01          3.01   149.904736                  1\n      P01.6     6   403.428793     P01          4.01   407.483320                  1\n      P01.7     7  1096.633158     P01          5.01  1107.654505                  1\n      P01.8     8  2980.957987     P01          6.01  3010.917113                  1\n      P01.9     9  8103.083928     P01          7.01  8184.521276                  1\n      P01.10   10 22026.465795     P01          8.01 22247.835459                  1\n      P02.2     2     7.389056     P02          0.01     7.463317                  1\n      P02.4     4    54.598150     P02          2.01    55.146871                  1\n      P02.5     5   148.413159     P02          3.01   149.904736                  1\n      P02.6     6   403.428793     P02          4.01   407.483320                  1\n      P02.7     7  1096.633158     P02          5.01  1107.654505                  1\n      P02.8     8  2980.957987     P02          6.01  3010.917113                  1\n      P02.9     9  8103.083928     P02          7.01  8184.521276                  1\n      P02.10   10 22026.465795     P02          8.01 22247.835459                  1\n             Spline_OD_log\n      P01.2           0.01\n      P01.4           2.01\n      P01.5           3.01\n      P01.6           4.01\n      P01.7           5.01\n      P01.8           6.01\n      P01.9           7.01\n      P01.10          8.01\n      P02.2           0.01\n      P02.4           2.01\n      P02.5           3.01\n      P02.6           4.01\n      P02.7           5.01\n      P02.8           6.01\n      P02.9           7.01\n      P02.10          8.01\n\n","type":"text"},{"name":"tests/testthat/_snaps/split_od_per_reactor.md","content":"# No fixed_intercept nor zero_point\n\n    Code\n      split_od_per_reactor(input, fixed_intercept = F, add_zero_point = F)\n    Output\n      [1] \"[split_od_per_reactor] - STARING\"\n      [1] \"[split_od_per_reactor] - add_zero_point: FALSE\"\n      [1] \"[split_od_per_reactor] - fixed_intercept: FALSE\"\n      $P01\n      $P01$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      (Intercept)       pio_od  \n          0.04202      0.79832  \n      \n      \n      $P01$calibtation_data\n        name pio_od manual_od\n      1  P01   0.01      0.05\n      2  P01   1.20      1.00\n      \n      \n      $P02\n      $P02$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      (Intercept)       pio_od  \n          0.04202      0.79832  \n      \n      \n      $P02$calibtation_data\n        name pio_od manual_od\n      3  P02   0.01      0.05\n      4  P02   1.20      1.00\n      \n      \n\n# Add fixed_intercept\n\n    Code\n      split_od_per_reactor(input, fixed_intercept = T, add_zero_point = F)\n    Output\n      [1] \"[split_od_per_reactor] - STARING\"\n      [1] \"[split_od_per_reactor] - add_zero_point: FALSE\"\n      [1] \"[split_od_per_reactor] - fixed_intercept: TRUE\"\n      $P01\n      $P01$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      pio_od  \n      0.8336  \n      \n      \n      $P01$calibtation_data\n        name pio_od manual_od\n      1  P01   0.01      0.05\n      2  P01   1.20      1.00\n      \n      \n      $P02\n      $P02$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      pio_od  \n      0.8336  \n      \n      \n      $P02$calibtation_data\n        name pio_od manual_od\n      3  P02   0.01      0.05\n      4  P02   1.20      1.00\n      \n      \n\n# Add zero_point\n\n    Code\n      split_od_per_reactor(input, fixed_intercept = F, add_zero_point = T)\n    Output\n      [1] \"[split_od_per_reactor] - STARING\"\n      [1] \"[split_od_per_reactor] - add_zero_point: TRUE\"\n      [1] \"[split_od_per_reactor] - fixed_intercept: FALSE\"\n      $P01\n      $P01$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      (Intercept)       pio_od  \n          0.02083      0.81612  \n      \n      \n      $P01$calibtation_data\n        name pio_od manual_od\n      1  P01   0.01      0.05\n      2  P01   1.20      1.00\n      3  P01   0.00      0.00\n      \n      \n      $P02\n      $P02$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      (Intercept)       pio_od  \n          0.02083      0.81612  \n      \n      \n      $P02$calibtation_data\n          name pio_od manual_od\n      3    P02   0.01      0.05\n      4    P02   1.20      1.00\n      3.1  P02   0.00      0.00\n      \n      \n\n# Both fixed_intercept and zero_point\n\n    Code\n      split_od_per_reactor(input, fixed_intercept = T, add_zero_point = T)\n    Output\n      [1] \"[split_od_per_reactor] - STARING\"\n      [1] \"[split_od_per_reactor] - add_zero_point: TRUE\"\n      [1] \"[split_od_per_reactor] - fixed_intercept: TRUE\"\n      $P01\n      $P01$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      pio_od  \n      0.8336  \n      \n      \n      $P01$calibtation_data\n        name pio_od manual_od\n      1  P01   0.01      0.05\n      2  P01   1.20      1.00\n      \n      \n      $P02\n      $P02$calibration_model\n      \n      Call:\n      FUN(formula = ..1, data = X[[i]])\n      \n      Coefficients:\n      pio_od  \n      0.8336  \n      \n      \n      $P02$calibtation_data\n        name pio_od manual_od\n      3  P02   0.01      0.05\n      4  P02   1.20      1.00\n      \n      \n\n","type":"text"},{"name":"tests/testthat/test_correct_neg_data_median.R","content":"test_that(\"Single negative\",{\n  n <- 60\n  OD_values <- 1:n\n  OD_values[30] <- -1\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                              \"od_reading.P01\" = OD_values,\n                              \"od_reading.P02\" = OD_values)\n  input_outlier_df <- data.frame(\"hours\" = c(1:n),\n                                 \"od_reading.P01\" = F,\n                                 \"od_reading.P02\" = F)\n  \n  median_corrected_value <- median(OD_values[c(15:29, 31:45)])\n  expected_values <- c(OD_values[1:29], median_corrected_value, OD_values[31:60])\n  expected <- data.frame(\"hours\" = c(1:n),\n                         \"od_reading.P01\" = expected_values,\n                         \"od_reading.P02\" = expected_values)\n  \n  expect_equal(correct_neg_data_median(input_od_data, input_outlier_df),\n               expected)\n})\n\ntest_that(\"multiple consecutive negative\",{\n  n <- 60\n  OD_values <- 1:n\n  OD_values[29:31] <- -1\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                              \"od_reading.P01\" = OD_values,\n                              \"od_reading.P02\" = OD_values)\n  input_outlier_df <- data.frame(\"hours\" = c(1:n),\n                                 \"od_reading.P01\" = F,\n                                 \"od_reading.P02\" = F)\n  \n  values_29 <- OD_values[c(12:28, 30:46)]\n  values_30 <- OD_values[c(13:29, 31:47)]\n  values_31 <- OD_values[c(14:30, 32:48)]\n  \n  median_corrected_value_29 <- median(values_29[values_29>0])\n  median_corrected_value_30 <- median(values_30[values_30>0])\n  median_corrected_value_31 <- median(values_31[values_31>0])\n  expected_values <- c(OD_values[1:28], median_corrected_value_29, \n                       median_corrected_value_30, \n                       median_corrected_value_31, OD_values[32:60])\n  expected <- data.frame(\"hours\" = c(1:n),\n                         \"od_reading.P01\" = expected_values,\n                         \"od_reading.P02\" = expected_values)\n  \n  expect_equal(correct_neg_data_median(input_od_data, input_outlier_df),\n               expected)\n})\n\ntest_that(\"Single negative, w. NA\",{\n  n <- 60\n  OD_values <- 1:n\n  OD_values[30] <- -1\n  OD_values[1] <- NA\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                              \"od_reading.P01\" = OD_values,\n                              \"od_reading.P02\" = OD_values)\n  input_outlier_df <- data.frame(\"hours\" = c(1:n),\n                                 \"od_reading.P01\" = F,\n                                 \"od_reading.P02\" = F)\n  \n  median_corrected_value <- median(OD_values[c(15:29, 31:45)])\n  expected_values <- c(OD_values[1:29], median_corrected_value, OD_values[31:60])\n  expected_values[1] <- NA\n  expected <- data.frame(\"hours\" = c(1:n),\n                         \"od_reading.P01\" = expected_values,\n                         \"od_reading.P02\" = expected_values)\n  \n  expect_equal(correct_neg_data_median(input_od_data, input_outlier_df),\n               expected)\n})\n\ntest_that(\"Single negative, w. NA in window\",{\n  n <- 60\n  OD_values <- 1:n\n  OD_values[30] <- -1\n  OD_values[25] <- NA\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                              \"od_reading.P01\" = OD_values,\n                              \"od_reading.P02\" = OD_values)\n  input_outlier_df <- data.frame(\"hours\" = c(1:n),\n                                 \"od_reading.P01\" = F,\n                                 \"od_reading.P02\" = F)\n  \n  median_corrected_value <- median(OD_values[c(14:29, 31:46)], na.rm = T)\n  expected_values <- c(OD_values[1:29], median_corrected_value, OD_values[31:60])\n  expected <- data.frame(\"hours\" = c(1:n),\n                         \"od_reading.P01\" = expected_values,\n                         \"od_reading.P02\" = expected_values)\n  \n  expect_equal(correct_neg_data_median(input_od_data, input_outlier_df),\n               expected)\n})\n\ntest_that(\"Single negative, w. outliers\",{\n  n <- 60\n  OD_values <- 1:n\n  OD_values[30] <- -1\n  OD_values[1] <- NA\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                              \"od_reading.P01\" = OD_values,\n                              \"od_reading.P02\" = OD_values)\n  input_outlier_df <- data.frame(\"hours\" = c(1:n),\n                                 \"od_reading.P01\" = F,\n                                 \"od_reading.P02\" = F)\n  \n  median_corrected_value <- median(OD_values[c(15:29, 31:45)])\n  expected_values <- c(OD_values[1:29], median_corrected_value, OD_values[31:60])\n  expected <- data.frame(\"hours\" = c(1:n),\n                         \"od_reading.P01\" = expected_values,\n                         \"od_reading.P02\" = expected_values)\n  \n  expect_equal(correct_neg_data_median(input_od_data, input_outlier_df),\n               expected)\n})","type":"text"},{"name":"tests/testthat/test_count_consecutive_negatives.R","content":[],"type":"text"},{"name":"tests/testthat/test_end_of_initial_exp_growth.R","content":[],"type":"text"},{"name":"tests/testthat/test_filter_manual_ods.R","content":"test_that(\"Filtering of manual ods - Remove\", {\n  input_manual_od_readings <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                         \"pio_od\" = rep(c(0.01, 1.20), 2),\n                                         \"manual_od\" = rep(c(0.05, 1.00), 2))\n  \n  input_od_data_list <- list(\"raw_data\" = list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                                                      \"P01\" = 50:55,\n                                                                                      \"P02\" = 100:105),\n                                               \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                                                       \"P01\" = 1:6,\n                                                                       \"P02\" = 7:12)),\n                             \"filtered_data\" = list(\"pioreactor_OD_data_wide\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 50:55),\n                                                    \"raw_time\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 1:6)),\n                             \"filtering_state\" = list(\"reactors_selected\" = c(\"P02\"),\n                                                      \"filtering_strategy\" = \"Remove\"))\n  \n  expected <- data.frame(\"name\" = rep(c(\"P01\"), each = 2),\n                         \"pio_od\" = c(0.01, 1.20),\n                         \"manual_od\" = c(0.05, 1.00))\n  \n  expect_equal(filter_manual_ods(manual_od_readings = input_manual_od_readings, \n                                 od_data_list = input_od_data_list),\n               expected)\n})\n\ntest_that(\"Filtering of manual ods - Keep\", {\n  input_manual_od_readings <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                         \"pio_od\" = rep(c(0.01, 1.20), 2),\n                                         \"manual_od\" = rep(c(0.05, 1.00), 2))\n  \n  input_od_data_list <- list(\"raw_data\" = list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                                                      \"P01\" = 50:55,\n                                                                                      \"P02\" = 100:105),\n                                               \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                                                       \"P01\" = 1:6,\n                                                                       \"P02\" = 7:12)),\n                             \"filtered_data\" = list(\"pioreactor_OD_data_wide\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 50:55),\n                                                    \"raw_time\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 1:6)),\n                             \"filtering_state\" = list(\"reactors_selected\" = c(\"P01\"),\n                                                      \"filtering_strategy\" = \"Keep\"))\n  \n  expected <- data.frame(\"name\" = rep(c(\"P01\"), each = 2),\n                         \"pio_od\" = c(0.01, 1.20),\n                         \"manual_od\" = c(0.05, 1.00))\n  \n  expect_equal(filter_manual_ods(manual_od_readings = input_manual_od_readings, \n                                 od_data_list = input_od_data_list),\n               expected)\n})\n  \n\ntest_that(\"no filtering of manual ods - Keep\", {\n  input_manual_od_readings <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                         \"pio_od\" = rep(c(0.01, 1.20), 2),\n                                         \"manual_od\" = rep(c(0.05, 1.00), 2))\n  \n  input_od_data_list <- list(\"raw_data\" = list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                                                      \"P01\" = 50:55,\n                                                                                      \"P02\" = 100:105),\n                                               \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                                                       \"P01\" = 1:6,\n                                                                       \"P02\" = 7:12)),\n                             \"filtered_data\" = list(\"pioreactor_OD_data_wide\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 50:55),\n                                                    \"raw_time\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 1:6)),\n                             \"filtering_state\" = list(\"reactors_selected\" = c(),\n                                                      \"filtering_strategy\" = \"Keep\"))\n  \n  expected <- input_manual_od_readings\n  \n  expect_equal(filter_manual_ods(manual_od_readings = input_manual_od_readings, \n                                 od_data_list = input_od_data_list),\n               expected)\n})\n\ntest_that(\"no filtering of manual ods - Remove\", {\n  input_manual_od_readings <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                         \"pio_od\" = rep(c(0.01, 1.20), 2),\n                                         \"manual_od\" = rep(c(0.05, 1.00), 2))\n  \n  input_od_data_list <- list(\"raw_data\" = list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                                                      \"P01\" = 50:55,\n                                                                                      \"P02\" = 100:105),\n                                               \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                                                       \"P01\" = 1:6,\n                                                                       \"P02\" = 7:12)),\n                             \"filtered_data\" = list(\"pioreactor_OD_data_wide\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 50:55),\n                                                    \"raw_time\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 1:6)),\n                             \"filtering_state\" = list(\"reactors_selected\" = c(),\n                                                      \"filtering_strategy\" = \"Remove\"))\n  \n  expected <- input_manual_od_readings\n  \n  expect_equal(filter_manual_ods(manual_od_readings = input_manual_od_readings, \n                                 od_data_list = input_od_data_list),\n               expected)\n})\n\ntest_that(\"Filtering all of the manual ods\", {\n  input_manual_od_readings <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                         \"pio_od\" = rep(c(0.01, 1.20), 2),\n                                         \"manual_od\" = rep(c(0.05, 1.00), 2))\n  \n  input_od_data_list <- list(\"raw_data\" = list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                                                      \"P01\" = 50:55,\n                                                                                      \"P02\" = 100:105),\n                                               \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                                                       \"P01\" = 1:6,\n                                                                       \"P02\" = 7:12)),\n                             \"filtered_data\" = list(\"pioreactor_OD_data_wide\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 50:55),\n                                                    \"raw_time\" = \n                                                      data.frame(\"hours\" = 0:5,\n                                                                 \"P01\" = 1:6)),\n                             \"filtering_state\" = list(\"reactors_selected\" = c(\"P01\", \"P02\"),\n                                                      \"filtering_strategy\" = \"Remove\"))\n  \n  expected <- NULL\n  \n  expect_equal(filter_manual_ods(manual_od_readings = input_manual_od_readings, \n                                 od_data_list = input_od_data_list),\n               expected)\n})","type":"text"},{"name":"tests/testthat/test_filter_reactors.R","content":"test_that(\"Keep reactor\", {\n  input_df <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                          \"P01\" = 50:55,\n                                                          \"P02\" = 100:105),\n                   \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                           \"P01\" = 1:6,\n                                           \"P02\" = 7:12), \n                   \"file_path\" = \"file/path.csv\")\n  \n  expected_df <- list(\"pioreactor_OD_data_wide\" = data.frame(hours = 0:5, \"P01\" = 50:55),\n                      \"raw_time\" = data.frame(\"hours\" = 0:5, \"P01\" = 1:6), \n                      \"file_path\" = \"file/path.csv\")\n  \n  expect_equal(\n    filter_reactors(input_df, pios_of_interest = c(\"P01\"), filt_strat = \"Keep\"),\n    expected_df\n  )\n})\n\ntest_that(\"Remove reactor\", {\n  input_df <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                          \"P01\" = 50:55,\n                                                          \"P02\" = 100:105),\n                   \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                           \"P01\" = 1:6,\n                                           \"P02\" = 7:12), \n                   \"file_path\" = \"file/path.csv\")\n  \n  expected_df <- list(\"pioreactor_OD_data_wide\" = data.frame(hours = 0:5, \"P01\" = 50:55),\n                      \"raw_time\" = data.frame(\"hours\" = 0:5, \"P01\" = 1:6), \n                      \"file_path\" = \"file/path.csv\")\n  \n  expect_equal(\n    filter_reactors(input_df, pios_of_interest = c(\"P02\"), filt_strat = \"Remove\"),\n    expected_df\n  )\n})\n\ntest_that(\"Keep/Remove all/no reactors\", {\n  input_df <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                          \"P01\" = 50:55,\n                                                          \"P02\" = 100:105),\n                   \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                           \"P01\" = 1:6,\n                                           \"P02\" = 7:12), \n                   \"file_path\" = \"file/path.csv\")\n  \n  expected_df <- input_df\n  \n  expect_equal(\n    filter_reactors(input_df, pios_of_interest = c(), filt_strat = \"Keep\"),\n    expected_df\n  )\n  \n  expect_equal(\n    filter_reactors(input_df, pios_of_interest = c(), filt_strat = \"Remove\"),\n    expected_df\n  )\n})\n\ntest_that(\"Remove all reactors\", {\n  input_df <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                          \"P01\" = 50:55,\n                                                          \"P02\" = 100:105),\n                   \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                           \"P01\" = 1:6,\n                                           \"P02\" = 7:12), \n                   \"file_path\" = \"file/path.csv\")\n  \n  expected_df <- NULL\n  \n  expect_equal(\n    filter_reactors(input_df, pios_of_interest = c(\"P01\", \"P02\"), filt_strat = \"Remove\"),\n    expected_df\n  )\n})","type":"text"},{"name":"tests/testthat/test_format_calibrated_od_data.R","content":"test_that(\"formatting calibrated multiple reactors\", {\n  OD_values <- seq(0.01, 1.2, length.out = 5)\n  input_raw_pio_od <- list(\"raw_data\" = list(\n    \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                           \"od_reading.P01\" = OD_values,\n                                           \"od_reading.P02\" = OD_values),\n    \"raw_time\" = data.frame()),\n    \"filtered_data\" = list(\n      \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                             \"od_reading.P01\" = OD_values,\n                                             \"od_reading.P02\" = OD_values),\n      \"raw_time\" = data.frame()\n      ),\n    \"filtering_state\" = list(\"reactors_selected\" = c(),\n                             \"filtering_strategy\" = \"Remove\")\n  )\n  \n  calibrated_data <- list(\"P01\" = data.frame('hours' = c(1:5),\n                                             'Calibrated_OD' = seq(0.05, 1.0, length.out = 5),\n                                             'raw_time' = 0:4),\n                          \"P02\" = data.frame('hours' = c(1:5),\n                                             'Calibrated_OD' = seq(1.05, 2.0, length.out = 5),\n                                             'raw_time' = 0:4))\n  \n  expected <- list(\"raw_data\" = list(\n    \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                           \"od_reading.P01\" = OD_values,\n                                           \"od_reading.P02\" = OD_values),\n    \"raw_time\" = data.frame()),\n    \"filtered_data\" = list(\n      \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                             \"od_reading.P01\" = OD_values,\n                                             \"od_reading.P02\" = OD_values),\n      \"raw_time\" = data.frame()\n    ),\n    \"filtering_state\" = list(\"reactors_selected\" = c(),\n                             \"filtering_strategy\" = \"Remove\"),\n    \"calibrated_data\" = data.frame(\"hours\" = c(1:5),\n                                   \"od_reading.P01\" = seq(0.05, 1.0, length.out = 5),\n                                   \"od_reading.P02\" = seq(1.05, 2.0, length.out = 5))\n  )\n  \n  expect_equal(format_calibrated_od_data(input_raw_pio_od, calibrated_data), expected)\n})\n\ntest_that(\"formatting calibrated single reactor\", {\n  OD_values <- seq(0.01, 1.2, length.out = 5)\n  input_raw_pio_od <- list(\"raw_data\" = list(\n    \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                           \"od_reading.P01\" = OD_values,\n                                           \"od_reading.P02\" = OD_values),\n    \"raw_time\" = data.frame()),\n    \"filtered_data\" = list(\n      \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                             \"od_reading.P01\" = OD_values),\n      \"raw_time\" = data.frame()\n    ),\n    \"filtering_state\" = list(\"reactors_selected\" = c(\"P02\"),\n                             \"filtering_strategy\" = \"Remove\")\n  )\n  \n  calibrated_data <- list(\"P01\" = data.frame('hours' = c(1:5),\n                                             'Calibrated_OD' = seq(0.05, 1.0, length.out = 5),\n                                             'raw_time' = 0:4))\n  \n  expected <- list(\"raw_data\" = list(\n    \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                           \"od_reading.P01\" = OD_values,\n                                           \"od_reading.P02\" = OD_values),\n    \"raw_time\" = data.frame()),\n    \"filtered_data\" = list(\n      \"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:5),\n                                             \"od_reading.P01\" = OD_values),\n      \"raw_time\" = data.frame()\n    ),\n    \"filtering_state\" = list(\"reactors_selected\" = c(\"P02\"),\n                             \"filtering_strategy\" = \"Remove\"),\n    \"calibrated_data\" = data.frame(\"hours\" = c(1:5),\n                                   \"od_reading.P01\" = seq(0.05, 1.0, length.out = 5))\n  )\n  \n  \n  \n  expect_equal(format_calibrated_od_data(input_raw_pio_od, calibrated_data), expected)\n})","type":"text"},{"name":"tests/testthat/test_format_filter_return.R","content":"test_that(\"Construct filter retrun list\", {\n  \n  raw_readings <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = 0:5,\n                                                          \"P01\" = 50:55,\n                                                          \"P02\" = 100:105),\n                   \"raw_time\" = data.frame(\"hours\" = 0:5,\n                                           \"P01\" = 1:6,\n                                           \"P02\" = 7:12))\n  \n  filtered_readings <- list(\"pioreactor_OD_data_wide\" = data.frame(hours = 0:5, \"P01\" = 50:55),\n                      \"raw_time\" = data.frame(\"hours\" = 0:5, \"P01\" = 1:6))\n  \n  reactor_selection_input <- c()\n  filt_strat_input <- \"Keep\" # Keep or Remove\n  \n  expected_list <- list(\"raw_data\" = raw_readings,\n                        \"filtered_data\" = filtered_readings,\n                        \"filtering_state\" = list(\"reactors_selected\" = reactor_selection_input,\n                                                 \"filtering_strategy\" = filt_strat_input))\n  \n  expect_equal(\n    format_filter_return(raw_readings, filtered_readings, reactor_selection_input, filt_strat_input),\n    expected_list)\n})","type":"text"},{"name":"tests/testthat/test_iqr_outlier_detection.R","content":"test_that(\"iqr outlier detection - multi reactor\", {\n  n <- 60\n  OD_values <- rep(1, n)\n  OD_values[30] <- 10\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                                   \"od_reading.P01\" = OD_values,\n                                   \"od_reading.P02\" = OD_values)\n  \n  expected <- data.frame(\"hours\" = c(1:n),\n                            \"od_reading.P01\" = OD_values!=1,\n                            \"od_reading.P02\" = OD_values!=1)\n  \n  expect_equal(iqr_outlier_detection(input_od_data),\n               expected)\n})\n\ntest_that(\"iqr outlier detection - single reactor\", {\n  n <- 60\n  OD_values <- rep(1, n)\n  OD_values[30] <- 10\n  input_od_data <- data.frame(\"hours\" = c(1:n),\n                              \"od_reading.P01\" = OD_values)\n  \n  expected <- data.frame(\"hours\" = c(1:n),\n                                      \"od_reading.P01\" = OD_values!=1)\n  \n  expect_equal(iqr_outlier_detection(input_od_data),\n               expected)\n})","type":"text"},{"name":"tests/testthat/test_no_pio_ods_check.R","content":"test_that(\"1 x_measurements\", {\n  # Construct OD values with missing measurements in time\n  OD_values <- round(seq(0.01, 1.2, length.out = 20), 2)\n  OD_values[seq(2, 18, 2)] <- NA\n  input_raw_pio_od <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                  \"od_reading.P01\" = OD_values,\n                                                                  \"od_reading.P02\" = OD_values),\n                           \"raw_time\" = data.frame())\n  \n  input_calibration_table <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                        \"pio_od\" = NA,\n                                        \"manual_od\" = rep(c(0.05, 1.00), 2))\n  input_x_measurements <- 1\n  \n  fist_last_od <- c(0.01, 1.2)\n  expected <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                    \"pio_od\" = rep(fist_last_od, 2),\n                                                    \"manual_od\" = rep(c(0.05, 1.00), 2)),\n                   \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                     \"P01\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                \"od_reading\" = fist_last_od,\n                                \"name\" = \"P01\"),\n                     \"P02\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                \"od_reading\" = fist_last_od,\n                                \"name\" = \"P02\")\n                   )))\n  \n  rownames(expected$first_last_x_df) <- c(\"P01.1\", \"P01.2\", \"P02.1\", \"P02.2\")\n  \n  expect_equal(no_pio_ods_check(calibration_table = input_calibration_table, \n                                read_data = input_raw_pio_od, \n                                x_measurements_oi = input_x_measurements), \n               expected)\n})\n\ntest_that(\"All Pio ODs given\", {\n  # Construct OD values with missing measurements in time\n  OD_values <- round(seq(0.01, 1.2, length.out = 20), 2)\n  OD_values[seq(2, 18, 2)] <- NA\n  input_raw_pio_od <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                  \"od_reading.P01\" = OD_values,\n                                                                  \"od_reading.P02\" = OD_values),\n                           \"raw_time\" = data.frame())\n  \n  input_calibration_table <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                        \"pio_od\" = 1.00,\n                                        \"manual_od\" = rep(c(0.05, 1.00), 2))\n  input_x_measurements <- 1\n  \n  fist_last_od <- c(0.01, 1.2)\n  expected <- list(\"calibration_table\" = input_calibration_table,\n                   \"first_last_x_df\" = do.call(\"rbind.data.frame\", list())\n                   )\n  \n  expect_equal(no_pio_ods_check(calibration_table = input_calibration_table, \n                                read_data = input_raw_pio_od, \n                                x_measurements_oi = input_x_measurements), \n               expected)\n})\n\ntest_that(\"Some Pio ODs given\", {\n  # Construct OD values with missing measurements in time\n  OD_values <- round(seq(0.01, 1.2, length.out = 20), 2)\n  OD_values[seq(2, 18, 2)] <- NA\n  input_raw_pio_od <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                  \"od_reading.P01\" = OD_values,\n                                                                  \"od_reading.P02\" = OD_values),\n                           \"raw_time\" = data.frame())\n  \n  input_calibration_table <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                        \"pio_od\" = c(0.05, 1.20, NA, NA),\n                                        \"manual_od\" = rep(c(0.05, 1.00), 2))\n  input_x_measurements <- 1\n  \n  fist_last_od <- c(0.01, 1.2)\n  expected <- list(\"calibration_table\" = input_calibration_table,\n                   \"first_last_x_df\" = do.call(\"rbind.data.frame\", list())\n  )\n  \n  expect_equal(no_pio_ods_check(calibration_table = input_calibration_table, \n                                read_data = input_raw_pio_od, \n                                x_measurements_oi = input_x_measurements), \n               expected)\n})\n\ntest_that(\"Reactor ODs not found for given Pio name\", {\n  # Construct OD values with missing measurements in time\n  OD_values <- round(seq(0.01, 1.2, length.out = 20), 2)\n  OD_values[seq(2, 18, 2)] <- NA\n  input_raw_pio_od <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                  \"od_reading.P01\" = OD_values,\n                                                                  \"od_reading.P02\" = OD_values),\n                           \"raw_time\" = data.frame())\n  \n  input_calibration_table <- data.frame(\"name\" = rep(c(\"P01\", \"P03\"), each = 2),\n                                        \"pio_od\" = NA,\n                                        \"manual_od\" = rep(c(0.05, 1.00), 2))\n  input_x_measurements <- 1\n  \n  fist_last_od <- c(0.01, 1.2)\n  expected <- list(\"calibration_table\" = input_calibration_table,\n                   \"first_last_x_df\" = do.call(\"rbind.data.frame\", list())\n  )\n  \n  expect_error(no_pio_ods_check(calibration_table = input_calibration_table, \n                                read_data = input_raw_pio_od, \n                                x_measurements_oi = input_x_measurements),\n               class = \"Input_error\")\n})\n\ntest_that(\"2 x_measurements\", {\n  # Construct OD values with missing measurements in time\n  OD_values <- round(seq(0.01, 1.2, length.out = 20), 2)\n  OD_values[seq(2, 18, 2)] <- NA\n  input_raw_pio_od <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                  \"od_reading.P01\" = OD_values,\n                                                                  \"od_reading.P02\" = OD_values),\n                           \"raw_time\" = data.frame())\n  \n  input_calibration_table <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                        \"pio_od\" = NA,\n                                        \"manual_od\" = rep(c(0.05, 1.00), 2))\n  input_x_measurements <- 2\n  \n  fist_last_od <- c(0.01, 0.14, 1.14, 1.2)\n  fist_last_od_mean <- c(mean(fist_last_od[1:2]), mean(fist_last_od[3:4]))\n  first_last_column <- rep(c(\"First\", \"Last\"), each = 2)\n  expected <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                    \"pio_od\" = rep(fist_last_od_mean, 2),\n                                                    \"manual_od\" = rep(c(0.05, 1.00), 2)),\n                   \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                     \"P01\" = data.frame(\"position\" = first_last_column,\n                                        \"od_reading\" = fist_last_od,\n                                        \"name\" = \"P01\"),\n                     \"P02\" = data.frame(\"position\" = first_last_column,\n                                        \"od_reading\" = fist_last_od,\n                                        \"name\" = \"P02\")\n                     ))\n                   )\n  \n  expect_equal(no_pio_ods_check(calibration_table = input_calibration_table, \n                                read_data = input_raw_pio_od, \n                                x_measurements_oi = input_x_measurements), \n               expected)\n})\n\ntest_that(\"5 x_measurements - innerquantile mean calculation\", {\n  # Construct OD values with missing measurements in time\n  OD_values <- round(seq(0.01, 1.2, length.out = 20), 2)\n  OD_values[seq(2, 18, 2)] <- NA\n  input_raw_pio_od <- list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                  \"od_reading.P01\" = OD_values,\n                                                                  \"od_reading.P02\" = OD_values),\n                           \"raw_time\" = data.frame())\n  \n  input_calibration_table <- data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                        \"pio_od\" = NA,\n                                        \"manual_od\" = rep(c(0.05, 1.00), 2))\n  input_x_measurements <- 5\n  \n  first_ods <- c(0.01, 0.14, 0.26, 0.39, 0.51)\n  last_ods <- c(0.76, 0.89, 1.01, 1.14, 1.20)\n  first_od_value <- mean(first_ods[first_ods >= quantile(first_ods, 0.25) & \n                                    first_ods <= quantile(first_ods, 0.75)])\n  last_od_value <- mean(last_ods[last_ods >= quantile(last_ods, 0.25) &\n                                   last_ods <= quantile(last_ods, 0.75)])\n  fist_last_od_mean <- c(first_od_value, last_od_value)\n  first_last_column <- rep(c(\"First\", \"Last\"), each = 5)\n  expected <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                    \"pio_od\" = rep(fist_last_od_mean, 1),\n                                                    \"manual_od\" = rep(c(0.05, 1.00), 1)),\n                   \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                     \"P01\" = data.frame(\"position\" = first_last_column,\n                                        \"od_reading\" = c(first_ods, last_ods),\n                                        \"name\" = \"P01\"),\n                     \"P02\" = data.frame(\"position\" = first_last_column,\n                                        \"od_reading\" = c(first_ods, last_ods),\n                                        \"name\" = \"P02\")\n                   ))\n  )\n  \n  expect_equal(no_pio_ods_check(calibration_table = input_calibration_table, \n                                read_data = input_raw_pio_od, \n                                x_measurements_oi = input_x_measurements), \n               expected)\n})","type":"text"},{"name":"tests/testthat/test_plot_dataframe_raw.R","content":"library(ggplot2)\ntest_that(\"Plot simple raw data\",{\n  input_df <- data.frame(\"timestamp\" = 0:5, \n                         \"od_reading\" = 50:55)\n  \n  vdiffr::expect_doppelganger(\"Simple_raw_data_plot\", \n                              plot_dataframe_raw(dataframe = input_df, \n                                                 name = \"od_reading.P02\", \n                                                 filter_vector = c(), \n                                                 filt_strat = \"Keep\"))\n})\n\ntest_that(\"Plot simple raw data - KEEP\",{\n  input_df <- data.frame(\"timestamp\" = 0:5, \n                         \"od_reading\" = 50:55)\n  \n  vdiffr::expect_doppelganger(\"Simple_raw_data_plot_keep\", \n                              plot_dataframe_raw(dataframe = input_df, \n                                                 name = \"od_reading.P02\", \n                                                 filter_vector = c(\"P02\"), \n                                                 filt_strat = \"Keep\"))\n})\n\ntest_that(\"Plot simple raw data - REMOVE\",{\n  input_df <- data.frame(\"timestamp\" = 0:5, \n                         \"od_reading\" = 50:55)\n  \n  vdiffr::expect_doppelganger(\"Simple_raw_data_plot_remove\", \n                              plot_dataframe_raw(dataframe = input_df, \n                                                 name = \"od_reading.P02\", \n                                                 filter_vector = c(\"P02\"), \n                                                 filt_strat = \"Remove\"))\n})\n\ntest_that(\"Plot simple raw data - negative od\",{\n  input_df <- data.frame(\"timestamp\" = 0:5, \n                         \"od_reading\" = -1:4)\n  \n  vdiffr::expect_doppelganger(\"Simple_raw_data_plot_negative_od\", \n                              plot_dataframe_raw(dataframe = input_df, \n                                                 name = \"od_reading.P02\", \n                                                 filter_vector = c(\"\"), \n                                                 filt_strat = \"Keep\"))\n})","type":"text"},{"name":"tests/testthat/test_plot_raw_data.R","content":"library(ggplot2)\ntest_that(\"Plot raw data grid simple\",{\n  input_df <- data.frame(\"hours\" = 0:5, \n                         \"od_reading.P02\" = 50:55,\n                         \"od_reading.P03\" = 55:60)\n  \n  vdiffr::expect_doppelganger(\"plot_grid_simple_example\", \n                              plot_raw_data(raw_data = input_df, \n                                            filter_vector = c(), \n                                            filt_strat = \"Keep\"))\n})\n\ntest_that(\"Plot raw data single plot\",{\n  input_df <- data.frame(\"hours\" = 0:5, \n                         \"od_reading.P03\" = 55:60)\n  \n  vdiffr::expect_doppelganger(\"plot_single_simple_example\", \n                              plot_raw_data(raw_data = input_df, \n                                            filter_vector = c(), \n                                            filt_strat = \"Keep\"))\n})\n\ntest_that(\"Plot raw data grid keep\",{\n  input_df <- data.frame(\"hours\" = 0:5, \n                         \"od_reading.P02\" = 50:55,\n                         \"od_reading.P03\" = 55:60)\n  \n  vdiffr::expect_doppelganger(\"plot_grid_keep_example\", \n                              plot_raw_data(raw_data = input_df, \n                                            filter_vector = c(\"P03\"), \n                                            filt_strat = \"Keep\"))\n})\ntest_that(\"Plot raw data grid remove\",{\n  input_df <- data.frame(\"hours\" = 0:5, \n                         \"od_reading.P02\" = 50:55,\n                         \"od_reading.P03\" = 55:60)\n  \n  vdiffr::expect_doppelganger(\"plot_grid_remove_example\", \n                              plot_raw_data(raw_data = input_df, \n                                            filter_vector = c(\"P03\"), \n                                            filt_strat = \"Remove\"))\n})","type":"text"},{"name":"tests/testthat/test_predict_calibrated_ods.R","content":"test_that(\"Normal function\",{\n  calibration_data <- data.frame(\"pio_od\" = c(0.1, 1.2),\n                                 \"manual_od\" = c(0.05, 1.0))\n  \n  calibration_model <- list(\"P01\" = list(\"calibration_model\" = lm(formula = manual_od ~ pio_od, \n                                                                  data = calibration_data)),\n                            \"P02\" = list(\"calibration_model\" = lm(formula = manual_od ~ pio_od, \n                                                                  data = calibration_data)))\n  \n  read_data <- list(\"raw_data\" = list(\"pioreactor_OD_data_wide\" = data.frame(\"hours\" = c(1:20),\n                                                                             \"P01\" = seq(0.01, 1.2, length.out = 20),\n                                                                             \"P02\" = seq(0.01, 1.2, length.out = 20)),\n                                      \"raw_time\" = data.frame(\"hours\" = c(1:20),\n                                                              \"P01\" = c(3:22),\n                                                              \"P02\" = c(3:22))),\n                    \"filtered_data\" = list(\"pioreactor_OD_data_wide\" = \n                                             data.frame(\"hours\" = c(1:20),\n                                                        \"P01\" = seq(0.01, 1.2, length.out = 20),\n                                                        \"P02\" = seq(0.01, 1.2, length.out = 20)),\n                                           \"raw_time\" = \n                                             data.frame(\"hours\" = c(1:20),\n                                                        \"P01\" = c(3:22),\n                                                        \"P02\" = c(3:22))),\n                    \"filtering_state\" = list(\"reactors_selected\" = c(),\n                                             \"filtering_strategy\" = \"Remove\"))\n  \n  expect_snapshot(predict_calibrated_ods(calibration_model, read_data))\n  }\n)","type":"text"},{"name":"tests/testthat/test_raw_pio_od_data_to_wide_frame.R","content":"test_that(\"Read od_readings.csv file\", {\n  expect_snapshot(\n  raw_pio_od_data_to_wide_frame(\n    test_path(\"Data\", \n              \"raw_pio_od_data_to_wide_frame\", \n              \"Two_reactor_test_read.csv\")\n    )\n  )\n})\n\n\ntest_that(\"NULL input blank return\", {\n  #### Missing Reactor unit column ####\n  expect_equal(raw_pio_od_data_to_wide_frame(NULL), NULL)\n})\n\n\ntest_that(\"Read invalidly formatted file\", {\n  #### Missing Reactor unit column ####\n  expect_error(raw_pio_od_data_to_wide_frame(\n    test_path(\"Data\",\n              \"raw_pio_od_data_to_wide_frame\",\n              \"Invalid_format_missing_unit.csv\")\n    )\n  )\n  \n  #### Missing time stamp column ####\n  expect_error(raw_pio_od_data_to_wide_frame(\n    test_path(\"Data\",\n              \"raw_pio_od_data_to_wide_frame\",\n              \"Invalid_format_missing_timestamp.csv\")\n  )\n  )\n})","type":"text"},{"name":"tests/testthat/test_read_dosing_automation_events_data.R","content":"test_that(\"read correct dosing event + long od_readings file\", {\n  input_od_file <- \"Data/read_dosing_automation_events_data/Long_Pio-Experiment-od_readings.csv\"\n  \n  input_automated_dosing_events_file <- \"Data/read_dosing_automation_events_data/Pio-Experiment-dosing_automation_events.csv\"\n  \n  expected <- data.table::data.table(\n    \"pioreactor_unit\" = c(\"P06\", \"P06\", \"P06\", \"P07\", \n                          \"P10\", \"P06\", \"P06\", \"P10\", \n                          \"P08\", \"P07\", \"P06\", \"P08\", \n                          \"P06\", \"P10\", \"P06\"),\n    \"hours\" = as.difftime(c(15.516, 17.966, 21.929, \n                            25.366, 25.375, 25.741, \n                            29.870, 31.475, 31.774, \n                            33.212, 34.354, 37.416, \n                            39.616, 40.675, 45.554), \n                          units = \"hours\"))\n  \n  \n  ## Test\n  expect_equal(object = read_dosing_automation_events_data(\n    od_readings_csv = input_od_file, \n    dosing_automation_events_csv = input_automated_dosing_events_file), \n    expected = expected)\n})\n\ntest_that(\"read correct dosing event + short od_readings file\", {\n  input_od_file <- \"Data/read_dosing_automation_events_data/Short_Pio-Experiment-od_readings.csv\"\n  \n  input_automated_dosing_events_file <- \"Data/read_dosing_automation_events_data/Pio-Experiment-dosing_automation_events.csv\"\n  \n  expected <- data.table::data.table(\n    \"pioreactor_unit\" = c(\"P06\", \"P06\", \"P06\", \"P07\", \n                          \"P10\", \"P06\", \"P06\", \"P10\", \n                          \"P08\", \"P07\", \"P06\", \"P08\", \n                          \"P06\", \"P10\", \"P06\"),\n    \"hours\" = as.difftime(c(15.516, 17.966, 21.929, \n                            25.366, 25.375, 25.741, \n                            29.870, 31.475, 31.774, \n                            33.212, 34.354, 37.416, \n                            39.616, 40.675, 45.554), \n                          units = \"hours\"))\n  \n  \n  ## Test\n  expect_equal(object = read_dosing_automation_events_data(\n    od_readings_csv = input_od_file, \n    dosing_automation_events_csv = input_automated_dosing_events_file), \n    expected = expected)\n})\n\ntest_that(\"Read empty dosing event\", {\n  input_od_file <- \"Data/read_dosing_automation_events_data/Empty_Pio-Experiment-od_readings.csv\"\n  \n  input_automated_dosing_events_file <- \"Data/read_dosing_automation_events_data/Empty_Pio-Experiment-od_readings.csv\"\n  \n  expect_null(read_dosing_automation_events_data(od_readings_csv = input_od_file, \n                                     dosing_automation_events_csv = input_automated_dosing_events_file))\n})\n\ntest_that(\"No DilutionEvents in file\", {\n  input_od_file <- \"Data/read_dosing_automation_events_data/No_DilutionEvent_Pio-Experiment-dosing_automation_events.csv\"\n  \n  input_automated_dosing_events_file <- \"Data/read_dosing_automation_events_data/Long_Pio-Experiment-od_readings.csv\"\n  \n  expect_null(read_dosing_automation_events_data(od_readings_csv = input_od_file, \n                                                 dosing_automation_events_csv = input_automated_dosing_events_file))\n})","type":"text"},{"name":"tests/testthat/test_read_manual_ods.R","content":"test_that(\"Read manual_od_readings.csv file\", {\n  expected <- data.frame(\"name\" = rep(c(\"P13\", \"P14\", \"P15\", \"P16\", \"P17\", \"P20\"), each = 2),\n                         \"pio_od\" = 0.01,\n                         \"manual_od\" = rep(c(0.05, 1.00), 6))\n  expect_equal(\n    read_manual_ods(\n      test_path(\"Data\", \"read_manual_ods\", \"test_manual_od_file.csv\")), \n    expected\n  )\n})\n\ntest_that(\"NULL input blank return\", {\n  #### Missing Reactor unit column ####\n  expect_equal(read_manual_ods(NULL), NULL)\n})\n\ntest_that(\"Read file with 'reactor' column instead od name - test back compatability\", {\n  expected <- data.frame(\"name\" = rep(c(\"P13\", \"P14\", \"P15\", \"P16\", \"P17\", \"P20\"), each = 2),\n                         \"pio_od\" = 0.01,\n                         \"manual_od\" = rep(c(0.05, 1.00), 6))\n  expect_equal(\n    read_manual_ods(\n      test_path(\"Data\", \"read_manual_ods\", \"back_compatability_using_reactor_column.csv\")), \n    expected\n  )\n})\n\ntest_that(\"Read file missing name column\", {\n  expect_error(\n    read_manual_ods(test_path(\"Data\", \"read_manual_ods\", \"missing_name.csv\")),\n    class = \"Input_error\"\n  )\n})\n\n\ntest_that(\"Read file missing manual od column\", {\n  expect_error(\n    read_manual_ods(test_path(\"Data\", \"read_manual_ods\", \"missing_manual.csv\")),\n    class = \"Input_error\"\n    )\n})\n\ntest_that(\"Read file missing pio od column\", {\n  expected <- data.frame(\"name\" = rep(c(\"P13\", \"P14\", \"P15\", \"P16\", \"P17\", \"P20\"), each = 2),\n                         \"pio_od\" = NA,\n                         \"manual_od\" = rep(c(0.05, 1.00), 6))\n  expect_equal(\n    read_manual_ods(\n      test_path(\"Data\", \"read_manual_ods\", \"missing_pio.csv\")), \n    expected\n  )\n})\n\ntest_that(\"Indifference to order of columns\", {\n  expected <- data.frame(\"name\" = rep(c(\"P13\", \"P14\", \"P15\", \"P16\", \"P17\", \"P20\"), each = 2),\n                         \"pio_od\" = 0.01,\n                         \"manual_od\" = rep(c(0.05, 1.00), 6))\n  expect_equal(\n    read_manual_ods(\n      test_path(\"Data\", \"read_manual_ods\", \"indifference_in_column_order.csv\")), \n    expected\n  )\n})\n\ntest_that(\"Indifference to additional unrelated of columns\", {\n  expected <- data.frame(\"name\" = rep(c(\"P13\", \"P14\", \"P15\", \"P16\", \"P17\", \"P20\"), each = 2),\n                         \"pio_od\" = 0.01,\n                         \"manual_od\" = rep(c(0.05, 1.00), 6))\n  expect_equal(\n    read_manual_ods(\n      test_path(\"Data\", \"read_manual_ods\", \"unrelated_column_test.csv\")), \n    expected\n  )\n})\n\ntest_that(\"appearance of more than one manual od column\", {\n  expect_error(\n    read_manual_ods(test_path(\"Data\", \"read_manual_ods\", \"additional_manual_column.csv\")), \n    class = \"Input_error\"\n  )\n})\n\ntest_that(\"appearance of more than one name column\", {\n  expect_error(\n    read_manual_ods(test_path(\"Data\", \"read_manual_ods\", \"additional_name_column.csv\")), \n    class = \"Input_error\"\n  )\n})","type":"text"},{"name":"tests/testthat/test_spline_growth_integration.R","content":"test_that(\"simple spline\", {\n  n <- 5\n  OD_values <- exp(1:n)\n  input_od_data_list <- list(\"raw_data\" = list(),\n    \"filtered_data\" = list(),\n    \"filtering_state\" = list(),\n    \"outliers\" = data.frame(\"hours\" = 1:n,\n                            \"od_reading.P01\" = rep(F, n),\n                            \"od_reading.P02\" = rep(F, n)),\n    \"negative_corrected\" = data.frame(\"hours\" = 1:n,\n                                      \"od_reading.P01\" = OD_values,\n                                      \"od_reading.P02\" = OD_values)\n  )\n  \n  expect_snapshot(spline_growth_integration(input_od_data_list))\n})\n\ntest_that(\"spline w. NA\", {\n  n <- 5\n  OD_values <- exp(1:n)\n  OD_values[1] <- NA\n  input_od_data_list <- list(\"raw_data\" = list(),\n                             \"filtered_data\" = list(),\n                             \"filtering_state\" = list(),\n                             \"outliers\" = data.frame(\"hours\" = 1:n,\n                                                     \"od_reading.P01\" = rep(F, n),\n                                                     \"od_reading.P02\" = rep(F, n)),\n                             \"negative_corrected\" = data.frame(\"hours\" = 1:n,\n                                                               \"od_reading.P01\" = OD_values,\n                                                               \"od_reading.P02\" = OD_values)\n  )\n  \n  expect_snapshot(spline_growth_integration(input_od_data_list))\n})\n\ntest_that(\"spline w. outlier\", {\n  n <- 5\n  OD_values <- exp(1:n)\n  outlier_vector <- c(T, rep(F, n-1))\n  input_od_data_list <- list(\"raw_data\" = list(),\n                             \"filtered_data\" = list(),\n                             \"filtering_state\" = list(),\n                             \"outliers\" = data.frame(\"hours\" = 1:n,\n                                                     \"od_reading.P01\" = outlier_vector,\n                                                     \"od_reading.P02\" = outlier_vector),\n                             \"negative_corrected\" = data.frame(\"hours\" = 1:n,\n                                                               \"od_reading.P01\" = OD_values,\n                                                               \"od_reading.P02\" = OD_values)\n  )\n  \n  expect_snapshot(spline_growth_integration(input_od_data_list))\n})\n\ntest_that(\"spline w. outlier and NA\", {\n  n <- 10\n  OD_values <- exp(1:n)\n  OD_values[3] <- NA\n  outlier_vector <- c(T, rep(F, n-1))\n  input_od_data_list <- list(\"raw_data\" = list(),\n                             \"filtered_data\" = list(),\n                             \"filtering_state\" = list(),\n                             \"outliers\" = data.frame(\"hours\" = 1:n,\n                                                     \"od_reading.P01\" = outlier_vector,\n                                                     \"od_reading.P02\" = outlier_vector),\n                             \"negative_corrected\" = data.frame(\"hours\" = 1:n,\n                                                               \"od_reading.P01\" = OD_values,\n                                                               \"od_reading.P02\" = OD_values)\n  )\n  \n  expect_snapshot(spline_growth_integration(input_od_data_list))\n})","type":"text"},{"name":"tests/testthat/test_spline_growth_integration_turbidostat.R","content":"test_that(\"Single reactor single growth\", {\n  \n})\n\ntest_that(\"Single reactor multiple growths\", {\n  \n})","type":"text"},{"name":"tests/testthat/test_spline_outlier_detection.R","content":"test_that(\"spline outlier w. previous outliers no outlier data\", {\n  set.seed(214)\n  data_length = 10\n  od_data = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = 1 + rnorm(data_length),\n    \"od_reading.P02\" = 1 + rnorm(data_length)\n  )\n\n  outlier_df = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = FALSE,\n    \"od_reading.P02\" = FALSE\n  )\n\n  expected = outlier_df\n\n  expect_equal(\n    spline_outlier_detection(\n      od_data = od_data,\n      outlier_df = outlier_df,\n      input_df = 10\n    ),\n    expected = expected\n  )\n})\n\ntest_that(\"spline outlier w. no previous outliers  no outlier data\", {\n  set.seed(214)\n  data_length = 10\n  od_data = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = 1 + rnorm(data_length),\n    \"od_reading.P02\" = 1 + rnorm(data_length)\n  )\n\n  expected = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = FALSE,\n    \"od_reading.P02\" = FALSE\n  )\n\n  expect_equal(\n    spline_outlier_detection(od_data = od_data, input_df = 10),\n    expected = expected\n  )\n})\n\ntest_that(\"spline outlier w. previous outliers w. outlier data\", {\n  set.seed(213)\n  data_length = 10\n  od_data = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      1 + rnorm(data_length / 2),\n      50,\n      1 + rnorm(data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = c(1 + rnorm(data_length))\n  )\n\n  outlier_df = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = FALSE,\n    \"od_reading.P02\" = FALSE\n  )\n\n  expected = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      rep(FALSE, data_length / 2),\n      TRUE,\n      rep(FALSE, data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = FALSE\n  )\n\n  expect_equal(\n    spline_outlier_detection(\n      od_data = od_data,\n      outlier_df = outlier_df,\n      input_df = 5\n    ),\n    expected = expected\n  )\n})\n\ntest_that(\"spline outlier no previous outliers w. outlier data\", {\n  set.seed(213)\n  data_length = 10\n  od_data = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      1 + rnorm(data_length / 2),\n      50,\n      1 + rnorm(data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = c(1 + rnorm(data_length))\n  )\n\n  expected = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      rep(FALSE, data_length / 2),\n      TRUE,\n      rep(FALSE, data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = FALSE\n  )\n\n  expect_equal(\n    spline_outlier_detection(od_data = od_data, input_df = 5),\n    expected = expected\n  )\n})\n\ntest_that(\"spline outlier w. previous IQR outliers w. outlier data\", {\n  set.seed(213)\n  data_length = 10\n  od_data = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(1 + rnorm(data_length)),\n    \"od_reading.P02\" = c(1 + rnorm(data_length))\n  )\n\n  outlier_df = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      rep(FALSE, data_length / 2),\n      TRUE,\n      rep(FALSE, data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = FALSE\n  )\n\n  expected = outlier_df\n\n  expect_equal(\n    spline_outlier_detection(\n      od_data = od_data,\n      outlier_df = outlier_df,\n      input_df = 5\n    ),\n    expected = expected\n  )\n})\n\ntest_that(\"spline outlier w. previous IQR outliers and spline outlier data\", {\n  set.seed(213)\n  data_length = 10\n  od_data = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      1 + rnorm(data_length / 2 - 1),\n      35,\n      50,\n      1 + rnorm(data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = c(1 + rnorm(data_length))\n  )\n\n  outlier_df = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      rep(FALSE, data_length / 2 - 1),\n      FALSE,\n      TRUE,\n      rep(FALSE, data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = FALSE\n  )\n\n  expected = data.frame(\n    \"hours\" = 1:data_length,\n    \"od_reading.P01\" = c(\n      rep(FALSE, data_length / 2 - 1),\n      TRUE,\n      TRUE,\n      rep(FALSE, data_length / 2 - 1)\n    ),\n    \"od_reading.P02\" = FALSE\n  )\n\n  expect_equal(\n    spline_outlier_detection(\n      od_data = od_data,\n      outlier_df = outlier_df,\n      input_df = 5\n    ),\n    expected = expected\n  )\n})\n\n# test_that(\"More realistic example no outlier\", {\n#   set.seed(124)\n#   od_data = data.frame(\"hours\" = 1:100,\n#                        \"od_reading.P01\" = sin(seq(0, 1, length.out = 100)),\n#                        \"od_reading.P02\" = sin(seq(0, 1, length.out = 100)))\n#\n#   outlier_df = data.frame(\"hours\" = 1:100,\n#                           \"od_reading.P01\" = FALSE,\n#                           \"od_reading.P02\" = FALSE)\n#\n#   expected = outlier_df\n#\n#   expect_equal(spline_outlier_detection(od_data = od_data,\n#                                         outlier_df = outlier_df,\n#                                         input_df = 100),\n#                expected = expected)\n# })\n\ntest_that(\"More realistic example w. outlier\", {\n  set.seed(124)\n  od_data = data.frame(\n    \"hours\" = 1:100,\n    \"od_reading.P01\" = sin(seq(0, 1, length.out = 100)) *\n      1:100 +\n      rnorm(100, 2, 2),\n    \"od_reading.P02\" = sin(seq(0, 1, length.out = 100)) *\n      1:100 +\n      rnorm(100, 2, 2)\n  )\n  # Set outlier\n  od_data[50, 2:3] <- 100\n\n  outlier_df = data.frame(\n    \"hours\" = 1:100,\n    \"od_reading.P01\" = FALSE,\n    \"od_reading.P02\" = FALSE\n  )\n\n  expected <- outlier_df\n  expected[50, 2:3] <- TRUE\n\n  expect_equal(\n    spline_outlier_detection(\n      od_data = od_data,\n      outlier_df = outlier_df,\n      input_df = 10\n    ),\n    expected = expected\n  )\n})\n","type":"text"},{"name":"tests/testthat/test_split_od_per_reactor.R","content":"test_that(\"No fixed_intercept nor zero_point\", {\n  fist_last_od <- c(0.01, 1.2)\n  input <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                    \"pio_od\" = rep(fist_last_od, 2),\n                                                    \"manual_od\" = rep(c(0.05, 1.00), 2)),\n                \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                  \"P01\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P01\"),\n                  \"P02\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P02\")\n                  )))\n  \n  expect_snapshot(split_od_per_reactor(input, fixed_intercept = F, add_zero_point = F))\n})\n\ntest_that(\"Add fixed_intercept\", {\n  fist_last_od <- c(0.01, 1.2)\n  input <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                 \"pio_od\" = rep(fist_last_od, 2),\n                                                 \"manual_od\" = rep(c(0.05, 1.00), 2)),\n                \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                  \"P01\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P01\"),\n                  \"P02\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P02\")\n                )))\n  \n  expect_snapshot(split_od_per_reactor(input, fixed_intercept = T, add_zero_point = F))\n})\n\ntest_that(\"Add zero_point\", {\n  fist_last_od <- c(0.01, 1.2)\n  input <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                 \"pio_od\" = rep(fist_last_od, 2),\n                                                 \"manual_od\" = rep(c(0.05, 1.00), 2)),\n                \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                  \"P01\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P01\"),\n                  \"P02\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P02\")\n                )))\n  \n  expect_snapshot(split_od_per_reactor(input, fixed_intercept = F, add_zero_point = T))\n})\n\ntest_that(\"Both fixed_intercept and zero_point\", {\n  fist_last_od <- c(0.01, 1.2)\n  input <- list(\"calibration_table\" = data.frame(\"name\" = rep(c(\"P01\", \"P02\"), each = 2),\n                                                 \"pio_od\" = rep(fist_last_od, 2),\n                                                 \"manual_od\" = rep(c(0.05, 1.00), 2)),\n                \"first_last_x_df\" = do.call(\"rbind.data.frame\", list(\n                  \"P01\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P01\"),\n                  \"P02\" = data.frame(\"position\" = c(\"First\", \"Last\"),\n                                     \"od_reading\" = fist_last_od,\n                                     \"name\" = \"P02\")\n                )))\n  \n  expect_snapshot(split_od_per_reactor(input, fixed_intercept = T, add_zero_point = T))\n})","type":"text"},{"name":"tests/testthat/test_split_turbidostat_data.R","content":"test_that(\"split multiple reactors\", {\n  input_od_df <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = c(0.05, 0.10, 0.20, 0.07, 0.12, 0.21),\n    \"od_reading.P02\" = c(0.05, 0.10, 0.20, 0.07, 0.12, 0.21)\n  )\n\n  input_dosing_events <- data.table::data.table(\n    \"pioreactor_unit\" = c(\"P01\", \"P02\"),\n    as.difftime(c(3, 4), units = \"hours\")\n  )\n\n  input_outlier_data <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = F,\n    \"od_reading.P02\" = F\n  )\n\n  ## Expected is\n  expected <- list(\n    \"P01\" = list(\n      \"1\" = data.frame(\n        \"timestamp\" = c(1, 2, 3),\n        \"od_reading\" = c(0.05, 0.10, 0.20)\n      ),\n      \"2\" = data.frame(\n        \"timestamp\" = c(4, 5, 6),\n        \"od_reading\" = c(0.07, 0.12, 0.21)\n      )\n    ),\n    \"P02\" = list(\n      \"1\" = data.frame(\n        \"timestamp\" = c(1, 2, 3, 4),\n        \"od_reading\" = c(0.05, 0.10, 0.20, 0.07)\n      ),\n      \"2\" = data.frame(\"timestamp\" = c(5, 6), \"od_reading\" = c(0.12, 0.21))\n    )\n  )\n\n  expect_equal(\n    split_turbidostat_data(\n      od_data = input_od_df,\n      dosing_automation_events = input_dosing_events,\n      outlier_data = input_outlier_data\n    ),\n    expected = expected\n  )\n})\n\ntest_that(\"split single reactor\", {\n  input_od_df <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = c(0.05, 0.10, 0.20, 0.07, 0.12, 0.21)\n  )\n\n  input_dosing_events <- data.table::data.table(\n    \"pioreactor_unit\" = c(\"P01\"),\n    as.difftime(c(3), units = \"hours\")\n  )\n\n  input_outlier_data <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = F\n  )\n\n  ## Expected is\n  expected <- list(\n    \"P01\" = list(\n      \"1\" = data.frame(\n        \"timestamp\" = c(1, 2, 3),\n        \"od_reading\" = c(0.05, 0.10, 0.20)\n      ),\n      \"2\" = data.frame(\n        \"timestamp\" = c(4, 5, 6),\n        \"od_reading\" = c(0.07, 0.12, 0.21)\n      )\n    )\n  )\n\n  expect_equal(\n    split_turbidostat_data(\n      od_data = input_od_df,\n      dosing_automation_events = input_dosing_events,\n      outlier_data = input_outlier_data\n    ),\n    expected = expected\n  )\n})\n\ntest_that(\"split multiple reactors w. outlier data\", {\n  input_od_df <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = c(0.05, 0.10, 0.20, 0.07, 0.12, 0.21),\n    \"od_reading.P02\" = c(0.05, 0.10, 0.20, 0.07, 0.12, 0.21)\n  )\n\n  input_dosing_events <- data.table::data.table(\n    \"pioreactor_unit\" = c(\"P01\", \"P02\"),\n    as.difftime(c(3, 4), units = \"hours\")\n  )\n\n  input_outlier_data <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = c(F, F, T, F, F, F),\n    \"od_reading.P02\" = c(F, T, F, F, F, F)\n  )\n\n  ## Expected is\n  expected <- list(\n    \"P01\" = list(\n      \"1\" = data.frame(\"timestamp\" = c(1, 2), \"od_reading\" = c(0.05, 0.10)),\n      \"2\" = data.frame(\n        \"timestamp\" = c(4, 5, 6),\n        \"od_reading\" = c(0.07, 0.12, 0.21)\n      )\n    ),\n    \"P02\" = list(\n      \"1\" = data.frame(\n        \"timestamp\" = c(1, 3, 4),\n        \"od_reading\" = c(0.05, 0.20, 0.07)\n      ),\n      \"2\" = data.frame(\"timestamp\" = c(5, 6), \"od_reading\" = c(0.12, 0.21))\n    )\n  )\n\n  expect_equal(\n    split_turbidostat_data(\n      od_data = input_od_df,\n      dosing_automation_events = input_dosing_events,\n      outlier_data = input_outlier_data\n    ),\n    expected = expected\n  )\n})\n\ntest_that(\"split single reactor w. outlier data\", {\n  input_od_df <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = c(0.05, 0.10, 0.20, 0.07, 0.12, 0.21)\n  )\n\n  input_dosing_events <- data.table::data.table(\n    \"pioreactor_unit\" = c(\"P01\"),\n    as.difftime(c(3), units = \"hours\")\n  )\n\n  input_outlier_data <- data.frame(\n    \"hours\" = c(1, 2, 3, 4, 5, 6),\n    \"od_reading.P01\" = c(F, F, F, F, T, F)\n  )\n\n  ## Expected is\n  expected <- list(\n    \"P01\" = list(\n      \"1\" = data.frame(\n        \"timestamp\" = c(1, 2, 3),\n        \"od_reading\" = c(0.05, 0.10, 0.20)\n      ),\n      \"2\" = data.frame(\"timestamp\" = c(4, 6), \"od_reading\" = c(0.07, 0.21))\n    )\n  )\n\n  expect_equal(\n    split_turbidostat_data(\n      od_data = input_od_df,\n      dosing_automation_events = input_dosing_events,\n      outlier_data = input_outlier_data\n    ),\n    expected = expected\n  )\n})\n","type":"text"},{"name":"tests/testthat/test_user_pio_selection.R","content":"#### Test NULL input ####\ntest_that(\"user_pio_selection handles NULL input correctly\", {\n  expect_null(user_pio_selection(NULL, NULL))\n})","type":"text"},{"name":"tests/testthat.R","content":"# This file is part of the standard setup for testthat.\n# It is recommended that you do not modify it.\n#\n# Where should you do additional test configuration?\n# Learn more about the roles of various files in:\n# * https://r-pkgs.org/testing-design.html#sec-tests-files-overview\n# * https://testthat.r-lib.org/articles/special-files.html\n\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(vdiffr)\nlibrary(shiny)\n\ntest_check(\"PioGrowth\")\n","type":"text"}]
